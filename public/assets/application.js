/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */

(function (window, undefined) {

// Use the correct document accordingly with window argument (sandbox)
    var document = window.document,
        navigator = window.navigator,
        location = window.location;
    var jQuery = (function () {

// Define a local copy of jQuery
        var jQuery = function (selector, context) {
                // The jQuery object is actually just the init constructor 'enhanced'
                return new jQuery.fn.init(selector, context, rootjQuery);
            },

        // Map over jQuery in case of overwrite
            _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
            _$ = window.$,

        // A central reference to the root jQuery(document)
            rootjQuery,

        // A simple way to check for HTML strings or ID strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
            quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

        // Check if a string has a non-whitespace character in it
            rnotwhite = /\S/,

        // Used for trimming whitespace
            trimLeft = /^\s+/,
            trimRight = /\s+$/,

        // Match a standalone tag
            rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

        // JSON RegExp
            rvalidchars = /^[\],:{}\s]*$/,
            rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
            rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
            rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

        // Useragent RegExp
            rwebkit = /(webkit)[ \/]([\w.]+)/,
            ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
            rmsie = /(msie) ([\w.]+)/,
            rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

        // Matches dashed string for camelizing
            rdashAlpha = /-([a-z]|[0-9])/ig,
            rmsPrefix = /^-ms-/,

        // Used by jQuery.camelCase as callback to replace()
            fcamelCase = function (all, letter) {
                return ( letter + "" ).toUpperCase();
            },

        // Keep a UserAgent string for use with jQuery.browser
            userAgent = navigator.userAgent,

        // For matching the engine and version of the browser
            browserMatch,

        // The deferred used on DOM ready
            readyList,

        // The ready event handler
            DOMContentLoaded,

        // Save a reference to some core methods
            toString = Object.prototype.toString,
            hasOwn = Object.prototype.hasOwnProperty,
            push = Array.prototype.push,
            slice = Array.prototype.slice,
            trim = String.prototype.trim,
            indexOf = Array.prototype.indexOf,

        // [[Class]] -> type pairs
            class2type = {};

        jQuery.fn = jQuery.prototype = {
            constructor:jQuery,
            init:function (selector, context, rootjQuery) {
                var match, elem, ret, doc;

                // Handle $(""), $(null), or $(undefined)
                if (!selector) {
                    return this;
                }

                // Handle $(DOMElement)
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this;
                }

                // The body element only exists once, optimize finding it
                if (selector === "body" && !context && document.body) {
                    this.context = document;
                    this[0] = document.body;
                    this.selector = selector;
                    this.length = 1;
                    return this;
                }

                // Handle HTML strings
                if (typeof selector === "string") {
                    // Are we dealing with HTML string or an ID?
                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        // Assume that strings that start and end with <> are HTML and skip the regex check
                        match = [ null, selector, null ];

                    } else {
                        match = quickExpr.exec(selector);
                    }

                    // Verify a match, and that no context was specified for #id
                    if (match && (match[1] || !context)) {

                        // HANDLE: $(html) -> $(array)
                        if (match[1]) {
                            context = context instanceof jQuery ? context[0] : context;
                            doc = ( context ? context.ownerDocument || context : document );

                            // If a single string is passed in and it's a single tag
                            // just do a createElement and skip the rest
                            ret = rsingleTag.exec(selector);

                            if (ret) {
                                if (jQuery.isPlainObject(context)) {
                                    selector = [ document.createElement(ret[1]) ];
                                    jQuery.fn.attr.call(selector, context, true);

                                } else {
                                    selector = [ doc.createElement(ret[1]) ];
                                }

                            } else {
                                ret = jQuery.buildFragment([ match[1] ], [ doc ]);
                                selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
                            }

                            return jQuery.merge(this, selector);

                            // HANDLE: $("#id")
                        } else {
                            elem = document.getElementById(match[2]);

                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if (elem && elem.parentNode) {
                                // Handle the case where IE and Opera return items
                                // by name instead of ID
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector);
                                }

                                // Otherwise, we inject the element directly into the jQuery object
                                this.length = 1;
                                this[0] = elem;
                            }

                            this.context = document;
                            this.selector = selector;
                            return this;
                        }

                        // HANDLE: $(expr, $(...))
                    } else if (!context || context.jquery) {
                        return ( context || rootjQuery ).find(selector);

                        // HANDLE: $(expr, context)
                        // (which is just equivalent to: $(context).find(expr)
                    } else {
                        return this.constructor(context).find(selector);
                    }

                    // HANDLE: $(function)
                    // Shortcut for document ready
                } else if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector);
                }

                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context;
                }

                return jQuery.makeArray(selector, this);
            },

            // Start with an empty selector
            selector:"",

            // The current version of jQuery being used
            jquery:"1.7.2",

            // The default length of a jQuery object is 0
            length:0,

            // The number of elements contained in the matched element set
            size:function () {
                return this.length;
            },

            toArray:function () {
                return slice.call(this, 0);
            },

            // Get the Nth element in the matched element set OR
            // Get the whole matched element set as a clean array
            get:function (num) {
                return num == null ?

                    // Return a 'clean' array
                    this.toArray() :

                    // Return just the object
                    ( num < 0 ? this[ this.length + num ] : this[ num ] );
            },

            // Take an array of elements and push it onto the stack
            // (returning the new matched element set)
            pushStack:function (elems, name, selector) {
                // Build a new jQuery matched element set
                var ret = this.constructor();

                if (jQuery.isArray(elems)) {
                    push.apply(ret, elems);

                } else {
                    jQuery.merge(ret, elems);
                }

                // Add the old object onto the stack (as a reference)
                ret.prevObject = this;

                ret.context = this.context;

                if (name === "find") {
                    ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
                } else if (name) {
                    ret.selector = this.selector + "." + name + "(" + selector + ")";
                }

                // Return the newly-formed element set
                return ret;
            },

            // Execute a callback for every element in the matched set.
            // (You can seed the arguments with an array of args, but this is
            // only used internally.)
            each:function (callback, args) {
                return jQuery.each(this, callback, args);
            },

            ready:function (fn) {
                // Attach the listeners
                jQuery.bindReady();

                // Add the callback
                readyList.add(fn);

                return this;
            },

            eq:function (i) {
                i = +i;
                return i === -1 ?
                    this.slice(i) :
                    this.slice(i, i + 1);
            },

            first:function () {
                return this.eq(0);
            },

            last:function () {
                return this.eq(-1);
            },

            slice:function () {
                return this.pushStack(slice.apply(this, arguments),
                    "slice", slice.call(arguments).join(","));
            },

            map:function (callback) {
                return this.pushStack(jQuery.map(this, function (elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },

            end:function () {
                return this.prevObject || this.constructor(null);
            },

            // For internal use only.
            // Behaves like an Array's method, not like a jQuery method.
            push:push,
            sort:[].sort,
            splice:[].splice
        };

// Give the init function the jQuery prototype for later instantiation
        jQuery.fn.init.prototype = jQuery.fn;

        jQuery.extend = jQuery.fn.extend = function () {
            var options, name, src, copy, copyIsArray, clone,
                target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in deep copy)
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }

            // extend jQuery itself if only one argument is passed
            if (length === i) {
                target = this;
                --i;
            }

            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[ i ]) != null) {
                    // Extend the base object
                    for (name in options) {
                        src = target[ name ];
                        copy = options[ name ];

                        // Prevent never-ending loop
                        if (target === copy) {
                            continue;
                        }

                        // Recurse if we're merging plain objects or arrays
                        if (deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) )) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];

                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }

                            // Never move original objects, clone them
                            target[ name ] = jQuery.extend(deep, clone, copy);

                            // Don't bring in undefined values
                        } else if (copy !== undefined) {
                            target[ name ] = copy;
                        }
                    }
                }
            }

            // Return the modified object
            return target;
        };

        jQuery.extend({
            noConflict:function (deep) {
                if (window.$ === jQuery) {
                    window.$ = _$;
                }

                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery;
                }

                return jQuery;
            },

            // Is the DOM ready to be used? Set to true once it occurs.
            isReady:false,

            // A counter to track how many items to wait for before
            // the ready event fires. See #6781
            readyWait:1,

            // Hold (or release) the ready event
            holdReady:function (hold) {
                if (hold) {
                    jQuery.readyWait++;
                } else {
                    jQuery.ready(true);
                }
            },

            // Handle when the DOM is ready
            ready:function (wait) {
                // Either a released hold or an DOMready/load event and not yet ready
                if ((wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady)) {
                    // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                    if (!document.body) {
                        return setTimeout(jQuery.ready, 1);
                    }

                    // Remember that the DOM is ready
                    jQuery.isReady = true;

                    // If a normal DOM Ready event fired, decrement, and wait if need be
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return;
                    }

                    // If there are functions bound, to execute
                    readyList.fireWith(document, [ jQuery ]);

                    // Trigger any bound ready events
                    if (jQuery.fn.trigger) {
                        jQuery(document).trigger("ready").off("ready");
                    }
                }
            },

            bindReady:function () {
                if (readyList) {
                    return;
                }

                readyList = jQuery.Callbacks("once memory");

                // Catch cases where $(document).ready() is called after the
                // browser event has already occurred.
                if (document.readyState === "complete") {
                    // Handle it asynchronously to allow scripts the opportunity to delay ready
                    return setTimeout(jQuery.ready, 1);
                }

                // Mozilla, Opera and webkit nightlies currently support this event
                if (document.addEventListener) {
                    // Use the handy event callback
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);

                    // A fallback to window.onload, that will always work
                    window.addEventListener("load", jQuery.ready, false);

                    // If IE event model is used
                } else if (document.attachEvent) {
                    // ensure firing before onload,
                    // maybe late but safe also for iframes
                    document.attachEvent("onreadystatechange", DOMContentLoaded);

                    // A fallback to window.onload, that will always work
                    window.attachEvent("onload", jQuery.ready);

                    // If IE and not a frame
                    // continually check to see if the document is ready
                    var toplevel = false;

                    try {
                        toplevel = window.frameElement == null;
                    } catch (e) {
                    }

                    if (document.documentElement.doScroll && toplevel) {
                        doScrollCheck();
                    }
                }
            },

            // See test/unit/core.js for details concerning isFunction.
            // Since version 1.3, DOM methods and functions like alert
            // aren't supported. They return false on IE (#2968).
            isFunction:function (obj) {
                return jQuery.type(obj) === "function";
            },

            isArray:Array.isArray || function (obj) {
                return jQuery.type(obj) === "array";
            },

            isWindow:function (obj) {
                return obj != null && obj == obj.window;
            },

            isNumeric:function (obj) {
                return !isNaN(parseFloat(obj)) && isFinite(obj);
            },

            type:function (obj) {
                return obj == null ?
                    String(obj) :
                    class2type[ toString.call(obj) ] || "object";
            },

            isPlainObject:function (obj) {
                // Must be an Object.
                // Because of IE, we also have to check the presence of the constructor property.
                // Make sure that DOM nodes and window objects don't pass through, as well
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false;
                }

                try {
                    // Not own constructor property must be Object
                    if (obj.constructor &&
                        !hasOwn.call(obj, "constructor") &&
                        !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                } catch (e) {
                    // IE8,9 Will throw exceptions on certain host objects #9897
                    return false;
                }

                // Own properties are enumerated firstly, so to speed up,
                // if last one is own, then all properties are own.

                var key;
                for (key in obj) {
                }

                return key === undefined || hasOwn.call(obj, key);
            },

            isEmptyObject:function (obj) {
                for (var name in obj) {
                    return false;
                }
                return true;
            },

            error:function (msg) {
                throw new Error(msg);
            },

            parseJSON:function (data) {
                if (typeof data !== "string" || !data) {
                    return null;
                }

                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim(data);

                // Attempt to parse using the native JSON parser first
                if (window.JSON && window.JSON.parse) {
                    return window.JSON.parse(data);
                }

                // Make sure the incoming data is actual JSON
                // Logic borrowed from http://json.org/json2.js
                if (rvalidchars.test(data.replace(rvalidescape, "@")
                    .replace(rvalidtokens, "]")
                    .replace(rvalidbraces, ""))) {

                    return ( new Function("return " + data) )();

                }
                jQuery.error("Invalid JSON: " + data);
            },

            // Cross-browser xml parsing
            parseXML:function (data) {
                if (typeof data !== "string" || !data) {
                    return null;
                }
                var xml, tmp;
                try {
                    if (window.DOMParser) { // Standard
                        tmp = new DOMParser();
                        xml = tmp.parseFromString(data, "text/xml");
                    } else { // IE
                        xml = new ActiveXObject("Microsoft.XMLDOM");
                        xml.async = "false";
                        xml.loadXML(data);
                    }
                } catch (e) {
                    xml = undefined;
                }
                if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data);
                }
                return xml;
            },

            noop:function () {
            },

            // Evaluates a script in a global context
            // Workarounds based on findings by Jim Driscoll
            // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
            globalEval:function (data) {
                if (data && rnotwhite.test(data)) {
                    // We use execScript on Internet Explorer
                    // We use an anonymous function so that context is window
                    // rather than jQuery in Firefox
                    ( window.execScript || function (data) {
                        window[ "eval" ].call(window, data);
                    } )(data);
                }
            },

            // Convert dashed to camelCase; used by the css and data modules
            // Microsoft forgot to hump their vendor prefix (#9572)
            camelCase:function (string) {
                return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
            },

            nodeName:function (elem, name) {
                return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
            },

            // args is for internal usage only
            each:function (object, callback, args) {
                var name, i = 0,
                    length = object.length,
                    isObj = length === undefined || jQuery.isFunction(object);

                if (args) {
                    if (isObj) {
                        for (name in object) {
                            if (callback.apply(object[ name ], args) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length;) {
                            if (callback.apply(object[ i++ ], args) === false) {
                                break;
                            }
                        }
                    }

                    // A special, fast, case for the most common use of each
                } else {
                    if (isObj) {
                        for (name in object) {
                            if (callback.call(object[ name ], name, object[ name ]) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length;) {
                            if (callback.call(object[ i ], i, object[ i++ ]) === false) {
                                break;
                            }
                        }
                    }
                }

                return object;
            },

            // Use native String.trim function wherever possible
            trim:trim ?
                function (text) {
                    return text == null ?
                        "" :
                        trim.call(text);
                } :

                // Otherwise use our own trimming functionality
                function (text) {
                    return text == null ?
                        "" :
                        text.toString().replace(trimLeft, "").replace(trimRight, "");
                },

            // results is for internal usage only
            makeArray:function (array, results) {
                var ret = results || [];

                if (array != null) {
                    // The window, strings (and functions) also have 'length'
                    // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
                    var type = jQuery.type(array);

                    if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
                        push.call(ret, array);
                    } else {
                        jQuery.merge(ret, array);
                    }
                }

                return ret;
            },

            inArray:function (elem, array, i) {
                var len;

                if (array) {
                    if (indexOf) {
                        return indexOf.call(array, elem, i);
                    }

                    len = array.length;
                    i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

                    for (; i < len; i++) {
                        // Skip accessing in sparse arrays
                        if (i in array && array[ i ] === elem) {
                            return i;
                        }
                    }
                }

                return -1;
            },

            merge:function (first, second) {
                var i = first.length,
                    j = 0;

                if (typeof second.length === "number") {
                    for (var l = second.length; j < l; j++) {
                        first[ i++ ] = second[ j ];
                    }

                } else {
                    while (second[j] !== undefined) {
                        first[ i++ ] = second[ j++ ];
                    }
                }

                first.length = i;

                return first;
            },

            grep:function (elems, callback, inv) {
                var ret = [], retVal;
                inv = !!inv;

                // Go through the array, only saving the items
                // that pass the validator function
                for (var i = 0, length = elems.length; i < length; i++) {
                    retVal = !!callback(elems[ i ], i);
                    if (inv !== retVal) {
                        ret.push(elems[ i ]);
                    }
                }

                return ret;
            },

            // arg is for internal usage only
            map:function (elems, callback, arg) {
                var value, key, ret = [],
                    i = 0,
                    length = elems.length,
                // jquery objects are treated as arrays
                    isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length - 1 ] ) || length === 0 || jQuery.isArray(elems) );

                // Go through the array, translating each of the items to their
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback(elems[ i ], i, arg);

                        if (value != null) {
                            ret[ ret.length ] = value;
                        }
                    }

                    // Go through every key on the object,
                } else {
                    for (key in elems) {
                        value = callback(elems[ key ], key, arg);

                        if (value != null) {
                            ret[ ret.length ] = value;
                        }
                    }
                }

                // Flatten any nested arrays
                return ret.concat.apply([], ret);
            },

            // A global GUID counter for objects
            guid:1,

            // Bind a function to a context, optionally partially applying any
            // arguments.
            proxy:function (fn, context) {
                if (typeof context === "string") {
                    var tmp = fn[ context ];
                    context = fn;
                    fn = tmp;
                }

                // Quick check to determine if target is callable, in the spec
                // this throws a TypeError, but we will just return undefined.
                if (!jQuery.isFunction(fn)) {
                    return undefined;
                }

                // Simulated bind
                var args = slice.call(arguments, 2),
                    proxy = function () {
                        return fn.apply(context, args.concat(slice.call(arguments)));
                    };

                // Set the guid of unique handler to the same of original handler, so it can be removed
                proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

                return proxy;
            },

            // Mutifunctional method to get and set values to a collection
            // The value/s can optionally be executed if it's a function
            access:function (elems, fn, key, value, chainable, emptyGet, pass) {
                var exec,
                    bulk = key == null,
                    i = 0,
                    length = elems.length;

                // Sets many values
                if (key && typeof key === "object") {
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], 1, emptyGet, value);
                    }
                    chainable = 1;

                    // Sets one value
                } else if (value !== undefined) {
                    // Optionally, function values get executed if exec is true
                    exec = pass === undefined && jQuery.isFunction(value);

                    if (bulk) {
                        // Bulk operations only iterate when executing function values
                        if (exec) {
                            exec = fn;
                            fn = function (elem, key, value) {
                                return exec.call(jQuery(elem), value);
                            };

                            // Otherwise they run against the entire set
                        } else {
                            fn.call(elems, value);
                            fn = null;
                        }
                    }

                    if (fn) {
                        for (; i < length; i++) {
                            fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
                        }
                    }

                    chainable = 1;
                }

                return chainable ?
                    elems :

                    // Gets
                    bulk ?
                        fn.call(elems) :
                        length ? fn(elems[0], key) : emptyGet;
            },

            now:function () {
                return ( new Date() ).getTime();
            },

            // Use of jQuery.browser is frowned upon.
            // More details: http://docs.jquery.com/Utilities/jQuery.browser
            uaMatch:function (ua) {
                ua = ua.toLowerCase();

                var match = rwebkit.exec(ua) ||
                    ropera.exec(ua) ||
                    rmsie.exec(ua) ||
                    ua.indexOf("compatible") < 0 && rmozilla.exec(ua) ||
                    [];

                return { browser:match[1] || "", version:match[2] || "0" };
            },

            sub:function () {
                function jQuerySub(selector, context) {
                    return new jQuerySub.fn.init(selector, context);
                }

                jQuery.extend(true, jQuerySub, this);
                jQuerySub.superclass = this;
                jQuerySub.fn = jQuerySub.prototype = this();
                jQuerySub.fn.constructor = jQuerySub;
                jQuerySub.sub = this.sub;
                jQuerySub.fn.init = function init(selector, context) {
                    if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
                        context = jQuerySub(context);
                    }

                    return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
                };
                jQuerySub.fn.init.prototype = jQuerySub.fn;
                var rootjQuerySub = jQuerySub(document);
                return jQuerySub;
            },

            browser:{}
        });

// Populate the class2type map
        jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
            class2type[ "[object " + name + "]" ] = name.toLowerCase();
        });

        browserMatch = jQuery.uaMatch(userAgent);
        if (browserMatch.browser) {
            jQuery.browser[ browserMatch.browser ] = true;
            jQuery.browser.version = browserMatch.version;
        }

// Deprecated, use jQuery.browser.webkit instead
        if (jQuery.browser.webkit) {
            jQuery.browser.safari = true;
        }

// IE doesn't match non-breaking spaces with \s
        if (rnotwhite.test("\xA0")) {
            trimLeft = /^[\s\xA0]+/;
            trimRight = /[\s\xA0]+$/;
        }

// All jQuery objects should point back to these
        rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
        if (document.addEventListener) {
            DOMContentLoaded = function () {
                document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                jQuery.ready();
            };

        } else if (document.attachEvent) {
            DOMContentLoaded = function () {
                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                if (document.readyState === "complete") {
                    document.detachEvent("onreadystatechange", DOMContentLoaded);
                    jQuery.ready();
                }
            };
        }

// The DOM ready check for Internet Explorer
        function doScrollCheck() {
            if (jQuery.isReady) {
                return;
            }

            try {
                // If IE is used, use the trick by Diego Perini
                // http://javascript.nwbox.com/IEContentLoaded/
                document.documentElement.doScroll("left");
            } catch (e) {
                setTimeout(doScrollCheck, 1);
                return;
            }

            // and execute any waiting functions
            jQuery.ready();
        }

        return jQuery;

    })();


// String to Object flags format cache
    var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
    function createFlags(flags) {
        var object = flagsCache[ flags ] = {},
            i, length;
        flags = flags.split(/\s+/);
        for (i = 0, length = flags.length; i < length; i++) {
            object[ flags[i] ] = true;
        }
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	flags:	an optional list of space-separated flags that will change how
     *			the callback list behaves
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible flags:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function (flags) {

        // Convert flags from String-formatted to Object-formatted
        // (we check in cache first)
        flags = flags ? ( flagsCache[ flags ] || createFlags(flags) ) : {};

        var // Actual callback list
            list = [],
        // Stack of fire calls for repeatable lists
            stack = [],
        // Last fire value (for non-forgettable lists)
            memory,
        // Flag to know if list was already fired
            fired,
        // Flag to know if list is currently firing
            firing,
        // First callback to fire (used internally by add and fireWith)
            firingStart,
        // End of the loop when firing
            firingLength,
        // Index of currently firing callback (modified by remove if needed)
            firingIndex,
        // Add one or several callbacks to the list
            add = function (args) {
                var i,
                    length,
                    elem,
                    type,
                    actual;
                for (i = 0, length = args.length; i < length; i++) {
                    elem = args[ i ];
                    type = jQuery.type(elem);
                    if (type === "array") {
                        // Inspect recursively
                        add(elem);
                    } else if (type === "function") {
                        // Add if not in unique mode and callback is not in
                        if (!flags.unique || !self.has(elem)) {
                            list.push(elem);
                        }
                    }
                }
            },
        // Fire callbacks
            fire = function (context, args) {
                args = args || [];
                memory = !flags.memory || [ context, args ];
                fired = true;
                firing = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[ firingIndex ].apply(context, args) === false && flags.stopOnFalse) {
                        memory = true; // Mark as halted
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (!flags.once) {
                        if (stack && stack.length) {
                            memory = stack.shift();
                            self.fireWith(memory[ 0 ], memory[ 1 ]);
                        }
                    } else if (memory === true) {
                        self.disable();
                    } else {
                        list = [];
                    }
                }
            },
        // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add:function () {
                    if (list) {
                        var length = list.length;
                        add(arguments);
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if (firing) {
                            firingLength = list.length;
                            // With memory, if we're not firing then
                            // we should call right away, unless previous
                            // firing was halted (stopOnFalse)
                        } else if (memory && memory !== true) {
                            firingStart = length;
                            fire(memory[ 0 ], memory[ 1 ]);
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove:function () {
                    if (list) {
                        var args = arguments,
                            argIndex = 0,
                            argLength = args.length;
                        for (; argIndex < argLength; argIndex++) {
                            for (var i = 0; i < list.length; i++) {
                                if (args[ argIndex ] === list[ i ]) {
                                    // Handle firingIndex and firingLength
                                    if (firing) {
                                        if (i <= firingLength) {
                                            firingLength--;
                                            if (i <= firingIndex) {
                                                firingIndex--;
                                            }
                                        }
                                    }
                                    // Remove the element
                                    list.splice(i--, 1);
                                    // If we have some unicity property then
                                    // we only need to do this once
                                    if (flags.unique) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return this;
                },
                // Control if a given callback is in the list
                has:function (fn) {
                    if (list) {
                        var i = 0,
                            length = list.length;
                        for (; i < length; i++) {
                            if (fn === list[ i ]) {
                                return true;
                            }
                        }
                    }
                    return false;
                },
                // Remove all callbacks from the list
                empty:function () {
                    list = [];
                    return this;
                },
                // Have the list do nothing anymore
                disable:function () {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled:function () {
                    return !list;
                },
                // Lock the list in its current state
                lock:function () {
                    stack = undefined;
                    if (!memory || memory === true) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked:function () {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith:function (context, args) {
                    if (stack) {
                        if (firing) {
                            if (!flags.once) {
                                stack.push([ context, args ]);
                            }
                        } else if (!( flags.once && memory )) {
                            fire(context, args);
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire:function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired:function () {
                    return !!fired;
                }
            };

        return self;
    };


    var // Static reference to slice
        sliceDeferred = [].slice;

    jQuery.extend({

        Deferred:function (func) {
            var doneList = jQuery.Callbacks("once memory"),
                failList = jQuery.Callbacks("once memory"),
                progressList = jQuery.Callbacks("memory"),
                state = "pending",
                lists = {
                    resolve:doneList,
                    reject:failList,
                    notify:progressList
                },
                promise = {
                    done:doneList.add,
                    fail:failList.add,
                    progress:progressList.add,

                    state:function () {
                        return state;
                    },

                    // Deprecated
                    isResolved:doneList.fired,
                    isRejected:failList.fired,

                    then:function (doneCallbacks, failCallbacks, progressCallbacks) {
                        deferred.done(doneCallbacks).fail(failCallbacks).progress(progressCallbacks);
                        return this;
                    },
                    always:function () {
                        deferred.done.apply(deferred, arguments).fail.apply(deferred, arguments);
                        return this;
                    },
                    pipe:function (fnDone, fnFail, fnProgress) {
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each({
                                done:[ fnDone, "resolve" ],
                                fail:[ fnFail, "reject" ],
                                progress:[ fnProgress, "notify" ]
                            }, function (handler, data) {
                                var fn = data[ 0 ],
                                    action = data[ 1 ],
                                    returned;
                                if (jQuery.isFunction(fn)) {
                                    deferred[ handler ](function () {
                                        returned = fn.apply(this, arguments);
                                        if (returned && jQuery.isFunction(returned.promise)) {
                                            returned.promise().then(newDefer.resolve, newDefer.reject, newDefer.notify);
                                        } else {
                                            newDefer[ action + "With" ](this === deferred ? newDefer : this, [ returned ]);
                                        }
                                    });
                                } else {
                                    deferred[ handler ](newDefer[ action ]);
                                }
                            });
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise:function (obj) {
                        if (obj == null) {
                            obj = promise;
                        } else {
                            for (var key in promise) {
                                obj[ key ] = promise[ key ];
                            }
                        }
                        return obj;
                    }
                },
                deferred = promise.promise({}),
                key;

            for (key in lists) {
                deferred[ key ] = lists[ key ].fire;
                deferred[ key + "With" ] = lists[ key ].fireWith;
            }

            // Handle state
            deferred.done(function () {
                state = "resolved";
            }, failList.disable, progressList.lock).fail(function () {
                    state = "rejected";
                }, doneList.disable, progressList.lock);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when:function (firstParam) {
            var args = sliceDeferred.call(arguments, 0),
                i = 0,
                length = args.length,
                pValues = new Array(length),
                count = length,
                pCount = length,
                deferred = length <= 1 && firstParam && jQuery.isFunction(firstParam.promise) ?
                    firstParam :
                    jQuery.Deferred(),
                promise = deferred.promise();

            function resolveFunc(i) {
                return function (value) {
                    args[ i ] = arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value;
                    if (!( --count )) {
                        deferred.resolveWith(deferred, args);
                    }
                };
            }

            function progressFunc(i) {
                return function (value) {
                    pValues[ i ] = arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value;
                    deferred.notifyWith(promise, pValues);
                };
            }

            if (length > 1) {
                for (; i < length; i++) {
                    if (args[ i ] && args[ i ].promise && jQuery.isFunction(args[ i ].promise)) {
                        args[ i ].promise().then(resolveFunc(i), deferred.reject, progressFunc(i));
                    } else {
                        --count;
                    }
                }
                if (!count) {
                    deferred.resolveWith(deferred, args);
                }
            } else if (deferred !== firstParam) {
                deferred.resolveWith(deferred, length ? [ firstParam ] : []);
            }
            return promise;
        }
    });


    jQuery.support = (function () {

        var support,
            all,
            a,
            select,
            opt,
            input,
            fragment,
            tds,
            events,
            eventName,
            i,
            isSupported,
            div = document.createElement("div"),
            documentElement = document.documentElement;

        // Preliminary tests
        div.setAttribute("className", "t");
        div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

        all = div.getElementsByTagName("*");
        a = div.getElementsByTagName("a")[ 0 ];

        // Can't get basic test support
        if (!all || !all.length || !a) {
            return {};
        }

        // First batch of supports tests
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[ 0 ];

        support = {
            // IE strips leading whitespace when .innerHTML is used
            leadingWhitespace:( div.firstChild.nodeType === 3 ),

            // Make sure that tbody elements aren't automatically inserted
            // IE will insert them into empty tables
            tbody:!div.getElementsByTagName("tbody").length,

            // Make sure that link elements get serialized correctly by innerHTML
            // This requires a wrapper element in IE
            htmlSerialize:!!div.getElementsByTagName("link").length,

            // Get the style information from getAttribute
            // (IE uses .cssText instead)
            style:/top/.test(a.getAttribute("style")),

            // Make sure that URLs aren't manipulated
            // (IE normalizes it by default)
            hrefNormalized:( a.getAttribute("href") === "/a" ),

            // Make sure that element opacity exists
            // (IE uses filter instead)
            // Use a regex to work around a WebKit issue. See #5145
            opacity:/^0.55/.test(a.style.opacity),

            // Verify style float existence
            // (IE uses styleFloat instead of cssFloat)
            cssFloat:!!a.style.cssFloat,

            // Make sure that if no value is specified for a checkbox
            // that it defaults to "on".
            // (WebKit defaults to "" instead)
            checkOn:( input.value === "on" ),

            // Make sure that a selected-by-default option has a working selected property.
            // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
            optSelected:opt.selected,

            // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
            getSetAttribute:div.className !== "t",

            // Tests for enctype support on a form(#6743)
            enctype:!!document.createElement("form").enctype,

            // Makes sure cloning an html5 element does not cause problems
            // Where outerHTML is undefined, this still works
            html5Clone:document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",

            // Will be defined later
            submitBubbles:true,
            changeBubbles:true,
            focusinBubbles:false,
            deleteExpando:true,
            noCloneEvent:true,
            inlineBlockNeedsLayout:false,
            shrinkWrapBlocks:false,
            reliableMarginRight:true,
            pixelMargin:true
        };

        // jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
        jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");

        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;

        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Test to see if it's possible to delete an expando from an element
        // Fails in Internet Explorer
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }

        if (!div.addEventListener && div.attachEvent && div.fireEvent) {
            div.attachEvent("onclick", function () {
                // Cloning a node shouldn't copy over any
                // bound event handlers (IE does this)
                support.noCloneEvent = false;
            });
            div.cloneNode(true).fireEvent("onclick");
        }

        // Check if a radio maintains its value
        // after being appended to the DOM
        input = document.createElement("input");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";

        input.setAttribute("checked", "checked");

        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute("name", "t");

        div.appendChild(input);
        fragment = document.createDocumentFragment();
        fragment.appendChild(div.lastChild);

        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;

        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;

        fragment.removeChild(input);
        fragment.appendChild(div);

        // Technique from Juriy Zaytsev
        // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
        // We only care about the case where non-standard event systems
        // are used, namely in IE. Short-circuiting here helps us to
        // avoid an eval call (in setAttribute) which can cause CSP
        // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
        if (div.attachEvent) {
            for (i in {
                submit:1,
                change:1,
                focusin:1
            }) {
                eventName = "on" + i;
                isSupported = ( eventName in div );
                if (!isSupported) {
                    div.setAttribute(eventName, "return;");
                    isSupported = ( typeof div[ eventName ] === "function" );
                }
                support[ i + "Bubbles" ] = isSupported;
            }
        }

        fragment.removeChild(div);

        // Null elements to avoid leaks in IE
        fragment = select = opt = div = input = null;

        // Run tests that need a body at doc ready
        jQuery(function () {
            var container, outer, inner, table, td, offsetSupport,
                marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
                paddingMarginBorderVisibility, paddingMarginBorder,
                body = document.getElementsByTagName("body")[0];

            if (!body) {
                // Return for frameset docs that don't have a body
                return;
            }

            conMarginTop = 1;
            paddingMarginBorder = "padding:0;margin:0;border:";
            positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
            paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
            style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
            html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
                "<table " + style + "' cellpadding='0' cellspacing='0'>" +
                "<tr><td></td></tr></table>";

            container = document.createElement("div");
            container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
            body.insertBefore(container, body.firstChild);

            // Construct the test element
            div = document.createElement("div");
            container.appendChild(div);

            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            // (only IE 8 fails this test)
            div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            isSupported = ( tds[ 0 ].offsetHeight === 0 );

            tds[ 0 ].style.display = "";
            tds[ 1 ].style.display = "none";

            // Check if empty table cells still have offsetWidth/Height
            // (IE <= 8 fail this test)
            support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

            // Check if div with explicit width and no margin-right incorrectly
            // gets computed margin-right based on width of container. For more
            // info see bug #3333
            // Fails in WebKit before Feb 2011 nightlies
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            if (window.getComputedStyle) {
                div.innerHTML = "";
                marginDiv = document.createElement("div");
                marginDiv.style.width = "0";
                marginDiv.style.marginRight = "0";
                div.style.width = "2px";
                div.appendChild(marginDiv);
                support.reliableMarginRight =
                    ( parseInt(( window.getComputedStyle(marginDiv, null) || { marginRight:0 } ).marginRight, 10) || 0 ) === 0;
            }

            if (typeof div.style.zoom !== "undefined") {
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                // (IE < 8 does this)
                div.innerHTML = "";
                div.style.width = div.style.padding = "1px";
                div.style.border = 0;
                div.style.overflow = "hidden";
                div.style.display = "inline";
                div.style.zoom = 1;
                support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

                // Check if elements with layout shrink-wrap their children
                // (IE 6 does this)
                div.style.display = "block";
                div.style.overflow = "visible";
                div.innerHTML = "<div style='width:5px;'></div>";
                support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
            }

            div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
            div.innerHTML = html;

            outer = div.firstChild;
            inner = outer.firstChild;
            td = outer.nextSibling.firstChild.firstChild;

            offsetSupport = {
                doesNotAddBorder:( inner.offsetTop !== 5 ),
                doesAddBorderForTableAndCells:( td.offsetTop === 5 )
            };

            inner.style.position = "fixed";
            inner.style.top = "20px";

            // safari subtracts parent border width here which is 5px
            offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
            inner.style.position = inner.style.top = "";

            outer.style.overflow = "hidden";
            outer.style.position = "relative";

            offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
            offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

            if (window.getComputedStyle) {
                div.style.marginTop = "1%";
                support.pixelMargin = ( window.getComputedStyle(div, null) || { marginTop:0 } ).marginTop !== "1%";
            }

            if (typeof container.style.zoom !== "undefined") {
                container.style.zoom = 1;
            }

            body.removeChild(container);
            marginDiv = div = container = null;

            jQuery.extend(support, offsetSupport);
        });

        return support;
    })();


    var rbrace = /^(?:\{.*\}|\[.*\])$/,
        rmultiDash = /([A-Z])/g;

    jQuery.extend({
        cache:{},

        // Please use with caution
        uuid:0,

        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando:"jQuery" + ( jQuery.fn.jquery + Math.random() ).replace(/\D/g, ""),

        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData:{
            "embed":true,
            // Ban all objects except for Flash (which handle expandos)
            "object":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            "applet":true
        },

        hasData:function (elem) {
            elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
            return !!elem && !isEmptyDataObject(elem);
        },

        data:function (elem, name, data, pvt /* Internal Use Only */) {
            if (!jQuery.acceptData(elem)) {
                return;
            }

            var privateCache, thisCache, ret,
                internalKey = jQuery.expando,
                getByName = typeof name === "string",

            // We have to handle DOM nodes and JS objects differently because IE6-7
            // can't GC object references properly across the DOM-JS boundary
                isNode = elem.nodeType,

            // Only DOM nodes need the global jQuery cache; JS object data is
            // attached directly to the object so GC can occur automatically
                cache = isNode ? jQuery.cache : elem,

            // Only defining an ID for JS objects if its cache already exists allows
            // the code to shortcut on the same path as a DOM node with no cache
                id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
                isEvents = name === "events";

            // Avoid doing any more work than we need to when trying to get data on an
            // object that has no data at all
            if ((!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined) {
                return;
            }

            if (!id) {
                // Only DOM nodes need a new unique ID for each element since their data
                // ends up in the global cache
                if (isNode) {
                    elem[ internalKey ] = id = ++jQuery.uuid;
                } else {
                    id = internalKey;
                }
            }

            if (!cache[ id ]) {
                cache[ id ] = {};

                // Avoids exposing jQuery metadata on plain JS objects when the object
                // is serialized using JSON.stringify
                if (!isNode) {
                    cache[ id ].toJSON = jQuery.noop;
                }
            }

            // An object can be passed to jQuery.data instead of a key/value pair; this gets
            // shallow copied over onto the existing cache
            if (typeof name === "object" || typeof name === "function") {
                if (pvt) {
                    cache[ id ] = jQuery.extend(cache[ id ], name);
                } else {
                    cache[ id ].data = jQuery.extend(cache[ id ].data, name);
                }
            }

            privateCache = thisCache = cache[ id ];

            // jQuery data() is stored in a separate object inside the object's internal data
            // cache in order to avoid key collisions between internal data and user-defined
            // data.
            if (!pvt) {
                if (!thisCache.data) {
                    thisCache.data = {};
                }

                thisCache = thisCache.data;
            }

            if (data !== undefined) {
                thisCache[ jQuery.camelCase(name) ] = data;
            }

            // Users should not attempt to inspect the internal events object using jQuery.data,
            // it is undocumented and subject to change. But does anyone listen? No.
            if (isEvents && !thisCache[ name ]) {
                return privateCache.events;
            }

            // Check for both converted-to-camel and non-converted data property names
            // If a data property was specified
            if (getByName) {

                // First Try to find as-is property data
                ret = thisCache[ name ];

                // Test for null|undefined property data
                if (ret == null) {

                    // Try to find the camelCased property
                    ret = thisCache[ jQuery.camelCase(name) ];
                }
            } else {
                ret = thisCache;
            }

            return ret;
        },

        removeData:function (elem, name, pvt /* Internal Use Only */) {
            if (!jQuery.acceptData(elem)) {
                return;
            }

            var thisCache, i, l,

            // Reference to internal data cache key
                internalKey = jQuery.expando,

                isNode = elem.nodeType,

            // See jQuery.data for more information
                cache = isNode ? jQuery.cache : elem,

            // See jQuery.data for more information
                id = isNode ? elem[ internalKey ] : internalKey;

            // If there is already no cache entry for this object, there is no
            // purpose in continuing
            if (!cache[ id ]) {
                return;
            }

            if (name) {

                thisCache = pvt ? cache[ id ] : cache[ id ].data;

                if (thisCache) {

                    // Support array or space separated string names for data keys
                    if (!jQuery.isArray(name)) {

                        // try the string as a key before any manipulation
                        if (name in thisCache) {
                            name = [ name ];
                        } else {

                            // split the camel cased version by spaces unless a key with the spaces exists
                            name = jQuery.camelCase(name);
                            if (name in thisCache) {
                                name = [ name ];
                            } else {
                                name = name.split(" ");
                            }
                        }
                    }

                    for (i = 0, l = name.length; i < l; i++) {
                        delete thisCache[ name[i] ];
                    }

                    // If there is no data left in the cache, we want to continue
                    // and let the cache object itself get destroyed
                    if (!( pvt ? isEmptyDataObject : jQuery.isEmptyObject )(thisCache)) {
                        return;
                    }
                }
            }

            // See jQuery.data for more information
            if (!pvt) {
                delete cache[ id ].data;

                // Don't destroy the parent cache unless the internal data object
                // had been the only thing left in it
                if (!isEmptyDataObject(cache[ id ])) {
                    return;
                }
            }

            // Browsers that fail expando deletion also refuse to delete expandos on
            // the window, but it will allow it on all other JS objects; other browsers
            // don't care
            // Ensure that `cache` is not a window object #10080
            if (jQuery.support.deleteExpando || !cache.setInterval) {
                delete cache[ id ];
            } else {
                cache[ id ] = null;
            }

            // We destroyed the cache and need to eliminate the expando on the node to avoid
            // false lookups in the cache for entries that no longer exist
            if (isNode) {
                // IE does not allow us to delete expando properties from nodes,
                // nor does it have a removeAttribute function on Document nodes;
                // we must handle all of these cases
                if (jQuery.support.deleteExpando) {
                    delete elem[ internalKey ];
                } else if (elem.removeAttribute) {
                    elem.removeAttribute(internalKey);
                } else {
                    elem[ internalKey ] = null;
                }
            }
        },

        // For internal use only.
        _data:function (elem, name, data) {
            return jQuery.data(elem, name, data, true);
        },

        // A method for determining if a DOM node can handle the data expando
        acceptData:function (elem) {
            if (elem.nodeName) {
                var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

                if (match) {
                    return !(match === true || elem.getAttribute("classid") !== match);
                }
            }

            return true;
        }
    });

    jQuery.fn.extend({
        data:function (key, value) {
            var parts, part, attr, name, l,
                elem = this[0],
                i = 0,
                data = null;

            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);

                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        attr = elem.attributes;
                        for (l = attr.length; i < l; i++) {
                            name = attr[i].name;

                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.substring(5));

                                dataAttr(elem, name, data[ name ]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }

                return data;
            }

            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function () {
                    jQuery.data(this, key);
                });
            }

            parts = key.split(".", 2);
            parts[1] = parts[1] ? "." + parts[1] : "";
            part = parts[1] + "!";

            return jQuery.access(this, function (value) {

                if (value === undefined) {
                    data = this.triggerHandler("getData" + part, [ parts[0] ]);

                    // Try to fetch any internally stored data first
                    if (data === undefined && elem) {
                        data = jQuery.data(elem, key);
                        data = dataAttr(elem, key, data);
                    }

                    return data === undefined && parts[1] ?
                        this.data(parts[0]) :
                        data;
                }

                parts[1] = value;
                this.each(function () {
                    var self = jQuery(this);

                    self.triggerHandler("setData" + part, parts);
                    jQuery.data(this, key, value);
                    self.triggerHandler("changeData" + part, parts);
                });
            }, null, value, arguments.length > 1, null, false);
        },

        removeData:function (key) {
            return this.each(function () {
                jQuery.removeData(this, key);
            });
        }
    });

    function dataAttr(elem, key, data) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {

            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                            data === "null" ? null :
                                jQuery.isNumeric(data) ? +data :
                                    rbrace.test(data) ? jQuery.parseJSON(data) :
                                        data;
                } catch (e) {
                }

                // Make sure we set the data so it isn't changed later
                jQuery.data(elem, key, data);

            } else {
                data = undefined;
            }
        }

        return data;
    }

// checks a cache object for emptiness
    function isEmptyDataObject(obj) {
        for (var name in obj) {

            // if the public data object is empty, the private is still empty
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }

        return true;
    }


    function handleQueueMarkDefer(elem, type, src) {
        var deferDataKey = type + "defer",
            queueDataKey = type + "queue",
            markDataKey = type + "mark",
            defer = jQuery._data(elem, deferDataKey);
        if (defer &&
            ( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
            ( src === "mark" || !jQuery._data(elem, markDataKey) )) {
            // Give room for hard-coded callbacks to fire first
            // and eventually mark/queue something else on the element
            setTimeout(function () {
                if (!jQuery._data(elem, queueDataKey) &&
                    !jQuery._data(elem, markDataKey)) {
                    jQuery.removeData(elem, deferDataKey, true);
                    defer.fire();
                }
            }, 0);
        }
    }

    jQuery.extend({

        _mark:function (elem, type) {
            if (elem) {
                type = ( type || "fx" ) + "mark";
                jQuery._data(elem, type, (jQuery._data(elem, type) || 0) + 1);
            }
        },

        _unmark:function (force, elem, type) {
            if (force !== true) {
                type = elem;
                elem = force;
                force = false;
            }
            if (elem) {
                type = type || "fx";
                var key = type + "mark",
                    count = force ? 0 : ( (jQuery._data(elem, key) || 1) - 1 );
                if (count) {
                    jQuery._data(elem, key, count);
                } else {
                    jQuery.removeData(elem, key, true);
                    handleQueueMarkDefer(elem, type, "mark");
                }
            }
        },

        queue:function (elem, type, data) {
            var q;
            if (elem) {
                type = ( type || "fx" ) + "queue";
                q = jQuery._data(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!q || jQuery.isArray(data)) {
                        q = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        q.push(data);
                    }
                }
                return q || [];
            }
        },

        dequeue:function (elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                fn = queue.shift(),
                hooks = {};

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
            }

            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                jQuery._data(elem, type + ".run", hooks);
                fn.call(elem, function () {
                    jQuery.dequeue(elem, type);
                }, hooks);
            }

            if (!queue.length) {
                jQuery.removeData(elem, type + "queue " + type + ".run", true);
                handleQueueMarkDefer(elem, type, "queue");
            }
        }
    });

    jQuery.fn.extend({
        queue:function (type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ?
                this :
                this.each(function () {
                    var queue = jQuery.queue(this, type, data);

                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue:function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay:function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
            type = type || "fx";

            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue:function (type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise:function (type, object) {
            if (typeof type !== "string") {
                object = type;
                type = undefined;
            }
            type = type || "fx";
            var defer = jQuery.Deferred(),
                elements = this,
                i = elements.length,
                count = 1,
                deferDataKey = type + "defer",
                queueDataKey = type + "queue",
                markDataKey = type + "mark",
                tmp;

            function resolve() {
                if (!( --count )) {
                    defer.resolveWith(elements, [ elements ]);
                }
            }

            while (i--) {
                if (( tmp = jQuery.data(elements[ i ], deferDataKey, undefined, true) ||
                    ( jQuery.data(elements[ i ], queueDataKey, undefined, true) ||
                        jQuery.data(elements[ i ], markDataKey, undefined, true) ) &&
                        jQuery.data(elements[ i ], deferDataKey, jQuery.Callbacks("once memory"), true) )) {
                    count++;
                    tmp.add(resolve);
                }
            }
            resolve();
            return defer.promise(object);
        }
    });


    var rclass = /[\n\t\r]/g,
        rspace = /\s+/,
        rreturn = /\r/g,
        rtype = /^(?:button|input)$/i,
        rfocusable = /^(?:button|input|object|select|textarea)$/i,
        rclickable = /^a(?:rea)?$/i,
        rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute,
        nodeHook, boolHook, fixSpecified;

    jQuery.fn.extend({
        attr:function (name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr:function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        },

        prop:function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp:function (name) {
            name = jQuery.propFix[ name ] || name;
            return this.each(function () {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[ name ] = undefined;
                    delete this[ name ];
                } catch (e) {
                }
            });
        },

        addClass:function (value) {
            var classNames, i, l, elem,
                setClass, c, cl;

            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }

            if (value && typeof value === "string") {
                classNames = value.split(rspace);

                for (i = 0, l = this.length; i < l; i++) {
                    elem = this[ i ];

                    if (elem.nodeType === 1) {
                        if (!elem.className && classNames.length === 1) {
                            elem.className = value;

                        } else {
                            setClass = " " + elem.className + " ";

                            for (c = 0, cl = classNames.length; c < cl; c++) {
                                if (!~setClass.indexOf(" " + classNames[ c ] + " ")) {
                                    setClass += classNames[ c ] + " ";
                                }
                            }
                            elem.className = jQuery.trim(setClass);
                        }
                    }
                }
            }

            return this;
        },

        removeClass:function (value) {
            var classNames, i, l, elem, className, c, cl;

            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }

            if ((value && typeof value === "string") || value === undefined) {
                classNames = ( value || "" ).split(rspace);

                for (i = 0, l = this.length; i < l; i++) {
                    elem = this[ i ];

                    if (elem.nodeType === 1 && elem.className) {
                        if (value) {
                            className = (" " + elem.className + " ").replace(rclass, " ");
                            for (c = 0, cl = classNames.length; c < cl; c++) {
                                className = className.replace(" " + classNames[ c ] + " ", " ");
                            }
                            elem.className = jQuery.trim(className);

                        } else {
                            elem.className = "";
                        }
                    }
                }
            }

            return this;
        },

        toggleClass:function (value, stateVal) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";

            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }

            return this.each(function () {
                if (type === "string") {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery(this),
                        state = stateVal,
                        classNames = value.split(rspace);

                    while ((className = classNames[ i++ ])) {
                        // check each className given, space seperated list
                        state = isBool ? state : !self.hasClass(className);
                        self[ state ? "addClass" : "removeClass" ](className);
                    }

                } else if (type === "undefined" || type === "boolean") {
                    if (this.className) {
                        // store className if set
                        jQuery._data(this, "__className__", this.className);
                    }

                    // toggle whole className
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },

        hasClass:function (selector) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                    return true;
                }
            }

            return false;
        },

        val:function (value) {
            var hooks, ret, isFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction(value);

            return this.each(function (i) {
                var self = jQuery(this), val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (isFunction) {
                    val = value.call(this, i, self.val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks:{
            option:{
                get:function (elem) {
                    // attributes.value is undefined in Blackberry 4.7 but
                    // uses .value. See #6932
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select:{
                get:function (elem) {
                    var value, i, max, option,
                        index = elem.selectedIndex,
                        values = [],
                        options = elem.options,
                        one = elem.type === "select-one";

                    // Nothing was selected
                    if (index < 0) {
                        return null;
                    }

                    // Loop through all the selected options
                    i = one ? index : 0;
                    max = one ? index + 1 : options.length;
                    for (; i < max; i++) {
                        option = options[ i ];

                        // Don't return options that are disabled or in a disabled optgroup
                        if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
                            (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    // Fixes Bug #2551 -- select.val() broken in IE after form.reset()
                    if (one && !values.length && options.length) {
                        return jQuery(options[ index ]).val();
                    }

                    return values;
                },

                set:function (elem, value) {
                    var values = jQuery.makeArray(value);

                    jQuery(elem).find("option").each(function () {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });

                    if (!values.length) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },

        attrFn:{
            val:true,
            css:true,
            html:true,
            text:true,
            data:true,
            width:true,
            height:true,
            offset:true
        },

        attr:function (elem, name, value, pass) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            // don't get/set attributes on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            if (pass && name in jQuery.attrFn) {
                return jQuery(elem)[ name ](value);
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (notxml) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[ name ] || ( rboolean.test(name) ? boolHook : nodeHook );
            }

            if (value !== undefined) {

                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;

                } else if (hooks && "set" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;

                } else {
                    elem.setAttribute(name, "" + value);
                    return value;
                }

            } else if (hooks && "get" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
                return ret;

            } else {

                ret = elem.getAttribute(name);

                // Non-existent attributes return null, we normalize to undefined
                return ret === null ?
                    undefined :
                    ret;
            }
        },

        removeAttr:function (elem, value) {
            var propName, attrNames, name, l, isBool,
                i = 0;

            if (value && elem.nodeType === 1) {
                attrNames = value.toLowerCase().split(rspace);
                l = attrNames.length;

                for (; i < l; i++) {
                    name = attrNames[ i ];

                    if (name) {
                        propName = jQuery.propFix[ name ] || name;
                        isBool = rboolean.test(name);

                        // See #9699 for explanation of this approach (setting first, then removal)
                        // Do not do this for boolean attributes (see #10870)
                        if (!isBool) {
                            jQuery.attr(elem, name, "");
                        }
                        elem.removeAttribute(getSetAttribute ? name : propName);

                        // Set corresponding property to false for boolean attributes
                        if (isBool && propName in elem) {
                            elem[ propName ] = false;
                        }
                    }
                }
            }
        },

        attrHooks:{
            type:{
                set:function (elem, value) {
                    // We can't allow the type property to be changed (since it causes problems in IE)
                    if (rtype.test(elem.nodeName) && elem.parentNode) {
                        jQuery.error("type property can't be changed");
                    } else if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to it's default in case type is set after value
                        // This is for element creation
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            },
            // Use the value property for back compat
            // Use the nodeHook for button elements in IE6/7 (#1954)
            value:{
                get:function (elem, name) {
                    if (nodeHook && jQuery.nodeName(elem, "button")) {
                        return nodeHook.get(elem, name);
                    }
                    return name in elem ?
                        elem.value :
                        null;
                },
                set:function (elem, value, name) {
                    if (nodeHook && jQuery.nodeName(elem, "button")) {
                        return nodeHook.set(elem, value, name);
                    }
                    // Does not return so that setAttribute is also used
                    elem.value = value;
                }
            }
        },

        propFix:{
            tabindex:"tabIndex",
            readonly:"readOnly",
            "for":"htmlFor",
            "class":"className",
            maxlength:"maxLength",
            cellspacing:"cellSpacing",
            cellpadding:"cellPadding",
            rowspan:"rowSpan",
            colspan:"colSpan",
            usemap:"useMap",
            frameborder:"frameBorder",
            contenteditable:"contentEditable"
        },

        prop:function (elem, name, value) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            // don't get/set properties on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            if (notxml) {
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;

                } else {
                    return ( elem[ name ] = value );
                }

            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;

                } else {
                    return elem[ name ];
                }
            }
        },

        propHooks:{
            tabIndex:{
                get:function (elem) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    var attributeNode = elem.getAttributeNode("tabindex");

                    return attributeNode && attributeNode.specified ?
                        parseInt(attributeNode.value, 10) :
                        rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
                            0 :
                            undefined;
                }
            }
        }
    });

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
    jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
    boolHook = {
        get:function (elem, name) {
            // Align boolean attributes with corresponding properties
            // Fall back to attribute presence where some booleans are not supported
            var attrNode,
                property = jQuery.prop(elem, name);
            return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
                name.toLowerCase() :
                undefined;
        },
        set:function (elem, value, name) {
            var propName;
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else {
                // value is true since we know at this point it's type boolean and not false
                // Set boolean attributes to the same name and set the DOM property
                propName = jQuery.propFix[ name ] || name;
                if (propName in elem) {
                    // Only set the IDL specifically if it already exists on the element
                    elem[ propName ] = true;
                }

                elem.setAttribute(name, name.toLowerCase());
            }
            return name;
        }
    };

// IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {

        fixSpecified = {
            name:true,
            id:true,
            coords:true
        };

        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = jQuery.valHooks.button = {
            get:function (elem, name) {
                var ret;
                ret = elem.getAttributeNode(name);
                return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
                    ret.nodeValue :
                    undefined;
            },
            set:function (elem, value, name) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    ret = document.createAttribute(name);
                    elem.setAttributeNode(ret);
                }
                return ( ret.nodeValue = value + "" );
            }
        };

        // Apply the nodeHook to tabindex
        jQuery.attrHooks.tabindex.set = nodeHook.set;

        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each([ "width", "height" ], function (i, name) {
            jQuery.attrHooks[ name ] = jQuery.extend(jQuery.attrHooks[ name ], {
                set:function (elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            });
        });

        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            get:nodeHook.get,
            set:function (elem, value, name) {
                if (value === "") {
                    value = "false";
                }
                nodeHook.set(elem, value, name);
            }
        };
    }


// Some attributes require a special call on IE
    if (!jQuery.support.hrefNormalized) {
        jQuery.each([ "href", "src", "width", "height" ], function (i, name) {
            jQuery.attrHooks[ name ] = jQuery.extend(jQuery.attrHooks[ name ], {
                get:function (elem) {
                    var ret = elem.getAttribute(name, 2);
                    return ret === null ? undefined : ret;
                }
            });
        });
    }

    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get:function (elem) {
                // Return undefined in the case of empty string
                // Normalize to lowercase since IE uppercases css property names
                return elem.style.cssText.toLowerCase() || undefined;
            },
            set:function (elem, value) {
                return ( elem.style.cssText = "" + value );
            }
        };
    }

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
            get:function (elem) {
                var parent = elem.parentNode;

                if (parent) {
                    parent.selectedIndex;

                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }

// IE6/7 call enctype encoding
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }

// Radios and checkboxes getter/setter
    if (!jQuery.support.checkOn) {
        jQuery.each([ "radio", "checkbox" ], function () {
            jQuery.valHooks[ this ] = {
                get:function (elem) {
                    // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }
            };
        });
    }
    jQuery.each([ "radio", "checkbox" ], function () {
        jQuery.valHooks[ this ] = jQuery.extend(jQuery.valHooks[ this ], {
            set:function (elem, value) {
                if (jQuery.isArray(value)) {
                    return ( elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0 );
                }
            }
        });
    });


    var rformElems = /^(?:textarea|input|select)$/i,
        rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
        rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
        quickParse = function (selector) {
            var quick = rquickIs.exec(selector);
            if (quick) {
                //   0  1    2   3
                // [ _, tag, id, class ]
                quick[1] = ( quick[1] || "" ).toLowerCase();
                quick[3] = quick[3] && new RegExp("(?:^|\\s)" + quick[3] + "(?:\\s|$)");
            }
            return quick;
        },
        quickIs = function (elem, m) {
            var attrs = elem.attributes || {};
            return (
                (!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
                    (!m[2] || (attrs.id || {}).value === m[2]) &&
                    (!m[3] || m[3].test((attrs[ "class" ] || {}).value))
                );
        },
        hoverHack = function (events) {
            return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
        };

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        add:function (elem, types, handler, data, selector) {

            var elemData, eventHandle, events,
                t, tns, type, namespaces, handleObj,
                handleObjIn, quick, handlers, special;

            // Don't attach events to noData or text/comment nodes (allow plain objects tho)
            if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            events = elemData.events;
            if (!events) {
                elemData.events = events = {};
            }
            eventHandle = elemData.handle;
            if (!eventHandle) {
                elemData.handle = eventHandle = function (e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }

            // Handle multiple events separated by a space
            // jQuery(...).bind("mouseover mouseout", fn);
            types = jQuery.trim(hoverHack(types)).split(" ");
            for (t = 0; t < types.length; t++) {

                tns = rtypenamespace.exec(types[t]) || [];
                type = tns[1];
                namespaces = ( tns[2] || "" ).split(".").sort();

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type:type,
                    origType:tns[1],
                    data:data,
                    handler:handler,
                    guid:handler.guid,
                    selector:selector,
                    quick:selector && quickParse(selector),
                    namespace:namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                handlers = events[ type ];
                if (!handlers) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        // Bind the global event handler to the element
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);

                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }

            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },

        global:{},

        // Detach an event or set of events from an element
        remove:function (elem, types, handler, selector, mappedTypes) {

            var elemData = jQuery.hasData(elem) && jQuery._data(elem),
                t, tns, type, origType, namespaces, origCount,
                j, events, special, handle, eventType, handleObj;

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = jQuery.trim(hoverHack(types || "")).split(" ");
            for (t = 0; t < types.length; t++) {
                tns = rtypenamespace.exec(types[t]) || [];
                type = origType = tns[1];
                namespaces = tns[2];

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[ t ], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                eventType = events[ type ] || [];
                origCount = eventType.length;
                namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

                // Remove matching events
                for (j = 0; j < eventType.length; j++) {
                    handleObj = eventType[ j ];

                    if (( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !namespaces || namespaces.test(handleObj.namespace) ) &&
                        ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector )) {
                        eventType.splice(j--, 1);

                        if (handleObj.selector) {
                            eventType.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (eventType.length === 0 && origCount !== eventType.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[ type ];
                }
            }

            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                handle = elemData.handle;
                if (handle) {
                    handle.elem = null;
                }

                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery.removeData(elem, [ "events", "handle" ], true);
            }
        },

        // Events that are safe to short-circuit if no handlers are attached.
        // Native DOM events should not be added, they may have inline handlers.
        customEvent:{
            "getData":true,
            "setData":true,
            "changeData":true
        },

        trigger:function (event, data, elem, onlyHandlers) {
            // Don't do events on text and comment nodes
            if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
                return;
            }

            // Event object or event type
            var type = event.type || event,
                namespaces = [],
                cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf("!") >= 0) {
                // Exclusive events trigger only for the exact event (no namespaces)
                type = type.slice(0, -1);
                exclusive = true;
            }

            if (type.indexOf(".") >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }

            if ((!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ]) {
                // No jQuery handlers for this event type, and it can't have inline handlers
                return;
            }

            // Caller can pass in an Event, Object, or just an event type string
            event = typeof event === "object" ?
                // jQuery.Event object
                event[ jQuery.expando ] ? event :
                    // Object literal
                    new jQuery.Event(type, event) :
                // Just the event type (string)
                new jQuery.Event(type);

            event.type = type;
            event.isTrigger = true;
            event.exclusive = exclusive;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            ontype = type.indexOf(":") < 0 ? "on" + type : "";

            // Handle a global trigger
            if (!elem) {

                // TODO: Stop taunting the data cache; remove global events and always attach to document
                cache = jQuery.cache;
                for (i in cache) {
                    if (cache[ i ].events && cache[ i ].events[ type ]) {
                        jQuery.event.trigger(event, data, cache[ i ].handle.elem, true);
                    }
                }
                return;
            }

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data != null ? jQuery.makeArray(data) : [];
            data.unshift(event);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if (special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            eventPath = [
                [ elem, special.bindType || type ]
            ];
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
                old = null;
                for (; cur; cur = cur.parentNode) {
                    eventPath.push([ cur, bubbleType ]);
                    old = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (old && old === elem.ownerDocument) {
                    eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
                }
            }

            // Fire handlers on the event path
            for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {

                cur = eventPath[i][0];
                event.type = eventPath[i][1];

                handle = ( jQuery._data(cur, "events") || {} )[ event.type ] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                // Note that this is a bare JS function and not a jQuery handler
                handle = ontype && cur[ ontype ];
                if (handle && jQuery.acceptData(cur) && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) &&
                    !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    // IE<9 dies on focus/blur to hidden element (#1486)
                    if (ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        old = elem[ ontype ];

                        if (old) {
                            elem[ ontype ] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[ type ]();
                        jQuery.event.triggered = undefined;

                        if (old) {
                            elem[ ontype ] = old;
                        }
                    }
                }
            }

            return event.result;
        },

        dispatch:function (event) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event || window.event);

            var handlers = ( (jQuery._data(this, "events") || {} )[ event.type ] || []),
                delegateCount = handlers.delegateCount,
                args = [].slice.call(arguments, 0),
                run_all = !event.exclusive && !event.namespace,
                special = jQuery.event.special[ event.type ] || {},
                handlerQueue = [],
                i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers that should run if there are delegated events
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && !(event.button && event.type === "click")) {

                // Pregenerate a single jQuery object for reuse with .is()
                jqcur = jQuery(this);
                jqcur.context = this.ownerDocument || this;

                for (cur = event.target; cur != this; cur = cur.parentNode || this) {

                    // Don't process events on disabled elements (#6911, #8165)
                    if (cur.disabled !== true) {
                        selMatch = {};
                        matches = [];
                        jqcur[0] = cur;
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[ i ];
                            sel = handleObj.selector;

                            if (selMatch[ sel ] === undefined) {
                                selMatch[ sel ] = (
                                    handleObj.quick ? quickIs(cur, handleObj.quick) : jqcur.is(sel)
                                    );
                            }
                            if (selMatch[ sel ]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({ elem:cur, matches:matches });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (handlers.length > delegateCount) {
                handlerQueue.push({ elem:this, matches:handlers.slice(delegateCount) });
            }

            // Run delegates first; they may want to stop propagation beneath us
            for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
                matched = handlerQueue[ i ];
                event.currentTarget = matched.elem;

                for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
                    handleObj = matched.matches[ j ];

                    // Triggered event must either 1) be non-exclusive and have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if (run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {

                        event.data = handleObj.data;
                        event.handleObj = handleObj;

                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                            .apply(matched.elem, args);

                        if (ret !== undefined) {
                            event.result = ret;
                            if (ret === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
        props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

        fixHooks:{},

        keyHooks:{
            props:"char charCode key keyCode".split(" "),
            filter:function (event, original) {

                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks:{
            props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter:function (event, original) {
                var eventDoc, doc, body,
                    button = original.button,
                    fromElement = original.fromElement;

                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                    event.pageY = original.clientY + ( doc && doc.scrollTop || body && body.scrollTop || 0 ) - ( doc && doc.clientTop || body && body.clientTop || 0 );
                }

                // Add relatedTarget, if necessary
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                }

                return event;
            }
        },

        fix:function (event) {
            if (event[ jQuery.expando ]) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop,
                originalEvent = event,
                fixHook = jQuery.event.fixHooks[ event.type ] || {},
                copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

            event = jQuery.Event(originalEvent);

            for (i = copy.length; i;) {
                prop = copy[ --i ];
                event[ prop ] = originalEvent[ prop ];
            }

            // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }

            // Target should not be a text node (#504, Safari)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            // For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
            if (event.metaKey === undefined) {
                event.metaKey = event.ctrlKey;
            }

            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        special:{
            ready:{
                // Make sure the ready event is setup
                setup:jQuery.bindReady
            },

            load:{
                // Prevent triggered image.load events from bubbling to window.load
                noBubble:true
            },

            focus:{
                delegateType:"focusin"
            },
            blur:{
                delegateType:"focusout"
            },

            beforeunload:{
                setup:function (data, namespaces, eventHandle) {
                    // We only want to do this special case on windows
                    if (jQuery.isWindow(this)) {
                        this.onbeforeunload = eventHandle;
                    }
                },

                teardown:function (namespaces, eventHandle) {
                    if (this.onbeforeunload === eventHandle) {
                        this.onbeforeunload = null;
                    }
                }
            }
        },

        simulate:function (type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                { type:type,
                    isSimulated:true,
                    originalEvent:{}
                }
            );
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
    jQuery.event.handle = jQuery.event.dispatch;

    jQuery.removeEvent = document.removeEventListener ?
        function (elem, type, handle) {
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle, false);
            }
        } :
        function (elem, type, handle) {
            if (elem.detachEvent) {
                elem.detachEvent("on" + type, handle);
            }
        };

    jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };

    function returnFalse() {
        return false;
    }

    function returnTrue() {
        return true;
    }

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        preventDefault:function () {
            this.isDefaultPrevented = returnTrue;

            var e = this.originalEvent;
            if (!e) {
                return;
            }

            // if preventDefault exists run it on the original event
            if (e.preventDefault) {
                e.preventDefault();

                // otherwise set the returnValue property of the original event to false (IE)
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation:function () {
            this.isPropagationStopped = returnTrue;

            var e = this.originalEvent;
            if (!e) {
                return;
            }
            // if stopPropagation exists run it on the original event
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            // otherwise set the cancelBubble property of the original event to true (IE)
            e.cancelBubble = true;
        },
        stopImmediatePropagation:function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        },
        isDefaultPrevented:returnFalse,
        isPropagationStopped:returnFalse,
        isImmediatePropagationStopped:returnFalse
    };

// Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter:"mouseover",
        mouseleave:"mouseout"
    }, function (orig, fix) {
        jQuery.event.special[ orig ] = {
            delegateType:fix,
            bindType:fix,

            handle:function (event) {
                var target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj,
                    selector = handleObj.selector,
                    ret;

                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

// IE submit delegation
    if (!jQuery.support.submitBubbles) {

        jQuery.event.special.submit = {
            setup:function () {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, "click._submit keypress._submit", function (e) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !form._submit_attached) {
                        jQuery.event.add(form, "submit._submit", function (event) {
                            event._submit_bubble = true;
                        });
                        form._submit_attached = true;
                    }
                });
                // return undefined since we don't need an event listener
            },

            postDispatch:function (event) {
                // If form was submitted by the user, bubble the event up the tree
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },

            teardown:function () {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, "._submit");
            }
        };
    }

// IE change delegation and checkbox/radio fix
    if (!jQuery.support.changeBubbles) {

        jQuery.event.special.change = {

            setup:function () {

                if (rformElems.test(this.nodeName)) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function (event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function (event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                                jQuery.event.simulate("change", this, event, true);
                            }
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function (e) {
                    var elem = e.target;

                    if (rformElems.test(elem.nodeName) && !elem._change_attached) {
                        jQuery.event.add(elem, "change._change", function (event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        elem._change_attached = true;
                    }
                });
            },

            handle:function (event) {
                var elem = event.target;

                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },

            teardown:function () {
                jQuery.event.remove(this, "._change");

                return rformElems.test(this.nodeName);
            }
        };
    }

// Create "bubbling" focus and blur events
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({ focus:"focusin", blur:"focusout" }, function (orig, fix) {

            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function (event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };

            jQuery.event.special[ fix ] = {
                setup:function () {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown:function () {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }

    jQuery.fn.extend({

        on:function (types, selector, data, fn, /*INTERNAL*/ one) {
            var origFn, type;

            // Types can be a map of types/handlers
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") { // && selector != null
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[ type ], one);
                }
                return this;
            }

            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }

            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    // Can use an empty set, since event contains the info
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one:function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off:function (types, selector, fn) {
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                var handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (var type in types) {
                    this.off(type, selector, types[ type ]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        },

        bind:function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind:function (types, fn) {
            return this.off(types, null, fn);
        },

        live:function (types, data, fn) {
            jQuery(this.context).on(types, this.selector, data, fn);
            return this;
        },
        die:function (types, fn) {
            jQuery(this.context).off(types, this.selector || "**", fn);
            return this;
        },

        delegate:function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate:function (selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length == 1 ? this.off(selector, "**") : this.off(types, selector, fn);
        },

        trigger:function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler:function (type, data) {
            if (this[0]) {
                return jQuery.event.trigger(type, data, this[0], true);
            }
        },

        toggle:function (fn) {
            // Save reference to arguments for access in closure
            var args = arguments,
                guid = fn.guid || jQuery.guid++,
                i = 0,
                toggler = function (event) {
                    // Figure out which function to execute
                    var lastToggle = ( jQuery._data(this, "lastToggle" + fn.guid) || 0 ) % i;
                    jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);

                    // Make sure that clicks stop
                    event.preventDefault();

                    // and execute the function
                    return args[ lastToggle ].apply(this, arguments) || false;
                };

            // link all the functions, so any of them can unbind this click handler
            toggler.guid = guid;
            while (i < args.length) {
                args[ i++ ].guid = guid;
            }

            return this.click(toggler);
        },

        hover:function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });

    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

        // Handle event binding
        jQuery.fn[ name ] = function (data, fn) {
            if (fn == null) {
                fn = data;
                data = null;
            }

            return arguments.length > 0 ?
                this.on(name, null, data, fn) :
                this.trigger(name);
        };

        if (jQuery.attrFn) {
            jQuery.attrFn[ name ] = true;
        }

        if (rkeyEvent.test(name)) {
            jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
        }

        if (rmouseEvent.test(name)) {
            jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
        }
    });


    /*!
     * Sizzle CSS Selector Engine
     *  Copyright 2011, The Dojo Foundation
     *  Released under the MIT, BSD, and GPL Licenses.
     *  More information: http://sizzlejs.com/
     */
    (function () {

        var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            expando = "sizcache" + (Math.random() + '').replace('.', ''),
            done = 0,
            toString = Object.prototype.toString,
            hasDuplicate = false,
            baseHasDuplicate = true,
            rBackslash = /\\/g,
            rReturn = /\r\n/g,
            rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
        [0, 0].sort(function () {
            baseHasDuplicate = false;
            return 0;
        });

        var Sizzle = function (selector, context, results, seed) {
            results = results || [];
            context = context || document;

            var origContext = context;

            if (context.nodeType !== 1 && context.nodeType !== 9) {
                return [];
            }

            if (!selector || typeof selector !== "string") {
                return results;
            }

            var m, set, checkSet, extra, ret, cur, pop, i,
                prune = true,
                contextXML = Sizzle.isXML(context),
                parts = [],
                soFar = selector;

            // Reset the position of the chunker regexp (start from head)
            do {
                chunker.exec("");
                m = chunker.exec(soFar);

                if (m) {
                    soFar = m[3];

                    parts.push(m[1]);

                    if (m[2]) {
                        extra = m[3];
                        break;
                    }
                }
            } while (m);

            if (parts.length > 1 && origPOS.exec(selector)) {

                if (parts.length === 2 && Expr.relative[ parts[0] ]) {
                    set = posProcess(parts[0] + parts[1], context, seed);

                } else {
                    set = Expr.relative[ parts[0] ] ?
                        [ context ] :
                        Sizzle(parts.shift(), context);

                    while (parts.length) {
                        selector = parts.shift();

                        if (Expr.relative[ selector ]) {
                            selector += parts.shift();
                        }

                        set = posProcess(selector, set, seed);
                    }
                }

            } else {
                // Take a shortcut and set the context if the root selector is an ID
                // (but not if it'll be faster if the inner selector is an ID)
                if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
                    Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {

                    ret = Sizzle.find(parts.shift(), context, contextXML);
                    context = ret.expr ?
                        Sizzle.filter(ret.expr, ret.set)[0] :
                        ret.set[0];
                }

                if (context) {
                    ret = seed ?
                    { expr:parts.pop(), set:makeArray(seed) } :
                        Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);

                    set = ret.expr ?
                        Sizzle.filter(ret.expr, ret.set) :
                        ret.set;

                    if (parts.length > 0) {
                        checkSet = makeArray(set);

                    } else {
                        prune = false;
                    }

                    while (parts.length) {
                        cur = parts.pop();
                        pop = cur;

                        if (!Expr.relative[ cur ]) {
                            cur = "";
                        } else {
                            pop = parts.pop();
                        }

                        if (pop == null) {
                            pop = context;
                        }

                        Expr.relative[ cur ](checkSet, pop, contextXML);
                    }

                } else {
                    checkSet = parts = [];
                }
            }

            if (!checkSet) {
                checkSet = set;
            }

            if (!checkSet) {
                Sizzle.error(cur || selector);
            }

            if (toString.call(checkSet) === "[object Array]") {
                if (!prune) {
                    results.push.apply(results, checkSet);

                } else if (context && context.nodeType === 1) {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i]))) {
                            results.push(set[i]);
                        }
                    }

                } else {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && checkSet[i].nodeType === 1) {
                            results.push(set[i]);
                        }
                    }
                }

            } else {
                makeArray(checkSet, results);
            }

            if (extra) {
                Sizzle(extra, origContext, results, seed);
                Sizzle.uniqueSort(results);
            }

            return results;
        };

        Sizzle.uniqueSort = function (results) {
            if (sortOrder) {
                hasDuplicate = baseHasDuplicate;
                results.sort(sortOrder);

                if (hasDuplicate) {
                    for (var i = 1; i < results.length; i++) {
                        if (results[i] === results[ i - 1 ]) {
                            results.splice(i--, 1);
                        }
                    }
                }
            }

            return results;
        };

        Sizzle.matches = function (expr, set) {
            return Sizzle(expr, null, null, set);
        };

        Sizzle.matchesSelector = function (node, expr) {
            return Sizzle(expr, null, null, [node]).length > 0;
        };

        Sizzle.find = function (expr, context, isXML) {
            var set, i, len, match, type, left;

            if (!expr) {
                return [];
            }

            for (i = 0, len = Expr.order.length; i < len; i++) {
                type = Expr.order[i];

                if ((match = Expr.leftMatch[ type ].exec(expr))) {
                    left = match[1];
                    match.splice(1, 1);

                    if (left.substr(left.length - 1) !== "\\") {
                        match[1] = (match[1] || "").replace(rBackslash, "");
                        set = Expr.find[ type ](match, context, isXML);

                        if (set != null) {
                            expr = expr.replace(Expr.match[ type ], "");
                            break;
                        }
                    }
                }
            }

            if (!set) {
                set = typeof context.getElementsByTagName !== "undefined" ?
                    context.getElementsByTagName("*") :
                    [];
            }

            return { set:set, expr:expr };
        };

        Sizzle.filter = function (expr, set, inplace, not) {
            var match, anyFound,
                type, found, item, filter, left,
                i, pass,
                old = expr,
                result = [],
                curLoop = set,
                isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);

            while (expr && set.length) {
                for (type in Expr.filter) {
                    if ((match = Expr.leftMatch[ type ].exec(expr)) != null && match[2]) {
                        filter = Expr.filter[ type ];
                        left = match[1];

                        anyFound = false;

                        match.splice(1, 1);

                        if (left.substr(left.length - 1) === "\\") {
                            continue;
                        }

                        if (curLoop === result) {
                            result = [];
                        }

                        if (Expr.preFilter[ type ]) {
                            match = Expr.preFilter[ type ](match, curLoop, inplace, result, not, isXMLFilter);

                            if (!match) {
                                anyFound = found = true;

                            } else if (match === true) {
                                continue;
                            }
                        }

                        if (match) {
                            for (i = 0; (item = curLoop[i]) != null; i++) {
                                if (item) {
                                    found = filter(item, match, i, curLoop);
                                    pass = not ^ found;

                                    if (inplace && found != null) {
                                        if (pass) {
                                            anyFound = true;

                                        } else {
                                            curLoop[i] = false;
                                        }

                                    } else if (pass) {
                                        result.push(item);
                                        anyFound = true;
                                    }
                                }
                            }
                        }

                        if (found !== undefined) {
                            if (!inplace) {
                                curLoop = result;
                            }

                            expr = expr.replace(Expr.match[ type ], "");

                            if (!anyFound) {
                                return [];
                            }

                            break;
                        }
                    }
                }

                // Improper expression
                if (expr === old) {
                    if (anyFound == null) {
                        Sizzle.error(expr);

                    } else {
                        break;
                    }
                }

                old = expr;
            }

            return curLoop;
        };

        Sizzle.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };

        /**
         * Utility function for retreiving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        var getText = Sizzle.getText = function (elem) {
            var i, node,
                nodeType = elem.nodeType,
                ret = "";

            if (nodeType) {
                if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    // Use textContent || innerText for elements
                    if (typeof elem.textContent === 'string') {
                        return elem.textContent;
                    } else if (typeof elem.innerText === 'string') {
                        // Replace IE's carriage returns
                        return elem.innerText.replace(rReturn, '');
                    } else {
                        // Traverse it's children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
            } else {

                // If no nodeType, this is expected to be an array
                for (i = 0; (node = elem[i]); i++) {
                    // Do not traverse comment nodes
                    if (node.nodeType !== 8) {
                        ret += getText(node);
                    }
                }
            }
            return ret;
        };

        var Expr = Sizzle.selectors = {
            order:[ "ID", "NAME", "TAG" ],

            match:{
                ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },

            leftMatch:{},

            attrMap:{
                "class":"className",
                "for":"htmlFor"
            },

            attrHandle:{
                href:function (elem) {
                    return elem.getAttribute("href");
                },
                type:function (elem) {
                    return elem.getAttribute("type");
                }
            },

            relative:{
                "+":function (checkSet, part) {
                    var isPartStr = typeof part === "string",
                        isTag = isPartStr && !rNonWord.test(part),
                        isPartStrNotTag = isPartStr && !isTag;

                    if (isTag) {
                        part = part.toLowerCase();
                    }

                    for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                        if ((elem = checkSet[i])) {
                            while ((elem = elem.previousSibling) && elem.nodeType !== 1) {
                            }

                            checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
                                elem || false :
                                elem === part;
                        }
                    }

                    if (isPartStrNotTag) {
                        Sizzle.filter(part, checkSet, true);
                    }
                },

                ">":function (checkSet, part) {
                    var elem,
                        isPartStr = typeof part === "string",
                        i = 0,
                        l = checkSet.length;

                    if (isPartStr && !rNonWord.test(part)) {
                        part = part.toLowerCase();

                        for (; i < l; i++) {
                            elem = checkSet[i];

                            if (elem) {
                                var parent = elem.parentNode;
                                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
                            }
                        }

                    } else {
                        for (; i < l; i++) {
                            elem = checkSet[i];

                            if (elem) {
                                checkSet[i] = isPartStr ?
                                    elem.parentNode :
                                    elem.parentNode === part;
                            }
                        }

                        if (isPartStr) {
                            Sizzle.filter(part, checkSet, true);
                        }
                    }
                },

                "":function (checkSet, part, isXML) {
                    var nodeCheck,
                        doneName = done++,
                        checkFn = dirCheck;

                    if (typeof part === "string" && !rNonWord.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }

                    checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
                },

                "~":function (checkSet, part, isXML) {
                    var nodeCheck,
                        doneName = done++,
                        checkFn = dirCheck;

                    if (typeof part === "string" && !rNonWord.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }

                    checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
                }
            },

            find:{
                ID:function (match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                },

                NAME:function (match, context) {
                    if (typeof context.getElementsByName !== "undefined") {
                        var ret = [],
                            results = context.getElementsByName(match[1]);

                        for (var i = 0, l = results.length; i < l; i++) {
                            if (results[i].getAttribute("name") === match[1]) {
                                ret.push(results[i]);
                            }
                        }

                        return ret.length === 0 ? null : ret;
                    }
                },

                TAG:function (match, context) {
                    if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(match[1]);
                    }
                }
            },
            preFilter:{
                CLASS:function (match, curLoop, inplace, result, not, isXML) {
                    match = " " + match[1].replace(rBackslash, "") + " ";

                    if (isXML) {
                        return match;
                    }

                    for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
                        if (elem) {
                            if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0)) {
                                if (!inplace) {
                                    result.push(elem);
                                }

                            } else if (inplace) {
                                curLoop[i] = false;
                            }
                        }
                    }

                    return false;
                },

                ID:function (match) {
                    return match[1].replace(rBackslash, "");
                },

                TAG:function (match, curLoop) {
                    return match[1].replace(rBackslash, "").toLowerCase();
                },

                CHILD:function (match) {
                    if (match[1] === "nth") {
                        if (!match[2]) {
                            Sizzle.error(match[0]);
                        }

                        match[2] = match[2].replace(/^\+|\s*/g, '');

                        // parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
                        var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
                            match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
                                !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);

                        // calculate the numbers (first)n+(last) including if they are negative
                        match[2] = (test[1] + (test[2] || 1)) - 0;
                        match[3] = test[3] - 0;
                    }
                    else if (match[2]) {
                        Sizzle.error(match[0]);
                    }

                    // TODO: Move to normal caching system
                    match[0] = done++;

                    return match;
                },

                ATTR:function (match, curLoop, inplace, result, not, isXML) {
                    var name = match[1] = match[1].replace(rBackslash, "");

                    if (!isXML && Expr.attrMap[name]) {
                        match[1] = Expr.attrMap[name];
                    }

                    // Handle if an un-quoted value was used
                    match[4] = ( match[4] || match[5] || "" ).replace(rBackslash, "");

                    if (match[2] === "~=") {
                        match[4] = " " + match[4] + " ";
                    }

                    return match;
                },

                PSEUDO:function (match, curLoop, inplace, result, not) {
                    if (match[1] === "not") {
                        // If we're dealing with a complex expression, or a simple one
                        if (( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3])) {
                            match[3] = Sizzle(match[3], null, null, curLoop);

                        } else {
                            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

                            if (!inplace) {
                                result.push.apply(result, ret);
                            }

                            return false;
                        }

                    } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                        return true;
                    }

                    return match;
                },

                POS:function (match) {
                    match.unshift(true);

                    return match;
                }
            },

            filters:{
                enabled:function (elem) {
                    return elem.disabled === false && elem.type !== "hidden";
                },

                disabled:function (elem) {
                    return elem.disabled === true;
                },

                checked:function (elem) {
                    return elem.checked === true;
                },

                selected:function (elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                },

                parent:function (elem) {
                    return !!elem.firstChild;
                },

                empty:function (elem) {
                    return !elem.firstChild;
                },

                has:function (elem, i, match) {
                    return !!Sizzle(match[3], elem).length;
                },

                header:function (elem) {
                    return (/h\d/i).test(elem.nodeName);
                },

                text:function (elem) {
                    var attr = elem.getAttribute("type"), type = elem.type;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
                },

                radio:function (elem) {
                    return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
                },

                checkbox:function (elem) {
                    return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
                },

                file:function (elem) {
                    return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
                },

                password:function (elem) {
                    return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
                },

                submit:function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && "submit" === elem.type;
                },

                image:function (elem) {
                    return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
                },

                reset:function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && "reset" === elem.type;
                },

                button:function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && "button" === elem.type || name === "button";
                },

                input:function (elem) {
                    return (/input|select|textarea|button/i).test(elem.nodeName);
                },

                focus:function (elem) {
                    return elem === elem.ownerDocument.activeElement;
                }
            },
            setFilters:{
                first:function (elem, i) {
                    return i === 0;
                },

                last:function (elem, i, match, array) {
                    return i === array.length - 1;
                },

                even:function (elem, i) {
                    return i % 2 === 0;
                },

                odd:function (elem, i) {
                    return i % 2 === 1;
                },

                lt:function (elem, i, match) {
                    return i < match[3] - 0;
                },

                gt:function (elem, i, match) {
                    return i > match[3] - 0;
                },

                nth:function (elem, i, match) {
                    return match[3] - 0 === i;
                },

                eq:function (elem, i, match) {
                    return match[3] - 0 === i;
                }
            },
            filter:{
                PSEUDO:function (elem, match, i, array) {
                    var name = match[1],
                        filter = Expr.filters[ name ];

                    if (filter) {
                        return filter(elem, i, match, array);

                    } else if (name === "contains") {
                        return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

                    } else if (name === "not") {
                        var not = match[3];

                        for (var j = 0, l = not.length; j < l; j++) {
                            if (not[j] === elem) {
                                return false;
                            }
                        }

                        return true;

                    } else {
                        Sizzle.error(name);
                    }
                },

                CHILD:function (elem, match) {
                    var first, last,
                        doneName, parent, cache,
                        count, diff,
                        type = match[1],
                        node = elem;

                    switch (type) {
                        case "only":
                        case "first":
                            while ((node = node.previousSibling)) {
                                if (node.nodeType === 1) {
                                    return false;
                                }
                            }

                            if (type === "first") {
                                return true;
                            }

                            node = elem;

                        /* falls through */
                        case "last":
                            while ((node = node.nextSibling)) {
                                if (node.nodeType === 1) {
                                    return false;
                                }
                            }

                            return true;

                        case "nth":
                            first = match[2];
                            last = match[3];

                            if (first === 1 && last === 0) {
                                return true;
                            }

                            doneName = match[0];
                            parent = elem.parentNode;

                            if (parent && (parent[ expando ] !== doneName || !elem.nodeIndex)) {
                                count = 0;

                                for (node = parent.firstChild; node; node = node.nextSibling) {
                                    if (node.nodeType === 1) {
                                        node.nodeIndex = ++count;
                                    }
                                }

                                parent[ expando ] = doneName;
                            }

                            diff = elem.nodeIndex - last;

                            if (first === 0) {
                                return diff === 0;

                            } else {
                                return ( diff % first === 0 && diff / first >= 0 );
                            }
                    }
                },

                ID:function (elem, match) {
                    return elem.nodeType === 1 && elem.getAttribute("id") === match;
                },

                TAG:function (elem, match) {
                    return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
                },

                CLASS:function (elem, match) {
                    return (" " + (elem.className || elem.getAttribute("class")) + " ")
                        .indexOf(match) > -1;
                },

                ATTR:function (elem, match) {
                    var name = match[1],
                        result = Sizzle.attr ?
                            Sizzle.attr(elem, name) :
                            Expr.attrHandle[ name ] ?
                                Expr.attrHandle[ name ](elem) :
                                elem[ name ] != null ?
                                    elem[ name ] :
                                    elem.getAttribute(name),
                        value = result + "",
                        type = match[2],
                        check = match[4];

                    return result == null ?
                        type === "!=" :
                        !type && Sizzle.attr ?
                            result != null :
                            type === "=" ?
                                value === check :
                                type === "*=" ?
                                    value.indexOf(check) >= 0 :
                                    type === "~=" ?
                                        (" " + value + " ").indexOf(check) >= 0 :
                                        !check ?
                                            value && result !== false :
                                            type === "!=" ?
                                                value !== check :
                                                type === "^=" ?
                                                    value.indexOf(check) === 0 :
                                                    type === "$=" ?
                                                        value.substr(value.length - check.length) === check :
                                                        type === "|=" ?
                                                            value === check || value.substr(0, check.length + 1) === check + "-" :
                                                            false;
                },

                POS:function (elem, match, i, array) {
                    var name = match[2],
                        filter = Expr.setFilters[ name ];

                    if (filter) {
                        return filter(elem, i, match, array);
                    }
                }
            }
        };

        var origPOS = Expr.match.POS,
            fescape = function (all, num) {
                return "\\" + (num - 0 + 1);
            };

        for (var type in Expr.match) {
            Expr.match[ type ] = new RegExp(Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            Expr.leftMatch[ type ] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape));
        }
// Expose origPOS
// "global" as in regardless of relation to brackets/parens
        Expr.match.globalPOS = origPOS;

        var makeArray = function (array, results) {
            array = Array.prototype.slice.call(array, 0);

            if (results) {
                results.push.apply(results, array);
                return results;
            }

            return array;
        };

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;

// Provide a fallback method if it does not work
        } catch (e) {
            makeArray = function (array, results) {
                var i = 0,
                    ret = results || [];

                if (toString.call(array) === "[object Array]") {
                    Array.prototype.push.apply(ret, array);

                } else {
                    if (typeof array.length === "number") {
                        for (var l = array.length; i < l; i++) {
                            ret.push(array[i]);
                        }

                    } else {
                        for (; array[i]; i++) {
                            ret.push(array[i]);
                        }
                    }
                }

                return ret;
            };
        }

        var sortOrder, siblingCheck;

        if (document.documentElement.compareDocumentPosition) {
            sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }

                if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                    return a.compareDocumentPosition ? -1 : 1;
                }

                return a.compareDocumentPosition(b) & 4 ? -1 : 1;
            };

        } else {
            sortOrder = function (a, b) {
                // The nodes are identical, we can exit early
                if (a === b) {
                    hasDuplicate = true;
                    return 0;

                    // Fallback to using sourceIndex (in IE) if it's available on both nodes
                } else if (a.sourceIndex && b.sourceIndex) {
                    return a.sourceIndex - b.sourceIndex;
                }

                var al, bl,
                    ap = [],
                    bp = [],
                    aup = a.parentNode,
                    bup = b.parentNode,
                    cur = aup;

                // If the nodes are siblings (or identical) we can do a quick check
                if (aup === bup) {
                    return siblingCheck(a, b);

                    // If no parents were found then the nodes are disconnected
                } else if (!aup) {
                    return -1;

                } else if (!bup) {
                    return 1;
                }

                // Otherwise they're somewhere else in the tree so we need
                // to build up a full list of the parentNodes for comparison
                while (cur) {
                    ap.unshift(cur);
                    cur = cur.parentNode;
                }

                cur = bup;

                while (cur) {
                    bp.unshift(cur);
                    cur = cur.parentNode;
                }

                al = ap.length;
                bl = bp.length;

                // Start walking down the tree looking for a discrepancy
                for (var i = 0; i < al && i < bl; i++) {
                    if (ap[i] !== bp[i]) {
                        return siblingCheck(ap[i], bp[i]);
                    }
                }

                // We ended someplace up the tree so do a sibling check
                return i === al ?
                    siblingCheck(a, bp[i], -1) :
                    siblingCheck(ap[i], b, 1);
            };

            siblingCheck = function (a, b, ret) {
                if (a === b) {
                    return ret;
                }

                var cur = a.nextSibling;

                while (cur) {
                    if (cur === b) {
                        return -1;
                    }

                    cur = cur.nextSibling;
                }

                return 1;
            };
        }

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
        (function () {
            // We're going to inject a fake input element with a specified name
            var form = document.createElement("div"),
                id = "script" + (new Date()).getTime(),
                root = document.documentElement;

            form.innerHTML = "<a name='" + id + "'/>";

            // Inject it into the root element, check its status, and remove it quickly
            root.insertBefore(form, root.firstChild);

            // The workaround has to do additional checks after a getElementById
            // Which slows things down for other browsers (hence the branching)
            if (document.getElementById(id)) {
                Expr.find.ID = function (match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);

                        return m ?
                            m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
                                [m] :
                                undefined :
                            [];
                    }
                };

                Expr.filter.ID = function (elem, match) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

                    return elem.nodeType === 1 && node && node.nodeValue === match;
                };
            }

            root.removeChild(form);

            // release memory in IE
            root = form = null;
        })();

        (function () {
            // Check to see if the browser returns only elements
            // when doing getElementsByTagName("*")

            // Create a fake element
            var div = document.createElement("div");
            div.appendChild(document.createComment(""));

            // Make sure no comments are found
            if (div.getElementsByTagName("*").length > 0) {
                Expr.find.TAG = function (match, context) {
                    var results = context.getElementsByTagName(match[1]);

                    // Filter out possible comments
                    if (match[1] === "*") {
                        var tmp = [];

                        for (var i = 0; results[i]; i++) {
                            if (results[i].nodeType === 1) {
                                tmp.push(results[i]);
                            }
                        }

                        results = tmp;
                    }

                    return results;
                };
            }

            // Check to see if an attribute returns normalized href attributes
            div.innerHTML = "<a href='#'></a>";

            if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
                div.firstChild.getAttribute("href") !== "#") {

                Expr.attrHandle.href = function (elem) {
                    return elem.getAttribute("href", 2);
                };
            }

            // release memory in IE
            div = null;
        })();

        if (document.querySelectorAll) {
            (function () {
                var oldSizzle = Sizzle,
                    div = document.createElement("div"),
                    id = "__sizzle__";

                div.innerHTML = "<p class='TEST'></p>";

                // Safari can't handle uppercase or unicode characters when
                // in quirks mode.
                if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                    return;
                }

                Sizzle = function (query, context, extra, seed) {
                    context = context || document;

                    // Only use querySelectorAll on non-XML documents
                    // (ID selectors don't work in non-HTML documents)
                    if (!seed && !Sizzle.isXML(context)) {
                        // See if we find a selector to speed up
                        var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(query);

                        if (match && (context.nodeType === 1 || context.nodeType === 9)) {
                            // Speed-up: Sizzle("TAG")
                            if (match[1]) {
                                return makeArray(context.getElementsByTagName(query), extra);

                                // Speed-up: Sizzle(".CLASS")
                            } else if (match[2] && Expr.find.CLASS && context.getElementsByClassName) {
                                return makeArray(context.getElementsByClassName(match[2]), extra);
                            }
                        }

                        if (context.nodeType === 9) {
                            // Speed-up: Sizzle("body")
                            // The body element only exists once, optimize finding it
                            if (query === "body" && context.body) {
                                return makeArray([ context.body ], extra);

                                // Speed-up: Sizzle("#ID")
                            } else if (match && match[3]) {
                                var elem = context.getElementById(match[3]);

                                // Check parentNode to catch when Blackberry 4.6 returns
                                // nodes that are no longer in the document #6963
                                if (elem && elem.parentNode) {
                                    // Handle the case where IE and Opera return items
                                    // by name instead of ID
                                    if (elem.id === match[3]) {
                                        return makeArray([ elem ], extra);
                                    }

                                } else {
                                    return makeArray([], extra);
                                }
                            }

                            try {
                                return makeArray(context.querySelectorAll(query), extra);
                            } catch (qsaError) {
                            }

                            // qSA works strangely on Element-rooted queries
                            // We can work around this by specifying an extra ID on the root
                            // and working up from there (Thanks to Andrew Dupont for the technique)
                            // IE 8 doesn't work on object elements
                        } else if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                            var oldContext = context,
                                old = context.getAttribute("id"),
                                nid = old || id,
                                hasParent = context.parentNode,
                                relativeHierarchySelector = /^\s*[+~]/.test(query);

                            if (!old) {
                                context.setAttribute("id", nid);
                            } else {
                                nid = nid.replace(/'/g, "\\$&");
                            }
                            if (relativeHierarchySelector && hasParent) {
                                context = context.parentNode;
                            }

                            try {
                                if (!relativeHierarchySelector || hasParent) {
                                    return makeArray(context.querySelectorAll("[id='" + nid + "'] " + query), extra);
                                }

                            } catch (pseudoError) {
                            } finally {
                                if (!old) {
                                    oldContext.removeAttribute("id");
                                }
                            }
                        }
                    }

                    return oldSizzle(query, context, extra, seed);
                };

                for (var prop in oldSizzle) {
                    Sizzle[ prop ] = oldSizzle[ prop ];
                }

                // release memory in IE
                div = null;
            })();
        }

        (function () {
            var html = document.documentElement,
                matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

            if (matches) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9 fails this)
                var disconnectedMatch = !matches.call(document.createElement("div"), "div"),
                    pseudoWorks = false;

                try {
                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(document.documentElement, "[test!='']:sizzle");

                } catch (pseudoError) {
                    pseudoWorks = true;
                }

                Sizzle.matchesSelector = function (node, expr) {
                    // Make sure that attribute selectors are quoted
                    expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

                    if (!Sizzle.isXML(node)) {
                        try {
                            if (pseudoWorks || !Expr.match.PSEUDO.test(expr) && !/!=/.test(expr)) {
                                var ret = matches.call(node, expr);

                                // IE 9's matchesSelector returns false on disconnected nodes
                                if (ret || !disconnectedMatch ||
                                    // As well, disconnected nodes are said to be in a document
                                    // fragment in IE 9, so check for that
                                    node.document && node.document.nodeType !== 11) {
                                    return ret;
                                }
                            }
                        } catch (e) {
                        }
                    }

                    return Sizzle(expr, null, null, [node]).length > 0;
                };
            }
        })();

        (function () {
            var div = document.createElement("div");

            div.innerHTML = "<div class='test e'></div><div class='test'></div>";

            // Opera can't find a second classname (in 9.6)
            // Also, make sure that getElementsByClassName actually exists
            if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                return;
            }

            // Safari caches class attributes, doesn't catch changes (in 3.2)
            div.lastChild.className = "e";

            if (div.getElementsByClassName("e").length === 1) {
                return;
            }

            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function (match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1]);
                }
            };

            // release memory in IE
            div = null;
        })();

        function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];

                if (elem) {
                    var match = false;

                    elem = elem[dir];

                    while (elem) {
                        if (elem[ expando ] === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }

                        if (elem.nodeType === 1 && !isXML) {
                            elem[ expando ] = doneName;
                            elem.sizset = i;
                        }

                        if (elem.nodeName.toLowerCase() === cur) {
                            match = elem;
                            break;
                        }

                        elem = elem[dir];
                    }

                    checkSet[i] = match;
                }
            }
        }

        function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];

                if (elem) {
                    var match = false;

                    elem = elem[dir];

                    while (elem) {
                        if (elem[ expando ] === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }

                        if (elem.nodeType === 1) {
                            if (!isXML) {
                                elem[ expando ] = doneName;
                                elem.sizset = i;
                            }

                            if (typeof cur !== "string") {
                                if (elem === cur) {
                                    match = true;
                                    break;
                                }

                            } else if (Sizzle.filter(cur, [elem]).length > 0) {
                                match = elem;
                                break;
                            }
                        }

                        elem = elem[dir];
                    }

                    checkSet[i] = match;
                }
            }
        }

        if (document.documentElement.contains) {
            Sizzle.contains = function (a, b) {
                return a !== b && (a.contains ? a.contains(b) : true);
            };

        } else if (document.documentElement.compareDocumentPosition) {
            Sizzle.contains = function (a, b) {
                return !!(a.compareDocumentPosition(b) & 16);
            };

        } else {
            Sizzle.contains = function () {
                return false;
            };
        }

        Sizzle.isXML = function (elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };

        var posProcess = function (selector, context, seed) {
            var match,
                tmpSet = [],
                later = "",
                root = context.nodeType ? [context] : context;

            // Position selectors must be done after the filter
            // And so must :not(positional) so we move all PSEUDOs to the end
            while ((match = Expr.match.PSEUDO.exec(selector))) {
                later += match[0];
                selector = selector.replace(Expr.match.PSEUDO, "");
            }

            selector = Expr.relative[selector] ? selector + "*" : selector;

            for (var i = 0, l = root.length; i < l; i++) {
                Sizzle(selector, root[i], tmpSet, seed);
            }

            return Sizzle.filter(later, tmpSet);
        };

// EXPOSE
// Override sizzle attribute retrieval
        Sizzle.attr = jQuery.attr;
        Sizzle.selectors.attrMap = {};
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.filters;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;


    })();


    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prevUntil|prevAll)/,
    // Note: This RegExp should be improved, or likely pulled from Sizzle
        rmultiselector = /,/,
        isSimple = /^.[^:#\[\.,]*$/,
        slice = Array.prototype.slice,
        POS = jQuery.expr.match.globalPOS,
    // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children:true,
            contents:true,
            next:true,
            prev:true
        };

    jQuery.fn.extend({
        find:function (selector) {
            var self = this,
                i, l;

            if (typeof selector !== "string") {
                return jQuery(selector).filter(function () {
                    for (i = 0, l = self.length; i < l; i++) {
                        if (jQuery.contains(self[ i ], this)) {
                            return true;
                        }
                    }
                });
            }

            var ret = this.pushStack("", "find", selector),
                length, n, r;

            for (i = 0, l = this.length; i < l; i++) {
                length = ret.length;
                jQuery.find(selector, this[i], ret);

                if (i > 0) {
                    // Make sure that the results are unique
                    for (n = length; n < ret.length; n++) {
                        for (r = 0; r < length; r++) {
                            if (ret[r] === ret[n]) {
                                ret.splice(n--, 1);
                                break;
                            }
                        }
                    }
                }
            }

            return ret;
        },

        has:function (target) {
            var targets = jQuery(target);
            return this.filter(function () {
                for (var i = 0, l = targets.length; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        not:function (selector) {
            return this.pushStack(winnow(this, selector, false), "not", selector);
        },

        filter:function (selector) {
            return this.pushStack(winnow(this, selector, true), "filter", selector);
        },

        is:function (selector) {
            return !!selector && (
                typeof selector === "string" ?
                    // If this is a positional selector, check membership in the returned set
                    // so $("p:first").is("p:last") won't return true for a doc with two "p".
                    POS.test(selector) ?
                        jQuery(selector, this.context).index(this[0]) >= 0 :
                        jQuery.filter(selector, this).length > 0 :
                    this.filter(selector).length > 0 );
        },

        closest:function (selectors, context) {
            var ret = [], i, l, cur = this[0];

            // Array (deprecated as of jQuery 1.7)
            if (jQuery.isArray(selectors)) {
                var level = 1;

                while (cur && cur.ownerDocument && cur !== context) {
                    for (i = 0; i < selectors.length; i++) {

                        if (jQuery(cur).is(selectors[ i ])) {
                            ret.push({ selector:selectors[ i ], elem:cur, level:level });
                        }
                    }

                    cur = cur.parentNode;
                    level++;
                }

                return ret;
            }

            // String
            var pos = POS.test(selectors) || typeof selectors !== "string" ?
                jQuery(selectors, context || this.context) :
                0;

            for (i = 0, l = this.length; i < l; i++) {
                cur = this[i];

                while (cur) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;

                    } else {
                        cur = cur.parentNode;
                        if (!cur || !cur.ownerDocument || cur === context || cur.nodeType === 11) {
                            break;
                        }
                    }
                }
            }

            ret = ret.length > 1 ? jQuery.unique(ret) : ret;

            return this.pushStack(ret, "closest", selectors);
        },

        // Determine the position of an element within
        // the matched set of elements
        index:function (elem) {

            // No argument, return index in parent
            if (!elem) {
                return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
            }

            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }

            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this);
        },

        add:function (selector, context) {
            var set = typeof selector === "string" ?
                    jQuery(selector, context) :
                    jQuery.makeArray(selector && selector.nodeType ? [ selector ] : selector),
                all = jQuery.merge(this.get(), set);

            return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ?
                all :
                jQuery.unique(all));
        },

        andSelf:function () {
            return this.add(this.prevObject);
        }
    });

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
    function isDisconnected(node) {
        return !node || !node.parentNode || node.parentNode.nodeType === 11;
    }

    jQuery.each({
        parent:function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents:function (elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil:function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next:function (elem) {
            return jQuery.nth(elem, 2, "nextSibling");
        },
        prev:function (elem) {
            return jQuery.nth(elem, 2, "previousSibling");
        },
        nextAll:function (elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll:function (elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil:function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil:function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings:function (elem) {
            return jQuery.sibling(( elem.parentNode || {} ).firstChild, elem);
        },
        children:function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents:function (elem) {
            return jQuery.nodeName(elem, "iframe") ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.makeArray(elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[ name ] = function (until, selector) {
            var ret = jQuery.map(this, fn, until);

            if (!runtil.test(name)) {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }

            ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique(ret) : ret;

            if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                ret = ret.reverse();
            }

            return this.pushStack(ret, name, slice.call(arguments).join(","));
        };
    });

    jQuery.extend({
        filter:function (expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")";
            }

            return elems.length === 1 ?
                jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
                jQuery.find.matches(expr, elems);
        },

        dir:function (elem, dir, until) {
            var matched = [],
                cur = elem[ dir ];

            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },

        nth:function (cur, result, dir, elem) {
            result = result || 1;
            var num = 0;

            for (; cur; cur = cur[dir]) {
                if (cur.nodeType === 1 && ++num === result) {
                    break;
                }
            }

            return cur;
        },

        sibling:function (n, elem) {
            var r = [];

            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }

            return r;
        }
    });

// Implement the identical functionality for filter and not
    function winnow(elements, qualifier, keep) {

        // Can't pass null or undefined to indexOf in Firefox 4
        // Set to 0 to skip string check
        qualifier = qualifier || 0;

        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                var retVal = !!qualifier.call(elem, i, elem);
                return retVal === keep;
            });

        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem, i) {
                return ( elem === qualifier ) === keep;
            });

        } else if (typeof qualifier === "string") {
            var filtered = jQuery.grep(elements, function (elem) {
                return elem.nodeType === 1;
            });

            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }

        return jQuery.grep(elements, function (elem, i) {
            return ( jQuery.inArray(elem, qualifier) >= 0 ) === keep;
        });
    }


    function createSafeFragment(document) {
        var list = nodeNames.split("|"),
            safeFrag = document.createDocumentFragment();

        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
            "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style)/i,
        rnocache = /<(?:script|object|embed|option|style)/i,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
    // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /\/(java|ecma)script/i,
        rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
        wrapMap = {
            option:[ 1, "<select multiple='multiple'>", "</select>" ],
            legend:[ 1, "<fieldset>", "</fieldset>" ],
            thead:[ 1, "<table>", "</table>" ],
            tr:[ 2, "<table><tbody>", "</tbody></table>" ],
            td:[ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
            col:[ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            area:[ 1, "<map>", "</map>" ],
            _default:[ 0, "", "" ]
        },
        safeFragment = createSafeFragment(document);

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
    if (!jQuery.support.htmlSerialize) {
        wrapMap._default = [ 1, "div<div>", "</div>" ];
    }

    jQuery.fn.extend({
        text:function (value) {
            return jQuery.access(this, function (value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().append(( this[0] && this[0].ownerDocument || document ).createTextNode(value));
            }, null, value, arguments.length);
        },

        wrapAll:function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {
                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function () {
                    var elem = this;

                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner:function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap:function (html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },

        unwrap:function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },

        append:function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1) {
                    this.appendChild(elem);
                }
            });
        },

        prepend:function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },

        before:function () {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function (elem) {
                    this.parentNode.insertBefore(elem, this);
                });
            } else if (arguments.length) {
                var set = jQuery.clean(arguments);
                set.push.apply(set, this.toArray());
                return this.pushStack(set, "before", arguments);
            }
        },

        after:function () {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function (elem) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                });
            } else if (arguments.length) {
                var set = this.pushStack(this, "after", arguments);
                set.push.apply(set, jQuery.clean(arguments));
                return set;
            }
        },

        // keepData is for internal use only--do not document
        remove:function (selector, keepData) {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [ elem ]).length) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        jQuery.cleanData([ elem ]);
                    }

                    if (elem.parentNode) {
                        elem.parentNode.removeChild(elem);
                    }
                }
            }

            return this;
        },

        empty:function () {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(elem.getElementsByTagName("*"));
                }

                // Remove any remaining nodes
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
            }

            return this;
        },

        clone:function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html:function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace(rinlinejQuery, "") :
                        null;
                }


                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value) ) &&
                    !wrapMap[ ( rtagName.exec(value) || ["", ""] )[1].toLowerCase() ]) {

                    value = value.replace(rxhtmlTag, "<$1></$2>");

                    try {
                        for (; i < l; i++) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(elem.getElementsByTagName("*"));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {
                    }
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith:function (value) {
            if (this[0] && this[0].parentNode) {
                // Make sure that the elements are removed from the DOM before they are inserted
                // this can help fix replacing a parent with child elements
                if (jQuery.isFunction(value)) {
                    return this.each(function (i) {
                        var self = jQuery(this), old = self.html();
                        self.replaceWith(value.call(this, i, old));
                    });
                }

                if (typeof value !== "string") {
                    value = jQuery(value).detach();
                }

                return this.each(function () {
                    var next = this.nextSibling,
                        parent = this.parentNode;

                    jQuery(this).remove();

                    if (next) {
                        jQuery(next).before(value);
                    } else {
                        jQuery(parent).append(value);
                    }
                });
            } else {
                return this.length ?
                    this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) :
                    this;
            }
        },

        detach:function (selector) {
            return this.remove(selector, true);
        },

        domManip:function (args, table, callback) {
            var results, first, fragment, parent,
                value = args[0],
                scripts = [];

            // We can't cloneNode fragments that contain checked, in WebKit
            if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                return this.each(function () {
                    jQuery(this).domManip(args, table, callback, true);
                });
            }

            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    args[0] = value.call(this, i, table ? self.html() : undefined);
                    self.domManip(args, table, callback);
                });
            }

            if (this[0]) {
                parent = value && value.parentNode;

                // If we're in a fragment, just use that instead of building a new one
                if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                    results = { fragment:parent };

                } else {
                    results = jQuery.buildFragment(args, this, scripts);
                }

                fragment = results.fragment;

                if (fragment.childNodes.length === 1) {
                    first = fragment = fragment.firstChild;
                } else {
                    first = fragment.firstChild;
                }

                if (first) {
                    table = table && jQuery.nodeName(first, "tr");

                    for (var i = 0, l = this.length, lastIndex = l - 1; i < l; i++) {
                        callback.call(
                            table ?
                                root(this[i], first) :
                                this[i],
                            // Make sure that we do not leak memory by inadvertently discarding
                            // the original fragment (which might have attached data) instead of
                            // using it; in addition, use the original fragment object for the last
                            // item instead of first because it can end up being emptied incorrectly
                            // in certain situations (Bug #8070).
                            // Fragments from the fragment cache must always be cloned and never used
                            // in place.
                            results.cacheable || ( l > 1 && i < lastIndex ) ?
                                jQuery.clone(fragment, true, true) :
                                fragment
                        );
                    }
                }

                if (scripts.length) {
                    jQuery.each(scripts, function (i, elem) {
                        if (elem.src) {
                            jQuery.ajax({
                                type:"GET",
                                global:false,
                                url:elem.src,
                                async:false,
                                dataType:"script"
                            });
                        } else {
                            jQuery.globalEval(( elem.text || elem.textContent || elem.innerHTML || "" ).replace(rcleanScript, "/*$0*/"));
                        }

                        if (elem.parentNode) {
                            elem.parentNode.removeChild(elem);
                        }
                    });
                }
            }

            return this;
        }
    });

    function root(elem, cur) {
        return jQuery.nodeName(elem, "table") ?
            (elem.getElementsByTagName("tbody")[0] ||
                elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
            elem;
    }

    function cloneCopyEvent(src, dest) {

        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }

        var type, i, l,
            oldData = jQuery._data(src),
            curData = jQuery._data(dest, oldData),
            events = oldData.events;

        if (events) {
            delete curData.handle;
            curData.events = {};

            for (type in events) {
                for (i = 0, l = events[ type ].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[ type ][ i ]);
                }
            }
        }

        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }

    function cloneFixAttributes(src, dest) {
        var nodeName;

        // We do not need to do anything for non-Elements
        if (dest.nodeType !== 1) {
            return;
        }

        // clearAttributes removes the attributes, which we don't want,
        // but also removes the attachEvent events, which we *do* want
        if (dest.clearAttributes) {
            dest.clearAttributes();
        }

        // mergeAttributes, in contrast, only merges back on the
        // original attributes, not the events
        if (dest.mergeAttributes) {
            dest.mergeAttributes(src);
        }

        nodeName = dest.nodeName.toLowerCase();

        // IE6-8 fail to clone children inside object elements that use
        // the proprietary classid attribute value (rather than the type
        // attribute) to identify the type of content to display
        if (nodeName === "object") {
            dest.outerHTML = src.outerHTML;

        } else if (nodeName === "input" && (src.type === "checkbox" || src.type === "radio")) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
            if (src.checked) {
                dest.defaultChecked = dest.checked = src.checked;
            }

            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }

            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        } else if (nodeName === "option") {
            dest.selected = src.defaultSelected;

            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;

            // IE blanks contents when cloning scripts
        } else if (nodeName === "script" && dest.text !== src.text) {
            dest.text = src.text;
        }

        // Event data gets referenced instead of copied if the expando
        // gets copied too
        dest.removeAttribute(jQuery.expando);

        // Clear flags for bubbling special change/submit events, they must
        // be reattached when the newly cloned events are first activated
        dest.removeAttribute("_submit_attached");
        dest.removeAttribute("_change_attached");
    }

    jQuery.buildFragment = function (args, nodes, scripts) {
        var fragment, cacheable, cacheresults, doc,
            first = args[ 0 ];

        // nodes may contain either an explicit document object,
        // a jQuery collection or context object.
        // If nodes[0] contains a valid object to assign to doc
        if (nodes && nodes[0]) {
            doc = nodes[0].ownerDocument || nodes[0];
        }

        // Ensure that an attr object doesn't incorrectly stand in as a document object
        // Chrome and Firefox seem to allow this to occur and will throw exception
        // Fixes #8950
        if (!doc.createDocumentFragment) {
            doc = document;
        }

        // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
        // Cloning options loses the selected state, so don't cache them
        // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
        // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
        // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
        if (args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
            first.charAt(0) === "<" && !rnocache.test(first) &&
            (jQuery.support.checkClone || !rchecked.test(first)) &&
            (jQuery.support.html5Clone || !rnoshimcache.test(first))) {

            cacheable = true;

            cacheresults = jQuery.fragments[ first ];
            if (cacheresults && cacheresults !== 1) {
                fragment = cacheresults;
            }
        }

        if (!fragment) {
            fragment = doc.createDocumentFragment();
            jQuery.clean(args, doc, fragment, scripts);
        }

        if (cacheable) {
            jQuery.fragments[ first ] = cacheresults ? fragment : 1;
        }

        return { fragment:fragment, cacheable:cacheable };
    };

    jQuery.fragments = {};

    jQuery.each({
        appendTo:"append",
        prependTo:"prepend",
        insertBefore:"before",
        insertAfter:"after",
        replaceAll:"replaceWith"
    }, function (name, original) {
        jQuery.fn[ name ] = function (selector) {
            var ret = [],
                insert = jQuery(selector),
                parent = this.length === 1 && this[0].parentNode;

            if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                insert[ original ](this[0]);
                return this;

            } else {
                for (var i = 0, l = insert.length; i < l; i++) {
                    var elems = ( i > 0 ? this.clone(true) : this ).get();
                    jQuery(insert[i])[ original ](elems);
                    ret = ret.concat(elems);
                }

                return this.pushStack(ret, name, insert.selector);
            }
        };
    });

    function getAll(elem) {
        if (typeof elem.getElementsByTagName !== "undefined") {
            return elem.getElementsByTagName("*");

        } else if (typeof elem.querySelectorAll !== "undefined") {
            return elem.querySelectorAll("*");

        } else {
            return [];
        }
    }

// Used in clean, fixes the defaultChecked property
    function fixDefaultChecked(elem) {
        if (elem.type === "checkbox" || elem.type === "radio") {
            elem.defaultChecked = elem.checked;
        }
    }

// Finds all inputs and passes them to fixDefaultChecked
    function findInputs(elem) {
        var nodeName = ( elem.nodeName || "" ).toLowerCase();
        if (nodeName === "input") {
            fixDefaultChecked(elem);
            // Skip scripts, get other children
        } else if (nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined") {
            jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
        }
    }

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
    function shimCloneNode(elem) {
        var div = document.createElement("div");
        safeFragment.appendChild(div);

        div.innerHTML = elem.outerHTML;
        return div.firstChild;
    }

    jQuery.extend({
        clone:function (elem, dataAndEvents, deepDataAndEvents) {
            var srcElements,
                destElements,
                i,
            // IE<=8 does not properly clone detached, unknown element nodes
                clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">") ?
                    elem.cloneNode(true) :
                    shimCloneNode(elem);

            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // IE copies events bound via attachEvent when using cloneNode.
                // Calling detachEvent on the clone will also remove the events
                // from the original. In order to get around this, we use some
                // proprietary methods to clear the events. Thanks to MooTools
                // guys for this hotness.

                cloneFixAttributes(elem, clone);

                // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
                srcElements = getAll(elem);
                destElements = getAll(clone);

                // Weird iteration because IE will replace the length property
                // with an element if you are cloning the body and one of the
                // elements on the page has a name or id of "length"
                for (i = 0; srcElements[i]; ++i) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        cloneFixAttributes(srcElements[i], destElements[i]);
                    }
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                cloneCopyEvent(elem, clone);

                if (deepDataAndEvents) {
                    srcElements = getAll(elem);
                    destElements = getAll(clone);

                    for (i = 0; srcElements[i]; ++i) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                }
            }

            srcElements = destElements = null;

            // Return the cloned set
            return clone;
        },

        clean:function (elems, context, fragment, scripts) {
            var checkScriptType, script, j,
                ret = [];

            context = context || document;

            // !context.createElement fails in IE with an error but returns typeof 'object'
            if (typeof context.createElement === "undefined") {
                context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
            }

            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (typeof elem === "number") {
                    elem += "";
                }

                if (!elem) {
                    continue;
                }

                // Convert html string into DOM nodes
                if (typeof elem === "string") {
                    if (!rhtml.test(elem)) {
                        elem = context.createTextNode(elem);
                    } else {
                        // Fix "XHTML"-style tags in all browsers
                        elem = elem.replace(rxhtmlTag, "<$1></$2>");

                        // Trim whitespace, otherwise indexOf won't work as expected
                        var tag = ( rtagName.exec(elem) || ["", ""] )[1].toLowerCase(),
                            wrap = wrapMap[ tag ] || wrapMap._default,
                            depth = wrap[0],
                            div = context.createElement("div"),
                            safeChildNodes = safeFragment.childNodes,
                            remove;

                        // Append wrapper element to unknown element safe doc fragment
                        if (context === document) {
                            // Use the fragment we've already created for this document
                            safeFragment.appendChild(div);
                        } else {
                            // Use a fragment created with the owner document
                            createSafeFragment(context).appendChild(div);
                        }

                        // Go to html and back, then peel off extra wrappers
                        div.innerHTML = wrap[1] + elem + wrap[2];

                        // Move to the right depth
                        while (depth--) {
                            div = div.lastChild;
                        }

                        // Remove IE's autoinserted <tbody> from table fragments
                        if (!jQuery.support.tbody) {

                            // String was a <table>, *may* have spurious <tbody>
                            var hasBody = rtbody.test(elem),
                                tbody = tag === "table" && !hasBody ?
                                    div.firstChild && div.firstChild.childNodes :

                                    // String was a bare <thead> or <tfoot>
                                    wrap[1] === "<table>" && !hasBody ?
                                        div.childNodes :
                                        [];

                            for (j = tbody.length - 1; j >= 0; --j) {
                                if (jQuery.nodeName(tbody[ j ], "tbody") && !tbody[ j ].childNodes.length) {
                                    tbody[ j ].parentNode.removeChild(tbody[ j ]);
                                }
                            }
                        }

                        // IE completely kills leading whitespace when innerHTML is used
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                        }

                        elem = div.childNodes;

                        // Clear elements from DocumentFragment (safeFragment or otherwise)
                        // to avoid hoarding elements. Fixes #11356
                        if (div) {
                            div.parentNode.removeChild(div);

                            // Guard against -1 index exceptions in FF3.6
                            if (safeChildNodes.length > 0) {
                                remove = safeChildNodes[ safeChildNodes.length - 1 ];

                                if (remove && remove.parentNode) {
                                    remove.parentNode.removeChild(remove);
                                }
                            }
                        }
                    }
                }

                // Resets defaultChecked for any radios and checkboxes
                // about to be appended to the DOM in IE 6/7 (#8060)
                var len;
                if (!jQuery.support.appendChecked) {
                    if (elem[0] && typeof (len = elem.length) === "number") {
                        for (j = 0; j < len; j++) {
                            findInputs(elem[j]);
                        }
                    } else {
                        findInputs(elem);
                    }
                }

                if (elem.nodeType) {
                    ret.push(elem);
                } else {
                    ret = jQuery.merge(ret, elem);
                }
            }

            if (fragment) {
                checkScriptType = function (elem) {
                    return !elem.type || rscriptType.test(elem.type);
                };
                for (i = 0; ret[i]; i++) {
                    script = ret[i];
                    if (scripts && jQuery.nodeName(script, "script") && (!script.type || rscriptType.test(script.type))) {
                        scripts.push(script.parentNode ? script.parentNode.removeChild(script) : script);

                    } else {
                        if (script.nodeType === 1) {
                            var jsTags = jQuery.grep(script.getElementsByTagName("script"), checkScriptType);

                            ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
                        }
                        fragment.appendChild(script);
                    }
                }
            }

            return ret;
        },

        cleanData:function (elems) {
            var data, id,
                cache = jQuery.cache,
                special = jQuery.event.special,
                deleteExpando = jQuery.support.deleteExpando;

            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                    continue;
                }

                id = elem[ jQuery.expando ];

                if (id) {
                    data = cache[ id ];

                    if (data && data.events) {
                        for (var type in data.events) {
                            if (special[ type ]) {
                                jQuery.event.remove(elem, type);

                                // This is a shortcut to avoid jQuery.event.remove's overhead
                            } else {
                                jQuery.removeEvent(elem, type, data.handle);
                            }
                        }

                        // Null the DOM reference to avoid IE6/7/8 leak (#7054)
                        if (data.handle) {
                            data.handle.elem = null;
                        }
                    }

                    if (deleteExpando) {
                        delete elem[ jQuery.expando ];

                    } else if (elem.removeAttribute) {
                        elem.removeAttribute(jQuery.expando);
                    }

                    delete cache[ id ];
                }
            }
        }
    });


    var ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity=([^)]*)/,
    // fixed for IE9, see #8346
        rupper = /([A-Z]|^ms)/g,
        rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
        rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
        rrelNum = /^([\-+])=([\-+.\de]+)/,
        rmargin = /^margin/,

        cssShow = { position:"absolute", visibility:"hidden", display:"block" },

    // order is important!
        cssExpand = [ "Top", "Right", "Bottom", "Left" ],

        curCSS,

        getComputedStyle,
        currentStyle;

    jQuery.fn.css = function (name, value) {
        return jQuery.access(this, function (elem, name, value) {
            return value !== undefined ?
                jQuery.style(elem, name, value) :
                jQuery.css(elem, name);
        }, name, value, arguments.length > 1);
    };

    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks:{
            opacity:{
                get:function (elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;

                    } else {
                        return elem.style.opacity;
                    }
                }
            }
        },

        // Exclude the following css properties to add px
        cssNumber:{
            "fillOpacity":true,
            "fontWeight":true,
            "lineHeight":true,
            "opacity":true,
            "orphans":true,
            "widows":true,
            "zIndex":true,
            "zoom":true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps:{
            // normalize float css property
            "float":jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },

        // Get and set the style property on a DOM Node
        style:function (elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, origName = jQuery.camelCase(name),
                style = elem.style, hooks = jQuery.cssHooks[ origName ];

            name = jQuery.cssProps[ origName ] || origName;

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // convert relative number strings (+= or -=) to relative numbers. #7345
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat(jQuery.css(elem, name));
                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that NaN and null values aren't set. See: #7116
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }

                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if (type === "number" && !jQuery.cssNumber[ origName ]) {
                    value += "px";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[ name ] = value;
                    } catch (e) {
                    }
                }

            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },

        css:function (elem, name, extra) {
            var ret, hooks;

            // Make sure that we're working with the right name
            name = jQuery.camelCase(name);
            hooks = jQuery.cssHooks[ name ];
            name = jQuery.cssProps[ name ] || name;

            // cssFloat needs a special treatment
            if (name === "cssFloat") {
                name = "float";
            }

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
                return ret;

                // Otherwise, if a way to get the computed value exists, use that
            } else if (curCSS) {
                return curCSS(elem, name);
            }
        },

        // A method for quickly swapping in/out CSS properties to get correct calculations
        swap:function (elem, options, callback) {
            var old = {},
                ret, name;

            // Remember the old values, and insert the new ones
            for (name in options) {
                old[ name ] = elem.style[ name ];
                elem.style[ name ] = options[ name ];
            }

            ret = callback.call(elem);

            // Revert the old values
            for (name in options) {
                elem.style[ name ] = old[ name ];
            }

            return ret;
        }
    });

// DEPRECATED in 1.3, Use jQuery.css() instead
    jQuery.curCSS = jQuery.css;

    if (document.defaultView && document.defaultView.getComputedStyle) {
        getComputedStyle = function (elem, name) {
            var ret, defaultView, computedStyle, width,
                style = elem.style;

            name = name.replace(rupper, "-$1").toLowerCase();

            if ((defaultView = elem.ownerDocument.defaultView) &&
                (computedStyle = defaultView.getComputedStyle(elem, null))) {

                ret = computedStyle.getPropertyValue(name);
                if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                    ret = jQuery.style(elem, name);
                }
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
            // which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
            if (!jQuery.support.pixelMargin && computedStyle && rmargin.test(name) && rnumnonpx.test(ret)) {
                width = style.width;
                style.width = ret;
                ret = computedStyle.width;
                style.width = width;
            }

            return ret;
        };
    }

    if (document.documentElement.currentStyle) {
        currentStyle = function (elem, name) {
            var left, rsLeft, uncomputed,
                ret = elem.currentStyle && elem.currentStyle[ name ],
                style = elem.style;

            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && (uncomputed = style[ name ])) {
                ret = uncomputed;
            }

            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            if (rnumnonpx.test(ret)) {

                // Remember the original values
                left = style.left;
                rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

                // Put in the new values to get a computed value out
                if (rsLeft) {
                    elem.runtimeStyle.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";

                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    elem.runtimeStyle.left = rsLeft;
                }
            }

            return ret === "" ? "auto" : ret;
        };
    }

    curCSS = getComputedStyle || currentStyle;

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property
        var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            i = name === "width" ? 1 : 0,
            len = 4;

        if (val > 0) {
            if (extra !== "border") {
                for (; i < len; i += 2) {
                    if (!extra) {
                        val -= parseFloat(jQuery.css(elem, "padding" + cssExpand[ i ])) || 0;
                    }
                    if (extra === "margin") {
                        val += parseFloat(jQuery.css(elem, extra + cssExpand[ i ])) || 0;
                    } else {
                        val -= parseFloat(jQuery.css(elem, "border" + cssExpand[ i ] + "Width")) || 0;
                    }
                }
            }

            return val + "px";
        }

        // Fall back to computed then uncomputed css if necessary
        val = curCSS(elem, name);
        if (val < 0 || val == null) {
            val = elem.style[ name ];
        }

        // Computed unit is not pixels. Stop here and return.
        if (rnumnonpx.test(val)) {
            return val;
        }

        // Normalize "", auto, and prepare for extra
        val = parseFloat(val) || 0;

        // Add padding, border, margin
        if (extra) {
            for (; i < len; i += 2) {
                val += parseFloat(jQuery.css(elem, "padding" + cssExpand[ i ])) || 0;
                if (extra !== "padding") {
                    val += parseFloat(jQuery.css(elem, "border" + cssExpand[ i ] + "Width")) || 0;
                }
                if (extra === "margin") {
                    val += parseFloat(jQuery.css(elem, extra + cssExpand[ i ])) || 0;
                }
            }
        }

        return val + "px";
    }

    jQuery.each([ "height", "width" ], function (i, name) {
        jQuery.cssHooks[ name ] = {
            get:function (elem, computed, extra) {
                if (computed) {
                    if (elem.offsetWidth !== 0) {
                        return getWidthOrHeight(elem, name, extra);
                    } else {
                        return jQuery.swap(elem, cssShow, function () {
                            return getWidthOrHeight(elem, name, extra);
                        });
                    }
                }
            },

            set:function (elem, value) {
                return rnum.test(value) ?
                    value + "px" :
                    value;
            }
        };
    });

    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get:function (elem, computed) {
                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
                    ( parseFloat(RegExp.$1) / 100 ) + "" :
                    computed ? "1" : "";
            },

            set:function (elem, value) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";

                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;

                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "") {

                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute("filter");

                    // if there there is no filter style applied in a css rule, we are done
                    if (currentStyle && !currentStyle.filter) {
                        return;
                    }
                }

                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ?
                    filter.replace(ralpha, opacity) :
                    filter + " " + opacity;
            }
        };
    }

    jQuery(function () {
        // This hook cannot be added until DOM ready because the support test
        // for it is not run until after DOM ready
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get:function (elem, computed) {
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    // Work around by temporarily setting element display to inline-block
                    return jQuery.swap(elem, { "display":"inline-block" }, function () {
                        if (computed) {
                            return curCSS(elem, "margin-right");
                        } else {
                            return elem.style.marginRight;
                        }
                    });
                }
            };
        }
    });

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            var width = elem.offsetWidth,
                height = elem.offsetHeight;

            return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, "display")) === "none");
        };

        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }

// These hooks are used by animate to expand properties
    jQuery.each({
        margin:"",
        padding:"",
        border:"Width"
    }, function (prefix, suffix) {

        jQuery.cssHooks[ prefix + suffix ] = {
            expand:function (value) {
                var i,

                // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [ value ],
                    expanded = {};

                for (i = 0; i < 4; i++) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }

                return expanded;
            }
        };
    });


    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rhash = /#.*$/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
        rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
    // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rquery = /\?/,
        rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        rselectTextarea = /^(?:select|textarea)/i,
        rspacesAjax = /\s+/,
        rts = /([?&])_=[^&]*/,
        rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

    // Keep a copy of the old load method
        _load = jQuery.fn.load,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
        prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
        transports = {},

    // Document location
        ajaxLocation,

    // Document location segments
        ajaxLocParts,

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch (e) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }

// Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            if (jQuery.isFunction(func)) {
                var dataTypes = dataTypeExpression.toLowerCase().split(rspacesAjax),
                    i = 0,
                    length = dataTypes.length,
                    dataType,
                    list,
                    placeBefore;

                // For each dataType in the dataTypeExpression
                for (; i < length; i++) {
                    dataType = dataTypes[ i ];
                    // We control if we're asked to add before
                    // any existing element
                    placeBefore = /^\+/.test(dataType);
                    if (placeBefore) {
                        dataType = dataType.substr(1) || "*";
                    }
                    list = structure[ dataType ] = structure[ dataType ] || [];
                    // then we add to the structure accordingly
                    list[ placeBefore ? "unshift" : "push" ](func);
                }
            }
        };
    }

// Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType /* internal */, inspected /* internal */) {

        dataType = dataType || options.dataTypes[ 0 ];
        inspected = inspected || {};

        inspected[ dataType ] = true;

        var list = structure[ dataType ],
            i = 0,
            length = list ? list.length : 0,
            executeOnly = ( structure === prefilters ),
            selection;

        for (; i < length && ( executeOnly || !selection ); i++) {
            selection = list[ i ](options, originalOptions, jqXHR);
            // If we got redirected to another dataType
            // we try there if executing only and not done already
            if (typeof selection === "string") {
                if (!executeOnly || inspected[ selection ]) {
                    selection = undefined;
                } else {
                    options.dataTypes.unshift(selection);
                    selection = inspectPrefiltersOrTransports(
                        structure, options, originalOptions, jqXHR, selection, inspected);
                }
            }
        }
        // If we're only executing or nothing was selected
        // we try the catchall dataType if not done already
        if (( executeOnly || !selection ) && !inspected[ "*" ]) {
            selection = inspectPrefiltersOrTransports(
                structure, options, originalOptions, jqXHR, "*", inspected);
        }
        // unnecessary when only executing (prefilters)
        // but it'll be ignored by the caller in that case
        return selection;
    }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[ key ] !== undefined) {
                ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
    }

    jQuery.fn.extend({
        load:function (url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments);

                // Don't do a request if no elements are being requested
            } else if (!this.length) {
                return this;
            }

            var off = url.indexOf(" ");
            if (off >= 0) {
                var selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }

            // Default to a GET request
            var type = "GET";

            // If the second parameter was provided
            if (params) {
                // If it's a function
                if (jQuery.isFunction(params)) {
                    // We assume that it's the callback
                    callback = params;
                    params = undefined;

                    // Otherwise, build a param string
                } else if (typeof params === "object") {
                    params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                    type = "POST";
                }
            }

            var self = this;

            // Request the remote document
            jQuery.ajax({
                url:url,
                type:type,
                dataType:"html",
                data:params,
                // Complete callback (responseText is used internally)
                complete:function (jqXHR, status, responseText) {
                    // Store the response as specified by the jqXHR object
                    responseText = jqXHR.responseText;
                    // If successful, inject the HTML into all the matched elements
                    if (jqXHR.isResolved()) {
                        // #4825: Get the actual response in case
                        // a dataFilter is present in ajaxSettings
                        jqXHR.done(function (r) {
                            responseText = r;
                        });
                        // See if a selector was specified
                        self.html(selector ?
                            // Create a dummy div to hold the results
                            jQuery("<div>")
                                // inject the contents of the document in, removing the scripts
                                // to avoid any 'Permission Denied' errors in IE
                                .append(responseText.replace(rscript, ""))

                                // Locate the specified elements
                                .find(selector) :

                            // If not, just inject the full result
                            responseText);
                    }

                    if (callback) {
                        self.each(callback, [ responseText, status, jqXHR ]);
                    }
                }
            });

            return this;
        },

        serialize:function () {
            return jQuery.param(this.serializeArray());
        },

        serializeArray:function () {
            return this.map(function () {
                return this.elements ? jQuery.makeArray(this.elements) : this;
            })
                .filter(function () {
                    return this.name && !this.disabled &&
                        ( this.checked || rselectTextarea.test(this.nodeName) ||
                            rinput.test(this.type) );
                })
                .map(function (i, elem) {
                    var val = jQuery(this).val();

                    return val == null ?
                        null :
                        jQuery.isArray(val) ?
                            jQuery.map(val, function (val, i) {
                                return { name:elem.name, value:val.replace(rCRLF, "\r\n") };
                            }) :
                        { name:elem.name, value:val.replace(rCRLF, "\r\n") };
                }).get();
        }
    });

// Attach a bunch of functions for handling common AJAX events
    jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
        jQuery.fn[ o ] = function (f) {
            return this.on(o, f);
        };
    });

    jQuery.each([ "get", "post" ], function (i, method) {
        jQuery[ method ] = function (url, data, callback, type) {
            // shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            return jQuery.ajax({
                type:method,
                url:url,
                data:data,
                success:callback,
                dataType:type
            });
        };
    });

    jQuery.extend({

        getScript:function (url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        },

        getJSON:function (url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup:function (target, settings) {
            if (settings) {
                // Building a settings object
                ajaxExtend(target, jQuery.ajaxSettings);
            } else {
                // Extending ajaxSettings
                settings = target;
                target = jQuery.ajaxSettings;
            }
            ajaxExtend(target, settings);
            return target;
        },

        ajaxSettings:{
            url:ajaxLocation,
            isLocal:rlocalProtocol.test(ajaxLocParts[ 1 ]),
            global:true,
            type:"GET",
            contentType:"application/x-www-form-urlencoded; charset=UTF-8",
            processData:true,
            async:true,
            /*
             timeout: 0,
             data: null,
             dataType: null,
             username: null,
             password: null,
             cache: null,
             traditional: false,
             headers: {},
             */

            accepts:{
                xml:"application/xml, text/xml",
                html:"text/html",
                text:"text/plain",
                json:"application/json, text/javascript",
                "*":allTypes
            },

            contents:{
                xml:/xml/,
                html:/html/,
                json:/json/
            },

            responseFields:{
                xml:"responseXML",
                text:"responseText"
            },

            // List of data converters
            // 1) key format is "source_type destination_type" (a single space in-between)
            // 2) the catchall symbol "*" can be used for source_type
            converters:{

                // Convert anything to text
                "* text":window.String,

                // Text to html (true = no transformation)
                "text html":true,

                // Evaluate text as a json expression
                "text json":jQuery.parseJSON,

                // Parse text as xml
                "text xml":jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions:{
                context:true,
                url:true
            }
        },

        ajaxPrefilter:addToPrefiltersOrTransports(prefilters),
        ajaxTransport:addToPrefiltersOrTransports(transports),

        // Main method
        ajax:function (url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var // Create the final options object
                s = jQuery.ajaxSetup({}, options),
            // Callbacks context
                callbackContext = s.context || s,
            // Context for global events
            // It's the callbackContext if one was provided in the options
            // and if it's a DOM node or a jQuery collection
                globalEventContext = callbackContext !== s &&
                    ( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
                    jQuery(callbackContext) : jQuery.event,
            // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
            // Status-dependent callbacks
                statusCode = s.statusCode || {},
            // ifModified key
                ifModifiedKey,
            // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
            // Response headers
                responseHeadersString,
                responseHeaders,
            // transport
                transport,
            // timeout handle
                timeoutTimer,
            // Cross-domain detection vars
                parts,
            // The jqXHR state
                state = 0,
            // To know if global events are to be dispatched
                fireGlobals,
            // Loop variable
                i,
            // Fake xhr
                jqXHR = {

                    readyState:0,

                    // Caches the header
                    setRequestHeader:function (name, value) {
                        if (!state) {
                            var lname = name.toLowerCase();
                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },

                    // Raw string
                    getAllResponseHeaders:function () {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Builds headers hashtable if needed
                    getResponseHeader:function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (( match = rheaders.exec(responseHeadersString) )) {
                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() ];
                        }
                        return match === undefined ? null : match;
                    },

                    // Overrides response content-type header
                    overrideMimeType:function (type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Cancel the request
                    abort:function (statusText) {
                        statusText = statusText || "abort";
                        if (transport) {
                            transport.abort(statusText);
                        }
                        done(0, statusText);
                        return this;
                    }
                };

            // Callback for when everything is done
            // It is defined here because jslint complains if it is declared
            // at the end of the function (which would be more logical and readable)
            function done(status, nativeStatusText, responses, headers) {

                // Called once
                if (state === 2) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                var isSuccess,
                    success,
                    error,
                    statusText = nativeStatusText,
                    response = responses ? ajaxHandleResponses(s, jqXHR, responses) : undefined,
                    lastModified,
                    etag;

                // If successful, handle type chaining
                if (status >= 200 && status < 300 || status === 304) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {

                        if (( lastModified = jqXHR.getResponseHeader("Last-Modified") )) {
                            jQuery.lastModified[ ifModifiedKey ] = lastModified;
                        }
                        if (( etag = jqXHR.getResponseHeader("Etag") )) {
                            jQuery.etag[ ifModifiedKey ] = etag;
                        }
                    }

                    // If not modified
                    if (status === 304) {

                        statusText = "notmodified";
                        isSuccess = true;

                        // If we have data
                    } else {

                        try {
                            success = ajaxConvert(s, response);
                            statusText = "success";
                            isSuccess = true;
                        } catch (e) {
                            // We have a parsererror
                            statusText = "parsererror";
                            error = e;
                        }
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (!statusText || status) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = "" + ( nativeStatusText || statusText );

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger("ajax" + ( isSuccess ? "Success" : "Error" ),
                        [ jqXHR, s, isSuccess ? success : error ]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    // Handle the global AJAX counter
                    if (!( --jQuery.active )) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            // Attach deferreds
            deferred.promise(jqXHR);
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            jqXHR.complete = completeDeferred.add;

            // Status-dependent callbacks
            jqXHR.statusCode = function (map) {
                if (map) {
                    var tmp;
                    if (state < 2) {
                        for (tmp in map) {
                            statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
                        }
                    } else {
                        tmp = map[ jqXHR.status ];
                        jqXHR.then(tmp, tmp);
                    }
                }
                return this;
            };

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // We also use the url parameter if available
            s.url = ( ( url || s.url ) + "" ).replace(rhash, "").replace(rprotocol, ajaxLocParts[ 1 ] + "//");

            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);

            // Determine if a cross-domain request is in order
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!( parts &&
                    ( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
                        ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
                    );
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return false;
            }

            // We can fire global events as of now if asked to
            fireGlobals = s.global;

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                if (s.data) {
                    s.url += ( rquery.test(s.url) ? "&" : "?" ) + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Get ifModifiedKey before adding the anti-cache parameter
                ifModifiedKey = s.url;

                // Add anti-cache in url if needed
                if (s.cache === false) {

                    var ts = jQuery.now(),
                    // try replacing _= if it is there
                        ret = s.url.replace(rts, "$1_=" + ts);

                    // if nothing was replaced, add timestamp to the end
                    s.url = ret + ( ( ret === s.url ) ? ( rquery.test(s.url) ? "&" : "?" ) + "_=" + ts : "" );
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                ifModifiedKey = ifModifiedKey || s.url;
                if (jQuery.lastModified[ ifModifiedKey ]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ ifModifiedKey ]);
                }
                if (jQuery.etag[ ifModifiedKey ]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ ifModifiedKey ]);
                }
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[ i ]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && ( s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2 )) {
                // Abort if not done already
                jqXHR.abort();
                return false;

            }

            // Install callbacks on deferreds
            for (i in { success:1, error:1, complete:1 }) {
                jqXHR[ i ](s[ i ]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);
                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            return jqXHR;
        },

        // Serialize an array of form elements or a set of
        // key/values into a query string
        param:function (a, traditional) {
            var s = [],
                add = function (key, value) {
                    // If value is a function, invoke it and return its value
                    value = jQuery.isFunction(value) ? value() : value;
                    s[ s.length ] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
                };

            // Set traditional to true for jQuery <= 1.3.2 behavior.
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings.traditional;
            }

            // If an array was passed in, assume that it is an array of form elements.
            if (jQuery.isArray(a) || ( a.jquery && !jQuery.isPlainObject(a) )) {
                // Serialize the form elements
                jQuery.each(a, function () {
                    add(this.name, this.value);
                });

            } else {
                // If traditional, encode the "old" way (the way 1.3.2 or older
                // did it), otherwise encode params recursively.
                for (var prefix in a) {
                    buildParams(prefix, a[ prefix ], traditional, add);
                }
            }

            // Return the resulting serialization
            return s.join("&").replace(r20, "+");
        }
    });

    function buildParams(prefix, obj, traditional, add) {
        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {
                    // If array item is non-scalar (array or object), encode its
                    // numeric index to resolve deserialization ambiguity issues.
                    // Note that rack (as of 1.0.0) can't currently deserialize
                    // nested arrays properly, and attempting to do so may cause
                    // a server error. Possible fixes are to modify rack's
                    // deserialization algorithm or to provide an option or flag
                    // to force array serialization to be shallow.
                    buildParams(prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add);
                }
            });

        } else if (!traditional && jQuery.type(obj) === "object") {
            // Serialize object item.
            for (var name in obj) {
                buildParams(prefix + "[" + name + "]", obj[ name ], traditional, add);
            }

        } else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
    jQuery.extend({

        // Counter for holding the number of active queries
        active:0,

        // Last-Modified header cache for next request
        lastModified:{},
        etag:{}

    });

    /* Handles responses to an ajax request:
     * - sets all responseXXX fields accordingly
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {

        var contents = s.contents,
            dataTypes = s.dataTypes,
            responseFields = s.responseFields,
            ct,
            type,
            finalDataType,
            firstDataType;

        // Fill responseXXX fields
        for (type in responseFields) {
            if (type in responses) {
                jqXHR[ responseFields[type] ] = responses[ type ];
            }
        }

        // Remove auto dataType and get content-type in the process
        while (dataTypes[ 0 ] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("content-type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[ type ] && contents[ type ].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[ 0 ] in responses) {
            finalDataType = dataTypes[ 0 ];
        } else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[ 0 ]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[ finalDataType ];
        }
    }

// Chain conversions given the request and the original response
    function ajaxConvert(s, response) {

        // Apply the dataFilter if provided
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }

        var dataTypes = s.dataTypes,
            converters = {},
            i,
            key,
            length = dataTypes.length,
            tmp,
        // Current and previous dataTypes
            current = dataTypes[ 0 ],
            prev,
        // Conversion expression
            conversion,
        // Conversion function
            conv,
        // Conversion functions (transitive conversion)
            conv1,
            conv2;

        // For each dataType in the chain
        for (i = 1; i < length; i++) {

            // Create converters map
            // with lowercased keys
            if (i === 1) {
                for (key in s.converters) {
                    if (typeof key === "string") {
                        converters[ key.toLowerCase() ] = s.converters[ key ];
                    }
                }
            }

            // Get the dataTypes
            prev = current;
            current = dataTypes[ i ];

            // If current is auto dataType, update it to prev
            if (current === "*") {
                current = prev;
                // If no auto and dataTypes are actually different
            } else if (prev !== "*" && prev !== current) {

                // Get the converter
                conversion = prev + " " + current;
                conv = converters[ conversion ] || converters[ "* " + current ];

                // If there is no direct converter, search transitively
                if (!conv) {
                    conv2 = undefined;
                    for (conv1 in converters) {
                        tmp = conv1.split(" ");
                        if (tmp[ 0 ] === prev || tmp[ 0 ] === "*") {
                            conv2 = converters[ tmp[1] + " " + current ];
                            if (conv2) {
                                conv1 = converters[ conv1 ];
                                if (conv1 === true) {
                                    conv = conv2;
                                } else if (conv2 === true) {
                                    conv = conv1;
                                }
                                break;
                            }
                        }
                    }
                }
                // If we found no converter, dispatch an error
                if (!( conv || conv2 )) {
                    jQuery.error("No conversion from " + conversion.replace(" ", " to "));
                }
                // If found converter is not an equivalence
                if (conv !== true) {
                    // Convert with 1 or 2 converters accordingly
                    response = conv ? conv(response) : conv2(conv1(response));
                }
            }
        }
        return response;
    }


    var jsc = jQuery.now(),
        jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
    jQuery.ajaxSetup({
        jsonp:"callback",
        jsonpCallback:function () {
            return jQuery.expando + "_" + ( jsc++ );
        }
    });

// Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

        var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test(s.contentType);

        if (s.dataTypes[ 0 ] === "jsonp" ||
            s.jsonp !== false && ( jsre.test(s.url) ||
                inspectData && jsre.test(s.data) )) {

            var responseContainer,
                jsonpCallback = s.jsonpCallback =
                    jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback,
                previous = window[ jsonpCallback ],
                url = s.url,
                data = s.data,
                replace = "$1" + jsonpCallback + "$2";

            if (s.jsonp !== false) {
                url = url.replace(jsre, replace);
                if (s.url === url) {
                    if (inspectData) {
                        data = data.replace(jsre, replace);
                    }
                    if (s.data === data) {
                        // Add callback manually
                        url += (/\?/.test(url) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
                    }
                }
            }

            s.url = url;
            s.data = data;

            // Install callback
            window[ jsonpCallback ] = function (response) {
                responseContainer = [ response ];
            };

            // Clean-up function
            jqXHR.always(function () {
                // Set callback back to previous value
                window[ jsonpCallback ] = previous;
                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(previous)) {
                    window[ jsonpCallback ](responseContainer[ 0 ]);
                }
            });

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(jsonpCallback + " was not called");
                }
                return responseContainer[ 0 ];
            };

            // force json dataType
            s.dataTypes[ 0 ] = "json";

            // Delegate to script
            return "script";
        }
    });


// Install script dataType
    jQuery.ajaxSetup({
        accepts:{
            script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents:{
            script:/javascript|ecmascript/
        },
        converters:{
            "text script":function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

// Handle cache's special case and global
    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });

// Bind script tag hack transport
    jQuery.ajaxTransport("script", function (s) {

        // This transport only deals with cross domain requests
        if (s.crossDomain) {

            var script,
                head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;

            return {

                send:function (_, callback) {

                    script = document.createElement("script");

                    script.async = "async";

                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function (_, isAbort) {

                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;

                            // Remove the script
                            if (head && script.parentNode) {
                                head.removeChild(script);
                            }

                            // Dereference the script
                            script = undefined;

                            // Callback if not abort
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
                    // This arises when a base node is used (#2709 and #4378).
                    head.insertBefore(script, head.firstChild);
                },

                abort:function () {
                    if (script) {
                        script.onload(0, 1);
                    }
                }
            };
        }
    });


    var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject ? function () {
            // Abort all pending requests
            for (var key in xhrCallbacks) {
                xhrCallbacks[ key ](0, 1);
            }
        } : false,
        xhrId = 0,
        xhrCallbacks;

// Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {
        }
    }

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function () {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;

// Determine support properties
    (function (xhr) {
        jQuery.extend(jQuery.support, {
            ajax:!!xhr,
            cors:!!xhr && ( "withCredentials" in xhr )
        });
    })(jQuery.ajaxSettings.xhr());

// Create transport if the browser can provide an xhr
    if (jQuery.support.ajax) {

        jQuery.ajaxTransport(function (s) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if (!s.crossDomain || jQuery.support.cors) {

                var callback;

                return {
                    send:function (headers, complete) {

                        // Get a new xhr
                        var xhr = s.xhr(),
                            handle,
                            i;

                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }

                        // Apply custom fields if provided
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[ i ] = s.xhrFields[ i ];
                            }
                        }

                        // Override mime type if needed
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }

                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers[ "X-Requested-With" ] = "XMLHttpRequest";
                        }

                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[ i ]);
                            }
                        } catch (_) {
                        }

                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send(( s.hasContent && s.data ) || null);

                        // Listener
                        callback = function (_, isAbort) {

                            var status,
                                statusText,
                                responseHeaders,
                                responses,
                                xml;

                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occured
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {

                                // Was never called and is aborted or complete
                                if (callback && ( isAbort || xhr.readyState === 4 )) {

                                    // Only called once
                                    callback = undefined;

                                    // Do not keep as active anymore
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[ handle ];
                                        }
                                    }

                                    // If it's an abort
                                    if (isAbort) {
                                        // Abort it manually if needed
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        responses = {};
                                        xml = xhr.responseXML;

                                        // Construct response list
                                        if (xml && xml.documentElement /* #4958 */) {
                                            responses.xml = xml;
                                        }

                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        try {
                                            responses.text = xhr.responseText;
                                        } catch (_) {
                                        }

                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }

                                        // Filter status for non standard behaviors

                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                            // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }

                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };

                        // if we're in sync mode or it's in cache
                        // and has been retrieved directly (IE6 & IE7)
                        // we need to manually fire the callback
                        if (!s.async || xhr.readyState === 4) {
                            callback();
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[ handle ] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },

                    abort:function () {
                        if (callback) {
                            callback(0, 1);
                        }
                    }
                };
            }
        });
    }


    var elemdisplay = {},
        iframe, iframeDoc,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
        timerId,
        fxAttrs = [
            // height animations
            [ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
            // width animations
            [ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
            // opacity animations
            [ "opacity" ]
        ],
        fxNow;

    jQuery.fn.extend({
        show:function (speed, easing, callback) {
            var elem, display;

            if (speed || speed === 0) {
                return this.animate(genFx("show", 3), speed, easing, callback);

            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    elem = this[ i ];

                    if (elem.style) {
                        display = elem.style.display;

                        // Reset the inline display of this element to learn if it is
                        // being hidden by cascaded rules or not
                        if (!jQuery._data(elem, "olddisplay") && display === "none") {
                            display = elem.style.display = "";
                        }

                        // Set elements which have been overridden with display: none
                        // in a stylesheet to whatever the default browser style is
                        // for such an element
                        if ((display === "" && jQuery.css(elem, "display") === "none") ||
                            !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                            jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                        }
                    }
                }

                // Set the display of most of the elements in a second loop
                // to avoid the constant reflow
                for (i = 0; i < j; i++) {
                    elem = this[ i ];

                    if (elem.style) {
                        display = elem.style.display;

                        if (display === "" || display === "none") {
                            elem.style.display = jQuery._data(elem, "olddisplay") || "";
                        }
                    }
                }

                return this;
            }
        },

        hide:function (speed, easing, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("hide", 3), speed, easing, callback);

            } else {
                var elem, display,
                    i = 0,
                    j = this.length;

                for (; i < j; i++) {
                    elem = this[i];
                    if (elem.style) {
                        display = jQuery.css(elem, "display");

                        if (display !== "none" && !jQuery._data(elem, "olddisplay")) {
                            jQuery._data(elem, "olddisplay", display);
                        }
                    }
                }

                // Set the display of the elements in a second loop
                // to avoid the constant reflow
                for (i = 0; i < j; i++) {
                    if (this[i].style) {
                        this[i].style.display = "none";
                    }
                }

                return this;
            }
        },

        // Save the old toggle function
        _toggle:jQuery.fn.toggle,

        toggle:function (fn, fn2, callback) {
            var bool = typeof fn === "boolean";

            if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                this._toggle.apply(this, arguments);

            } else if (fn == null || bool) {
                this.each(function () {
                    var state = bool ? fn : jQuery(this).is(":hidden");
                    jQuery(this)[ state ? "show" : "hide" ]();
                });

            } else {
                this.animate(genFx("toggle", 3), fn, fn2, callback);
            }

            return this;
        },

        fadeTo:function (speed, to, easing, callback) {
            return this.filter(":hidden").css("opacity", 0).show().end()
                .animate({opacity:to}, speed, easing, callback);
        },

        animate:function (prop, speed, easing, callback) {
            var optall = jQuery.speed(speed, easing, callback);

            if (jQuery.isEmptyObject(prop)) {
                return this.each(optall.complete, [ false ]);
            }

            // Do not change referenced properties as per-property easing will be lost
            prop = jQuery.extend({}, prop);

            function doAnimation() {
                // XXX 'this' does not always have a nodeName when running the
                // test suite

                if (optall.queue === false) {
                    jQuery._mark(this);
                }

                var opt = jQuery.extend({}, optall),
                    isElement = this.nodeType === 1,
                    hidden = isElement && jQuery(this).is(":hidden"),
                    name, val, p, e, hooks, replace,
                    parts, start, end, unit,
                    method;

                // will store per property easing and be used to determine when an animation is complete
                opt.animatedProperties = {};

                // first pass over propertys to expand / normalize
                for (p in prop) {
                    name = jQuery.camelCase(p);
                    if (p !== name) {
                        prop[ name ] = prop[ p ];
                        delete prop[ p ];
                    }

                    if (( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks) {
                        replace = hooks.expand(prop[ name ]);
                        delete prop[ name ];

                        // not quite $.extend, this wont overwrite keys already present.
                        // also - reusing 'p' from above because we have the correct "name"
                        for (p in replace) {
                            if (!( p in prop )) {
                                prop[ p ] = replace[ p ];
                            }
                        }
                    }
                }

                for (name in prop) {
                    val = prop[ name ];
                    // easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
                    if (jQuery.isArray(val)) {
                        opt.animatedProperties[ name ] = val[ 1 ];
                        val = prop[ name ] = val[ 0 ];
                    } else {
                        opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
                    }

                    if (val === "hide" && hidden || val === "show" && !hidden) {
                        return opt.complete.call(this);
                    }

                    if (isElement && ( name === "height" || name === "width" )) {
                        // Make sure that nothing sneaks out
                        // Record all 3 overflow attributes because IE does not
                        // change the overflow attribute when overflowX and
                        // overflowY are set to the same value
                        opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

                        // Set display property to inline-block for height/width
                        // animations on inline elements that are having width/height animated
                        if (jQuery.css(this, "display") === "inline" &&
                            jQuery.css(this, "float") === "none") {

                            // inline-level elements accept inline-block;
                            // block-level elements need to be inline with layout
                            if (!jQuery.support.inlineBlockNeedsLayout || defaultDisplay(this.nodeName) === "inline") {
                                this.style.display = "inline-block";

                            } else {
                                this.style.zoom = 1;
                            }
                        }
                    }
                }

                if (opt.overflow != null) {
                    this.style.overflow = "hidden";
                }

                for (p in prop) {
                    e = new jQuery.fx(this, opt, p);
                    val = prop[ p ];

                    if (rfxtypes.test(val)) {

                        // Tracks whether to show or hide based on private
                        // data attached to the element
                        method = jQuery._data(this, "toggle" + p) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
                        if (method) {
                            jQuery._data(this, "toggle" + p, method === "show" ? "hide" : "show");
                            e[ method ]();
                        } else {
                            e[ val ]();
                        }

                    } else {
                        parts = rfxnum.exec(val);
                        start = e.cur();

                        if (parts) {
                            end = parseFloat(parts[2]);
                            unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

                            // We need to compute starting value
                            if (unit !== "px") {
                                jQuery.style(this, p, (end || 1) + unit);
                                start = ( (end || 1) / e.cur() ) * start;
                                jQuery.style(this, p, start + unit);
                            }

                            // If a +=/-= token was provided, we're doing a relative animation
                            if (parts[1]) {
                                end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
                            }

                            e.custom(start, end, unit);

                        } else {
                            e.custom(start, val, "");
                        }
                    }
                }

                // For JS strict compliance
                return true;
            }

            return optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },

        stop:function (type, clearQueue, gotoEnd) {
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function () {
                var index,
                    hadTimers = false,
                    timers = jQuery.timers,
                    data = jQuery._data(this);

                // clear marker counters if we know they won't be
                if (!gotoEnd) {
                    jQuery._unmark(true, this);
                }

                function stopQueue(elem, data, index) {
                    var hooks = data[ index ];
                    jQuery.removeData(elem, index, true);
                    hooks.stop(gotoEnd);
                }

                if (type == null) {
                    for (index in data) {
                        if (data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4) {
                            stopQueue(this, data, index);
                        }
                    }
                } else if (data[ index = type + ".run" ] && data[ index ].stop) {
                    stopQueue(this, data, index);
                }

                for (index = timers.length; index--;) {
                    if (timers[ index ].elem === this && (type == null || timers[ index ].queue === type)) {
                        if (gotoEnd) {

                            // force the next step to be the last
                            timers[ index ](true);
                        } else {
                            timers[ index ].saveState();
                        }
                        hadTimers = true;
                        timers.splice(index, 1);
                    }
                }

                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (!( gotoEnd && hadTimers )) {
                    jQuery.dequeue(this, type);
                }
            });
        }

    });

// Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(clearFxNow, 0);
        return ( fxNow = jQuery.now() );
    }

    function clearFxNow() {
        fxNow = undefined;
    }

// Generate parameters to create a standard animation
    function genFx(type, num) {
        var obj = {};

        jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function () {
            obj[ this ] = type;
        });

        return obj;
    }

// Generate shortcuts for custom animations
    jQuery.each({
        slideDown:genFx("show", 1),
        slideUp:genFx("hide", 1),
        slideToggle:genFx("toggle", 1),
        fadeIn:{ opacity:"show" },
        fadeOut:{ opacity:"hide" },
        fadeToggle:{ opacity:"toggle" }
    }, function (name, props) {
        jQuery.fn[ name ] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    jQuery.extend({
        speed:function (speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                complete:fn || !fn && easing ||
                    jQuery.isFunction(speed) && speed,
                duration:speed,
                easing:fn && easing || easing && !jQuery.isFunction(easing) && easing
            };

            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
                opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

            // normalize opt.queue - true/undefined/null -> "fx"
            if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
            }

            // Queueing
            opt.old = opt.complete;

            opt.complete = function (noUnmark) {
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this);
                }

                if (opt.queue) {
                    jQuery.dequeue(this, opt.queue);
                } else if (noUnmark !== false) {
                    jQuery._unmark(this);
                }
            };

            return opt;
        },

        easing:{
            linear:function (p) {
                return p;
            },
            swing:function (p) {
                return ( -Math.cos(p * Math.PI) / 2 ) + 0.5;
            }
        },

        timers:[],

        fx:function (elem, options, prop) {
            this.options = options;
            this.elem = elem;
            this.prop = prop;

            options.orig = options.orig || {};
        }

    });

    jQuery.fx.prototype = {
        // Simple function for setting a style value
        update:function () {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            ( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )(this);
        },

        // Get the current size
        cur:function () {
            if (this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null)) {
                return this.elem[ this.prop ];
            }

            var parsed,
                r = jQuery.css(this.elem, this.prop);
            // Empty strings, null, undefined and "auto" are converted to 0,
            // complex values such as "rotate(1rad)" are returned as is,
            // simple values such as "10px" are parsed to Float.
            return isNaN(parsed = parseFloat(r)) ? !r || r === "auto" ? 0 : r : parsed;
        },

        // Start an animation from one number to another
        custom:function (from, to, unit) {
            var self = this,
                fx = jQuery.fx;

            this.startTime = fxNow || createFxNow();
            this.end = to;
            this.now = this.start = from;
            this.pos = this.state = 0;
            this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

            function t(gotoEnd) {
                return self.step(gotoEnd);
            }

            t.queue = this.options.queue;
            t.elem = this.elem;
            t.saveState = function () {
                if (jQuery._data(self.elem, "fxshow" + self.prop) === undefined) {
                    if (self.options.hide) {
                        jQuery._data(self.elem, "fxshow" + self.prop, self.start);
                    } else if (self.options.show) {
                        jQuery._data(self.elem, "fxshow" + self.prop, self.end);
                    }
                }
            };

            if (t() && jQuery.timers.push(t) && !timerId) {
                timerId = setInterval(fx.tick, fx.interval);
            }
        },

        // Simple 'show' function
        show:function () {
            var dataShow = jQuery._data(this.elem, "fxshow" + this.prop);

            // Remember where we started, so that we can go back to it later
            this.options.orig[ this.prop ] = dataShow || jQuery.style(this.elem, this.prop);
            this.options.show = true;

            // Begin the animation
            // Make sure that we start at a small width/height to avoid any flash of content
            if (dataShow !== undefined) {
                // This show is picking up where a previous hide or show left off
                this.custom(this.cur(), dataShow);
            } else {
                this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            }

            // Start by showing the element
            jQuery(this.elem).show();
        },

        // Simple 'hide' function
        hide:function () {
            // Remember where we started, so that we can go back to it later
            this.options.orig[ this.prop ] = jQuery._data(this.elem, "fxshow" + this.prop) || jQuery.style(this.elem, this.prop);
            this.options.hide = true;

            // Begin the animation
            this.custom(this.cur(), 0);
        },

        // Each step of an animation
        step:function (gotoEnd) {
            var p, n, complete,
                t = fxNow || createFxNow(),
                done = true,
                elem = this.elem,
                options = this.options;

            if (gotoEnd || t >= options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();

                options.animatedProperties[ this.prop ] = true;

                for (p in options.animatedProperties) {
                    if (options.animatedProperties[ p ] !== true) {
                        done = false;
                    }
                }

                if (done) {
                    // Reset the overflow
                    if (options.overflow != null && !jQuery.support.shrinkWrapBlocks) {

                        jQuery.each([ "", "X", "Y" ], function (index, value) {
                            elem.style[ "overflow" + value ] = options.overflow[ index ];
                        });
                    }

                    // Hide the element if the "hide" operation was done
                    if (options.hide) {
                        jQuery(elem).hide();
                    }

                    // Reset the properties, if the item has been hidden or shown
                    if (options.hide || options.show) {
                        for (p in options.animatedProperties) {
                            jQuery.style(elem, p, options.orig[ p ]);
                            jQuery.removeData(elem, "fxshow" + p, true);
                            // Toggle data is no longer needed
                            jQuery.removeData(elem, "toggle" + p, true);
                        }
                    }

                    // Execute the complete function
                    // in the event that the complete function throws an exception
                    // we must ensure it won't be called twice. #5684

                    complete = options.complete;
                    if (complete) {

                        options.complete = false;
                        complete.call(elem);
                    }
                }

                return false;

            } else {
                // classical easing cannot be used with an Infinity duration
                if (options.duration == Infinity) {
                    this.now = t;
                } else {
                    n = t - this.startTime;
                    this.state = n / options.duration;

                    // Perform the easing function, defaults to swing
                    this.pos = jQuery.easing[ options.animatedProperties[this.prop] ](this.state, n, 0, 1, options.duration);
                    this.now = this.start + ( (this.end - this.start) * this.pos );
                }
                // Perform the next step of the animation
                this.update();
            }

            return true;
        }
    };

    jQuery.extend(jQuery.fx, {
        tick:function () {
            var timer,
                timers = jQuery.timers,
                i = 0;

            for (; i < timers.length; i++) {
                timer = timers[ i ];
                // Checks the timer has not already been removed
                if (!timer() && timers[ i ] === timer) {
                    timers.splice(i--, 1);
                }
            }

            if (!timers.length) {
                jQuery.fx.stop();
            }
        },

        interval:13,

        stop:function () {
            clearInterval(timerId);
            timerId = null;
        },

        speeds:{
            slow:600,
            fast:200,
            // Default speed
            _default:400
        },

        step:{
            opacity:function (fx) {
                jQuery.style(fx.elem, "opacity", fx.now);
            },

            _default:function (fx) {
                if (fx.elem.style && fx.elem.style[ fx.prop ] != null) {
                    fx.elem.style[ fx.prop ] = fx.now + fx.unit;
                } else {
                    fx.elem[ fx.prop ] = fx.now;
                }
            }
        }
    });

// Ensure props that can't be negative don't go there on undershoot easing
    jQuery.each(fxAttrs.concat.apply([], fxAttrs), function (i, prop) {
        // exclude marginTop, marginLeft, marginBottom and marginRight from this list
        if (prop.indexOf("margin")) {
            jQuery.fx.step[ prop ] = function (fx) {
                jQuery.style(fx.elem, prop, Math.max(0, fx.now) + fx.unit);
            };
        }
    });

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers,function (fn) {
                return elem === fn.elem;
            }).length;
        };
    }

// Try to restore the default display value of an element
    function defaultDisplay(nodeName) {

        if (!elemdisplay[ nodeName ]) {

            var body = document.body,
                elem = jQuery("<" + nodeName + ">").appendTo(body),
                display = elem.css("display");
            elem.remove();

            // If the simple way fails,
            // get element's real default display by attaching it to a temp iframe
            if (display === "none" || display === "") {
                // No iframe to use yet, so create it
                if (!iframe) {
                    iframe = document.createElement("iframe");
                    iframe.frameBorder = iframe.width = iframe.height = 0;
                }

                body.appendChild(iframe);

                // Create a cacheable copy of the iframe document on first call.
                // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
                // document to it; WebKit & Firefox won't allow reusing the iframe document.
                if (!iframeDoc || !iframe.createElement) {
                    iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
                    iframeDoc.write(( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>");
                    iframeDoc.close();
                }

                elem = iframeDoc.createElement(nodeName);

                iframeDoc.body.appendChild(elem);

                display = jQuery.css(elem, "display");
                body.removeChild(iframe);
            }

            // Store the correct default display
            elemdisplay[ nodeName ] = display;
        }

        return elemdisplay[ nodeName ];
    }


    var getOffset,
        rtable = /^t(?:able|d|h)$/i,
        rroot = /^(?:body|html)$/i;

    if ("getBoundingClientRect" in document.documentElement) {
        getOffset = function (elem, doc, docElem, box) {
            try {
                box = elem.getBoundingClientRect();
            } catch (e) {
            }

            // Make sure we're not dealing with a disconnected DOM node
            if (!box || !jQuery.contains(docElem, elem)) {
                return box ? { top:box.top, left:box.left } : { top:0, left:0 };
            }

            var body = doc.body,
                win = getWindow(doc),
                clientTop = docElem.clientTop || body.clientTop || 0,
                clientLeft = docElem.clientLeft || body.clientLeft || 0,
                scrollTop = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop,
                scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
                top = box.top + scrollTop - clientTop,
                left = box.left + scrollLeft - clientLeft;

            return { top:top, left:left };
        };

    } else {
        getOffset = function (elem, doc, docElem) {
            var computedStyle,
                offsetParent = elem.offsetParent,
                prevOffsetParent = elem,
                body = doc.body,
                defaultView = doc.defaultView,
                prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle,
                top = elem.offsetTop,
                left = elem.offsetLeft;

            while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                    break;
                }

                computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                top -= elem.scrollTop;
                left -= elem.scrollLeft;

                if (elem === offsetParent) {
                    top += elem.offsetTop;
                    left += elem.offsetLeft;

                    if (jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
                        top += parseFloat(computedStyle.borderTopWidth) || 0;
                        left += parseFloat(computedStyle.borderLeftWidth) || 0;
                    }

                    prevOffsetParent = offsetParent;
                    offsetParent = elem.offsetParent;
                }

                if (jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                    top += parseFloat(computedStyle.borderTopWidth) || 0;
                    left += parseFloat(computedStyle.borderLeftWidth) || 0;
                }

                prevComputedStyle = computedStyle;
            }

            if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                top += body.offsetTop;
                left += body.offsetLeft;
            }

            if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                top += Math.max(docElem.scrollTop, body.scrollTop);
                left += Math.max(docElem.scrollLeft, body.scrollLeft);
            }

            return { top:top, left:left };
        };
    }

    jQuery.fn.offset = function (options) {
        if (arguments.length) {
            return options === undefined ?
                this :
                this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
        }

        var elem = this[0],
            doc = elem && elem.ownerDocument;

        if (!doc) {
            return null;
        }

        if (elem === doc.body) {
            return jQuery.offset.bodyOffset(elem);
        }

        return getOffset(elem, doc, doc.documentElement);
    };

    jQuery.offset = {

        bodyOffset:function (body) {
            var top = body.offsetTop,
                left = body.offsetLeft;

            if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
                top += parseFloat(jQuery.css(body, "marginTop")) || 0;
                left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
            }

            return { top:top, left:left };
        },

        setOffset:function (elem, options, i) {
            var position = jQuery.css(elem, "position");

            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            var curElem = jQuery(elem),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css(elem, "top"),
                curCSSLeft = jQuery.css(elem, "left"),
                calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {}, curPosition = {}, curTop, curLeft;

            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }

            if (options.top != null) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if (options.left != null) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };


    jQuery.fn.extend({

        position:function () {
            if (!this[0]) {
                return null;
            }

            var elem = this[0],

            // Get *real* offsetParent
                offsetParent = this.offsetParent(),

            // Get correct offsets
                offset = this.offset(),
                parentOffset = rroot.test(offsetParent[0].nodeName) ? { top:0, left:0 } : offsetParent.offset();

            // Subtract element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
            offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;

            // Add offsetParent borders
            parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
            parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;

            // Subtract the two offsets
            return {
                top:offset.top - parentOffset.top,
                left:offset.left - parentOffset.left
            };
        },

        offsetParent:function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || document.body;
                while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent;
            });
        }
    });


// Create scrollLeft and scrollTop methods
    jQuery.each({scrollLeft:"pageXOffset", scrollTop:"pageYOffset"}, function (method, prop) {
        var top = /Y/.test(prop);

        jQuery.fn[ method ] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? (prop in win) ? win[ prop ] :
                        jQuery.support.boxModel && win.document.documentElement[ method ] ||
                            win.document.body[ method ] :
                        elem[ method ];
                }

                if (win) {
                    win.scrollTo(
                        !top ? val : jQuery(win).scrollLeft(),
                        top ? val : jQuery(win).scrollTop()
                    );

                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length, null);
        };
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ?
            elem :
            elem.nodeType === 9 ?
                elem.defaultView || elem.parentWindow :
                false;
    }


// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
    jQuery.each({ Height:"height", Width:"width" }, function (name, type) {
        var clientProp = "client" + name,
            scrollProp = "scroll" + name,
            offsetProp = "offset" + name;

        // innerHeight and innerWidth
        jQuery.fn[ "inner" + name ] = function () {
            var elem = this[0];
            return elem ?
                elem.style ?
                    parseFloat(jQuery.css(elem, type, "padding")) :
                    this[ type ]() :
                null;
        };

        // outerHeight and outerWidth
        jQuery.fn[ "outer" + name ] = function (margin) {
            var elem = this[0];
            return elem ?
                elem.style ?
                    parseFloat(jQuery.css(elem, type, margin ? "margin" : "border")) :
                    this[ type ]() :
                null;
        };

        jQuery.fn[ type ] = function (value) {
            return jQuery.access(this, function (elem, type, value) {
                var doc, docElemProp, orig, ret;

                if (jQuery.isWindow(elem)) {
                    // 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
                    doc = elem.document;
                    docElemProp = doc.documentElement[ clientProp ];
                    return jQuery.support.boxModel && docElemProp ||
                        doc.body && doc.body[ clientProp ] || docElemProp;
                }

                // Get document width or height
                if (elem.nodeType === 9) {
                    // Either scroll[Width/Height] or offset[Width/Height], whichever is greater
                    doc = elem.documentElement;

                    // when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
                    // so we can't use max, as it'll choose the incorrect offset[Width/Height]
                    // instead we use the correct client[Width/Height]
                    // support:IE6
                    if (doc[ clientProp ] >= doc[ scrollProp ]) {
                        return doc[ clientProp ];
                    }

                    return Math.max(
                        elem.body[ scrollProp ], doc[ scrollProp ],
                        elem.body[ offsetProp ], doc[ offsetProp ]
                    );
                }

                // Get width or height on the element
                if (value === undefined) {
                    orig = jQuery.css(elem, type);
                    ret = parseFloat(orig);
                    return jQuery.isNumeric(ret) ? ret : orig;
                }

                // Set the width or height on the element
                jQuery(elem).css(type, value);
            }, type, value, arguments.length, null);
        };
    });


// Expose jQuery to the global object
    window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function () {
            return jQuery;
        });
    }


})(window);
(function ($, undefined) {

    /**
     * Unobtrusive scripting adapter for jQuery
     *
     * Requires jQuery 1.6.0 or later.
     * https://github.com/rails/jquery-ujs

     * Uploading file using rails.js
     * =============================
     *
     * By default, browsers do not allow files to be uploaded via AJAX. As a result, if there are any non-blank file fields
     * in the remote form, this adapter aborts the AJAX submission and allows the form to submit through standard means.
     *
     * The `ajax:aborted:file` event allows you to bind your own handler to process the form submission however you wish.
     *
     * Ex:
     *     $('form').live('ajax:aborted:file', function(event, elements){
     *       // Implement own remote file-transfer handler here for non-blank file inputs passed in `elements`.
     *       // Returning false in this handler tells rails.js to disallow standard form submission
     *       return false;
     *     });
     *
     * The `ajax:aborted:file` event is fired when a file-type input is detected with a non-blank value.
     *
     * Third-party tools can use this hook to detect when an AJAX file upload is attempted, and then use
     * techniques like the iframe method to upload the file instead.
     *
     * Required fields in rails.js
     * ===========================
     *
     * If any blank required inputs (required="required") are detected in the remote form, the whole form submission
     * is canceled. Note that this is unlike file inputs, which still allow standard (non-AJAX) form submission.
     *
     * The `ajax:aborted:required` event allows you to bind your own handler to inform the user of blank required inputs.
     *
     * !! Note that Opera does not fire the form's submit event if there are blank required inputs, so this event may never
     *    get fired in Opera. This event is what causes other browsers to exhibit the same submit-aborting behavior.
     *
     * Ex:
     *     $('form').live('ajax:aborted:required', function(event, elements){
     *       // Returning false in this handler tells rails.js to submit the form anyway.
     *       // The blank required inputs are passed to this function in `elements`.
     *       return ! confirm("Would you like to submit the form with missing info?");
     *     });
     */

    // Shorthand to make it a little easier to call public rails functions from within rails.js
    var rails;

    $.rails = rails = {
        // Link elements bound by jquery-ujs
        linkClickSelector:'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',

        // Select elements bound by jquery-ujs
        inputChangeSelector:'select[data-remote], input[data-remote], textarea[data-remote]',

        // Form elements bound by jquery-ujs
        formSubmitSelector:'form',

        // Form input elements bound by jquery-ujs
        formInputClickSelector:'form input[type=submit], form input[type=image], form button[type=submit], form button:not(button[type])',

        // Form input elements disabled during form submission
        disableSelector:'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

        // Form input elements re-enabled after form submission
        enableSelector:'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

        // Form required input elements
        requiredInputSelector:'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

        // Form file input elements
        fileInputSelector:'input:file',

        // Link onClick disable selector with possible reenable after remote submission
        linkDisableSelector:'a[data-disable-with]',

        // Make sure that every Ajax request sends the CSRF token
        CSRFProtection:function (xhr) {
            var token = $('meta[name="csrf-token"]').attr('content');
            if (token) xhr.setRequestHeader('X-CSRF-Token', token);
        },

        // Triggers an event on an element and returns false if the event result is false
        fire:function (obj, name, data) {
            var event = $.Event(name);
            obj.trigger(event, data);
            return event.result !== false;
        },

        // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
        confirm:function (message) {
            return confirm(message);
        },

        // Default ajax function, may be overridden with custom function in $.rails.ajax
        ajax:function (options) {
            return $.ajax(options);
        },

        // Default way to get an element's href. May be overridden at $.rails.href.
        href:function (element) {
            return element.attr('href');
        },

        // Submits "remote" forms and links with ajax
        handleRemote:function (element) {
            var method, url, data, crossDomain, dataType, options;

            if (rails.fire(element, 'ajax:before')) {
                crossDomain = element.data('cross-domain') || null;
                dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

                if (element.is('form')) {
                    method = element.attr('method');
                    url = element.attr('action');
                    data = element.serializeArray();
                    // memoized value from clicked submit button
                    var button = element.data('ujs:submit-button');
                    if (button) {
                        data.push(button);
                        element.data('ujs:submit-button', null);
                    }
                } else if (element.is(rails.inputChangeSelector)) {
                    method = element.data('method');
                    url = element.data('url');
                    data = element.serialize();
                    if (element.data('params')) data = data + "&" + element.data('params');
                } else {
                    method = element.data('method');
                    url = rails.href(element);
                    data = element.data('params') || null;
                }

                options = {
                    type:method || 'GET', data:data, dataType:dataType, crossDomain:crossDomain,
                    // stopping the "ajax:beforeSend" event will cancel the ajax request
                    beforeSend:function (xhr, settings) {
                        if (settings.dataType === undefined) {
                            xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
                        }
                        return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
                    },
                    success:function (data, status, xhr) {
                        element.trigger('ajax:success', [data, status, xhr]);
                    },
                    complete:function (xhr, status) {
                        element.trigger('ajax:complete', [xhr, status]);
                    },
                    error:function (xhr, status, error) {
                        element.trigger('ajax:error', [xhr, status, error]);
                    }
                };
                // Only pass url to `ajax` options if not blank
                if (url) {
                    options.url = url;
                }

                return rails.ajax(options);
            } else {
                return false;
            }
        },

        // Handles "data-method" on links such as:
        // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
        handleMethod:function (link) {
            var href = rails.href(link),
                method = link.data('method'),
                target = link.attr('target'),
                csrf_token = $('meta[name=csrf-token]').attr('content'),
                csrf_param = $('meta[name=csrf-param]').attr('content'),
                form = $('<form method="post" action="' + href + '"></form>'),
                metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';

            if (csrf_param !== undefined && csrf_token !== undefined) {
                metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
            }

            if (target) {
                form.attr('target', target);
            }

            form.hide().append(metadata_input).appendTo('body');
            form.submit();
        },

        /* Disables form elements:
         - Caches element value in 'ujs:enable-with' data store
         - Replaces element text with value of 'data-disable-with' attribute
         - Sets disabled property to true
         */
        disableFormElements:function (form) {
            form.find(rails.disableSelector).each(function () {
                var element = $(this), method = element.is('button') ? 'html' : 'val';
                element.data('ujs:enable-with', element[method]());
                element[method](element.data('disable-with'));
                element.prop('disabled', true);
            });
        },

        /* Re-enables disabled form elements:
         - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
         - Sets disabled property to false
         */
        enableFormElements:function (form) {
            form.find(rails.enableSelector).each(function () {
                var element = $(this), method = element.is('button') ? 'html' : 'val';
                if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
                element.prop('disabled', false);
            });
        },

        /* For 'data-confirm' attribute:
         - Fires `confirm` event
         - Shows the confirmation dialog
         - Fires the `confirm:complete` event

         Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
         Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
         Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
         return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
         */
        allowAction:function (element) {
            var message = element.data('confirm'),
                answer = false, callback;
            if (!message) {
                return true;
            }

            if (rails.fire(element, 'confirm')) {
                answer = rails.confirm(message);
                callback = rails.fire(element, 'confirm:complete', [answer]);
            }
            return answer && callback;
        },

        // Helper function which checks for blank inputs in a form that match the specified CSS selector
        blankInputs:function (form, specifiedSelector, nonBlank) {
            var inputs = $(), input,
                selector = specifiedSelector || 'input,textarea';
            form.find(selector).each(function () {
                input = $(this);
                // Collect non-blank inputs if nonBlank option is true, otherwise, collect blank inputs
                if (nonBlank ? input.val() : !input.val()) {
                    inputs = inputs.add(input);
                }
            });
            return inputs.length ? inputs : false;
        },

        // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
        nonBlankInputs:function (form, specifiedSelector) {
            return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
        },

        // Helper function, needed to provide consistent behavior in IE
        stopEverything:function (e) {
            $(e.target).trigger('ujs:everythingStopped');
            e.stopImmediatePropagation();
            return false;
        },

        // find all the submit events directly bound to the form and
        // manually invoke them. If anyone returns false then stop the loop
        callFormSubmitBindings:function (form, event) {
            var events = form.data('events'), continuePropagation = true;
            if (events !== undefined && events['submit'] !== undefined) {
                $.each(events['submit'], function (i, obj) {
                    if (typeof obj.handler === 'function') return continuePropagation = obj.handler(event);
                });
            }
            return continuePropagation;
        },

        //  replace element's html with the 'data-disable-with' after storing original html
        //  and prevent clicking on it
        disableElement:function (element) {
            element.data('ujs:enable-with', element.html()); // store enabled state
            element.html(element.data('disable-with')); // set to disabled state
            element.bind('click.railsDisable', function (e) { // prevent further clicking
                return rails.stopEverything(e)
            });
        },

        // restore element to its original state which was disabled by 'disableElement' above
        enableElement:function (element) {
            if (element.data('ujs:enable-with') !== undefined) {
                element.html(element.data('ujs:enable-with')); // set to old enabled state
                // this should be element.removeData('ujs:enable-with')
                // but, there is currently a bug in jquery which makes hyphenated data attributes not get removed
                element.data('ujs:enable-with', false); // clean up cache
            }
            element.unbind('click.railsDisable'); // enable element
        }

    };

    $.ajaxPrefilter(function (options, originalOptions, xhr) {
        if (!options.crossDomain) {
            rails.CSRFProtection(xhr);
        }
    });

    $(document).delegate(rails.linkDisableSelector, 'ajax:complete', function () {
        rails.enableElement($(this));
    });

    $(document).delegate(rails.linkClickSelector, 'click.rails', function (e) {
        var link = $(this), method = link.data('method'), data = link.data('params');
        if (!rails.allowAction(link)) return rails.stopEverything(e);

        if (link.is(rails.linkDisableSelector)) rails.disableElement(link);

        if (link.data('remote') !== undefined) {
            if ((e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data) {
                return true;
            }

            if (rails.handleRemote(link) === false) {
                rails.enableElement(link);
            }
            return false;

        } else if (link.data('method')) {
            rails.handleMethod(link);
            return false;
        }
    });

    $(document).delegate(rails.inputChangeSelector, 'change.rails', function (e) {
        var link = $(this);
        if (!rails.allowAction(link)) return rails.stopEverything(e);

        rails.handleRemote(link);
        return false;
    });

    $(document).delegate(rails.formSubmitSelector, 'submit.rails', function (e) {
        var form = $(this),
            remote = form.data('remote') !== undefined,
            blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
            nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);

        if (!rails.allowAction(form)) return rails.stopEverything(e);

        // skip other logic when required values are missing or file upload is present
        if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
        }

        if (remote) {
            if (nonBlankFileInputs) {
                return rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);
            }

            // If browser does not support submit bubbling, then this live-binding will be called before direct
            // bindings. Therefore, we should directly call any direct bindings before remotely submitting form.
            if (!$.support.submitBubbles && $().jquery < '1.7' && rails.callFormSubmitBindings(form, e) === false) return rails.stopEverything(e);

            rails.handleRemote(form);
            return false;

        } else {
            // slight timeout so that the submit button gets properly serialized
            setTimeout(function () {
                rails.disableFormElements(form);
            }, 13);
        }
    });

    $(document).delegate(rails.formInputClickSelector, 'click.rails', function (event) {
        var button = $(this);

        if (!rails.allowAction(button)) return rails.stopEverything(event);

        // register the pressed submit button
        var name = button.attr('name'),
            data = name ? {name:name, value:button.val()} : null;

        button.closest('form').data('ujs:submit-button', data);
    });

    $(document).delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function (event) {
        if (this == event.target) rails.disableFormElements($(this));
    });

    $(document).delegate(rails.formSubmitSelector, 'ajax:complete.rails', function (event) {
        if (this == event.target) rails.enableFormElements($(this));
    });

})(jQuery);
/*!
 * jQuery UI 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */

(function ($, undefined) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
    $.ui = $.ui || {};
    if ($.ui.version) {
        return;
    }

    $.extend($.ui, {
        version:"1.8.18",

        keyCode:{
            ALT:18,
            BACKSPACE:8,
            CAPS_LOCK:20,
            COMMA:188,
            COMMAND:91,
            COMMAND_LEFT:91, // COMMAND
            COMMAND_RIGHT:93,
            CONTROL:17,
            DELETE:46,
            DOWN:40,
            END:35,
            ENTER:13,
            ESCAPE:27,
            HOME:36,
            INSERT:45,
            LEFT:37,
            MENU:93, // COMMAND_RIGHT
            NUMPAD_ADD:107,
            NUMPAD_DECIMAL:110,
            NUMPAD_DIVIDE:111,
            NUMPAD_ENTER:108,
            NUMPAD_MULTIPLY:106,
            NUMPAD_SUBTRACT:109,
            PAGE_DOWN:34,
            PAGE_UP:33,
            PERIOD:190,
            RIGHT:39,
            SHIFT:16,
            SPACE:32,
            TAB:9,
            UP:38,
            WINDOWS:91 // COMMAND
        }
    });

// plugins
    $.fn.extend({
        propAttr:$.fn.prop || $.fn.attr,

        _focus:$.fn.focus,
        focus:function (delay, fn) {
            return typeof delay === "number" ?
                this.each(function () {
                    var elem = this;
                    setTimeout(function () {
                        $(elem).focus();
                        if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) :
                this._focus.apply(this, arguments);
        },

        scrollParent:function () {
            var scrollParent;
            if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
                scrollParent = this.parents().filter(function () {
                    return (/(relative|absolute|fixed)/).test($.curCSS(this, 'position', 1)) && (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                }).eq(0);
            } else {
                scrollParent = this.parents().filter(function () {
                    return (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                }).eq(0);
            }

            return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
        },

        zIndex:function (zIndex) {
            if (zIndex !== undefined) {
                return this.css("zIndex", zIndex);
            }

            if (this.length) {
                var elem = $(this[ 0 ]), position, value;
                while (elem.length && elem[ 0 ] !== document) {
                    // Ignore z-index if position is set to a value where z-index is ignored by the browser
                    // This makes behavior of this function consistent across browsers
                    // WebKit always returns auto if the element is positioned
                    position = elem.css("position");
                    if (position === "absolute" || position === "relative" || position === "fixed") {
                        // IE returns 0 when zIndex is not specified
                        // other browsers return a string
                        // we ignore the case of nested elements with an explicit value of 0
                        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }

            return 0;
        },

        disableSelection:function () {
            return this.bind(( $.support.selectstart ? "selectstart" : "mousedown" ) +
                ".ui-disableSelection", function (event) {
                event.preventDefault();
            });
        },

        enableSelection:function () {
            return this.unbind(".ui-disableSelection");
        }
    });

    $.each([ "Width", "Height" ], function (i, name) {
        var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
            type = name.toLowerCase(),
            orig = {
                innerWidth:$.fn.innerWidth,
                innerHeight:$.fn.innerHeight,
                outerWidth:$.fn.outerWidth,
                outerHeight:$.fn.outerHeight
            };

        function reduce(elem, size, border, margin) {
            $.each(side, function () {
                size -= parseFloat($.curCSS(elem, "padding" + this, true)) || 0;
                if (border) {
                    size -= parseFloat($.curCSS(elem, "border" + this + "Width", true)) || 0;
                }
                if (margin) {
                    size -= parseFloat($.curCSS(elem, "margin" + this, true)) || 0;
                }
            });
            return size;
        }

        $.fn[ "inner" + name ] = function (size) {
            if (size === undefined) {
                return orig[ "inner" + name ].call(this);
            }

            return this.each(function () {
                $(this).css(type, reduce(this, size) + "px");
            });
        };

        $.fn[ "outer" + name] = function (size, margin) {
            if (typeof size !== "number") {
                return orig[ "outer" + name ].call(this, size);
            }

            return this.each(function () {
                $(this).css(type, reduce(this, size, true, margin) + "px");
            });
        };
    });

// selectors
    function focusable(element, isTabIndexNotNaN) {
        var nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            var map = element.parentNode,
                mapName = map.name,
                img;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return ( /input|select|textarea|button|object/.test(nodeName)
            ? !element.disabled
            : "a" == nodeName
            ? element.href || isTabIndexNotNaN
            : isTabIndexNotNaN)
            // the element and all of its ancestors must be visible
            && visible(element);
    }

    function visible(element) {
        return !$(element).parents().andSelf().filter(function () {
            return $.curCSS(this, "visibility") === "hidden" ||
                $.expr.filters.hidden(this);
        }).length;
    }

    $.extend($.expr[ ":" ], {
        data:function (elem, i, match) {
            return !!$.data(elem, match[ 3 ]);
        },

        focusable:function (element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },

        tabbable:function (element) {
            var tabIndex = $.attr(element, "tabindex"),
                isTabIndexNaN = isNaN(tabIndex);
            return ( isTabIndexNaN || tabIndex >= 0 ) && focusable(element, !isTabIndexNaN);
        }
    });

// support
    $(function () {
        var body = document.body,
            div = body.appendChild(div = document.createElement("div"));

        // access offsetHeight before setting the style to prevent a layout bug
        // in IE 9 which causes the elemnt to continue to take up space even
        // after it is removed from the DOM (#8026)
        div.offsetHeight;

        $.extend(div.style, {
            minHeight:"100px",
            height:"auto",
            padding:0,
            borderWidth:0
        });

        $.support.minHeight = div.offsetHeight === 100;
        $.support.selectstart = "onselectstart" in div;

        // set display to none to avoid a layout bug in IE
        // http://dev.jquery.com/ticket/4014
        body.removeChild(div).style.display = "none";
    });


// deprecated
    $.extend($.ui, {
        // $.ui.plugin is deprecated.  Use the proxy pattern instead.
        plugin:{
            add:function (module, option, set) {
                var proto = $.ui[ module ].prototype;
                for (var i in set) {
                    proto.plugins[ i ] = proto.plugins[ i ] || [];
                    proto.plugins[ i ].push([ option, set[ i ] ]);
                }
            },
            call:function (instance, name, args) {
                var set = instance.plugins[ name ];
                if (!set || !instance.element[ 0 ].parentNode) {
                    return;
                }

                for (var i = 0; i < set.length; i++) {
                    if (instance.options[ set[ i ][ 0 ] ]) {
                        set[ i ][ 1 ].apply(instance.element, args);
                    }
                }
            }
        },

        // will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
        contains:function (a, b) {
            return document.compareDocumentPosition ?
                a.compareDocumentPosition(b) & 16 :
                a !== b && a.contains(b);
        },

        // only used by resizable
        hasScroll:function (el, a) {

            //If overflow is hidden, the element might have extra content, but the user wants to hide it
            if ($(el).css("overflow") === "hidden") {
                return false;
            }

            var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
                has = false;

            if (el[ scroll ] > 0) {
                return true;
            }

            // TODO: determine which cases actually cause this to happen
            // if the element doesn't have the scroll set, see if it's possible to
            // set the scroll
            el[ scroll ] = 1;
            has = ( el[ scroll ] > 0 );
            el[ scroll ] = 0;
            return has;
        },

        // these are odd functions, fix the API or move into individual plugins
        isOverAxis:function (x, reference, size) {
            //Determines when x coordinate is over "b" element axis
            return ( x > reference ) && ( x < ( reference + size ) );
        },
        isOver:function (y, x, top, left, height, width) {
            //Determines when x, y coordinates is over "b" element
            return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
        }
    });

})(jQuery);
/*!
 * jQuery UI Widget 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function ($, undefined) {

// jQuery 1.4+
    if ($.cleanData) {
        var _cleanData = $.cleanData;
        $.cleanData = function (elems) {
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                try {
                    $(elem).triggerHandler("remove");
                    // http://bugs.jquery.com/ticket/8235
                } catch (e) {
                }
            }
            _cleanData(elems);
        };
    } else {
        var _remove = $.fn.remove;
        $.fn.remove = function (selector, keepData) {
            return this.each(function () {
                if (!keepData) {
                    if (!selector || $.filter(selector, [ this ]).length) {
                        $("*", this).add([ this ]).each(function () {
                            try {
                                $(this).triggerHandler("remove");
                                // http://bugs.jquery.com/ticket/8235
                            } catch (e) {
                            }
                        });
                    }
                }
                return _remove.call($(this), selector, keepData);
            });
        };
    }

    $.widget = function (name, base, prototype) {
        var namespace = name.split(".")[ 0 ],
            fullName;
        name = name.split(".")[ 1 ];
        fullName = namespace + "-" + name;

        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }

        // create selector for plugin
        $.expr[ ":" ][ fullName ] = function (elem) {
            return !!$.data(elem, name);
        };

        $[ namespace ] = $[ namespace ] || {};
        $[ namespace ][ name ] = function (options, element) {
            // allow instantiation without initializing for simple inheritance
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };

        var basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
//	$.each( basePrototype, function( key, val ) {
//		if ( $.isPlainObject(val) ) {
//			basePrototype[ key ] = $.extend( {}, val );
//		}
//	});
        basePrototype.options = $.extend(true, {}, basePrototype.options);
        $[ namespace ][ name ].prototype = $.extend(true, basePrototype, {
            namespace:namespace,
            widgetName:name,
            widgetEventPrefix:$[ namespace ][ name ].prototype.widgetEventPrefix || name,
            widgetBaseClass:fullName
        }, prototype);

        $.widget.bridge(name, $[ namespace ][ name ]);
    };

    $.widget.bridge = function (name, object) {
        $.fn[ name ] = function (options) {
            var isMethodCall = typeof options === "string",
                args = Array.prototype.slice.call(arguments, 1),
                returnValue = this;

            // allow multiple hashes to be passed on init
            options = !isMethodCall && args.length ?
                $.extend.apply(null, [ true, options ].concat(args)) :
                options;

            // prevent calls to internal methods
            if (isMethodCall && options.charAt(0) === "_") {
                return returnValue;
            }

            if (isMethodCall) {
                this.each(function () {
                    var instance = $.data(this, name),
                        methodValue = instance && $.isFunction(instance[options]) ?
                            instance[ options ].apply(instance, args) :
                            instance;
                    // TODO: add this back in 1.9 and use $.error() (see #5972)
//				if ( !instance ) {
//					throw "cannot call methods on " + name + " prior to initialization; " +
//						"attempted to call method '" + options + "'";
//				}
//				if ( !$.isFunction( instance[options] ) ) {
//					throw "no such method '" + options + "' for " + name + " widget instance";
//				}
//				var methodValue = instance[ options ].apply( instance, args );
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue;
                        return false;
                    }
                });
            } else {
                this.each(function () {
                    var instance = $.data(this, name);
                    if (instance) {
                        instance.option(options || {})._init();
                    } else {
                        $.data(this, name, new object(options, this));
                    }
                });
            }

            return returnValue;
        };
    };

    $.Widget = function (options, element) {
        // allow instantiation without initializing for simple inheritance
        if (arguments.length) {
            this._createWidget(options, element);
        }
    };

    $.Widget.prototype = {
        widgetName:"widget",
        widgetEventPrefix:"",
        options:{
            disabled:false
        },
        _createWidget:function (options, element) {
            // $.widget.bridge stores the plugin instance, but we do it anyway
            // so that it's stored even before the _create function runs
            $.data(element, this.widgetName, this);
            this.element = $(element);
            this.options = $.extend(true, {},
                this.options,
                this._getCreateOptions(),
                options);

            var self = this;
            this.element.bind("remove." + this.widgetName, function () {
                self.destroy();
            });

            this._create();
            this._trigger("create");
            this._init();
        },
        _getCreateOptions:function () {
            return $.metadata && $.metadata.get(this.element[0])[ this.widgetName ];
        },
        _create:function () {
        },
        _init:function () {
        },

        destroy:function () {
            this.element
                .unbind("." + this.widgetName)
                .removeData(this.widgetName);
            this.widget()
                .unbind("." + this.widgetName)
                .removeAttr("aria-disabled")
                .removeClass(
                this.widgetBaseClass + "-disabled " +
                    "ui-state-disabled");
        },

        widget:function () {
            return this.element;
        },

        option:function (key, value) {
            var options = key;

            if (arguments.length === 0) {
                // don't return a reference to the internal hash
                return $.extend({}, this.options);
            }

            if (typeof key === "string") {
                if (value === undefined) {
                    return this.options[ key ];
                }
                options = {};
                options[ key ] = value;
            }

            this._setOptions(options);

            return this;
        },
        _setOptions:function (options) {
            var self = this;
            $.each(options, function (key, value) {
                self._setOption(key, value);
            });

            return this;
        },
        _setOption:function (key, value) {
            this.options[ key ] = value;

            if (key === "disabled") {
                this.widget()
                    [ value ? "addClass" : "removeClass"](
                    this.widgetBaseClass + "-disabled" + " " +
                        "ui-state-disabled")
                    .attr("aria-disabled", value);
            }

            return this;
        },

        enable:function () {
            return this._setOption("disabled", false);
        },
        disable:function () {
            return this._setOption("disabled", true);
        },

        _trigger:function (type, event, data) {
            var prop, orig,
                callback = this.options[ type ];

            data = data || {};
            event = $.Event(event);
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];

            // copy original event properties over to the new event
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!( prop in event )) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }

            this.element.trigger(event, data);

            return !( $.isFunction(callback) &&
                callback.call(this.element[0], event, data) === false ||
                event.isDefaultPrevented() );
        }
    };

})(jQuery);
/*!
 * jQuery UI Mouse 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    var mouseHandled = false;
    $(document).mouseup(function (e) {
        mouseHandled = false;
    });

    $.widget("ui.mouse", {
        options:{
            cancel:':input,option',
            distance:1,
            delay:0
        },
        _mouseInit:function () {
            var self = this;

            this.element
                .bind('mousedown.' + this.widgetName, function (event) {
                    return self._mouseDown(event);
                })
                .bind('click.' + this.widgetName, function (event) {
                    if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
                        $.removeData(event.target, self.widgetName + '.preventClickEvent');
                        event.stopImmediatePropagation();
                        return false;
                    }
                });

            this.started = false;
        },

        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy:function () {
            this.element.unbind('.' + this.widgetName);
        },

        _mouseDown:function (event) {
            // don't let more than one widget handle mouseStart
            if (mouseHandled) {
                return
            }
            ;

            // we may have missed mouseup (out of window)
            (this._mouseStarted && this._mouseUp(event));

            this._mouseDownEvent = event;

            var self = this,
                btnIsLeft = (event.which == 1),
            // event.target.nodeName works around a bug in IE 8 with
            // disabled inputs (#7620)
                elIsCancel = (typeof this.options.cancel == "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }

            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function () {
                    self.mouseDelayMet = true;
                }, this.options.delay);
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }

            // Click event may never have fired (Gecko & Opera)
            if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                $.removeData(event.target, this.widgetName + '.preventClickEvent');
            }

            // these delegates are required to keep context
            this._mouseMoveDelegate = function (event) {
                return self._mouseMove(event);
            };
            this._mouseUpDelegate = function (event) {
                return self._mouseUp(event);
            };
            $(document)
                .bind('mousemove.' + this.widgetName, this._mouseMoveDelegate)
                .bind('mouseup.' + this.widgetName, this._mouseUpDelegate);

            event.preventDefault();

            mouseHandled = true;
            return true;
        },

        _mouseMove:function (event) {
            // IE mouseup check - mouseup happened when mouse was out of window
            if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
                return this._mouseUp(event);
            }

            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted =
                    (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }

            return !this._mouseStarted;
        },

        _mouseUp:function (event) {
            $(document)
                .unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate)
                .unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);

            if (this._mouseStarted) {
                this._mouseStarted = false;

                if (event.target == this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + '.preventClickEvent', true);
                }

                this._mouseStop(event);
            }

            return false;
        },

        _mouseDistanceMet:function (event) {
            return (Math.max(
                Math.abs(this._mouseDownEvent.pageX - event.pageX),
                Math.abs(this._mouseDownEvent.pageY - event.pageY)
            ) >= this.options.distance
                );
        },

        _mouseDelayMet:function (event) {
            return this.mouseDelayMet;
        },

        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart:function (event) {
        },
        _mouseDrag:function (event) {
        },
        _mouseStop:function (event) {
        },
        _mouseCapture:function (event) {
            return true;
        }
    });

})(jQuery);
/*
 * jQuery UI Draggable 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Draggables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.draggable", $.ui.mouse, {
        widgetEventPrefix:"drag",
        options:{
            addClasses:true,
            appendTo:"parent",
            axis:false,
            connectToSortable:false,
            containment:false,
            cursor:"auto",
            cursorAt:false,
            grid:false,
            handle:false,
            helper:"original",
            iframeFix:false,
            opacity:false,
            refreshPositions:false,
            revert:false,
            revertDuration:500,
            scope:"default",
            scroll:true,
            scrollSensitivity:20,
            scrollSpeed:20,
            snap:false,
            snapMode:"both",
            snapTolerance:20,
            stack:false,
            zIndex:false
        },
        _create:function () {

            if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
                this.element[0].style.position = 'relative';

            (this.options.addClasses && this.element.addClass("ui-draggable"));
            (this.options.disabled && this.element.addClass("ui-draggable-disabled"));

            this._mouseInit();

        },

        destroy:function () {
            if (!this.element.data('draggable')) return;
            this.element
                .removeData("draggable")
                .unbind(".draggable")
                .removeClass("ui-draggable"
                + " ui-draggable-dragging"
                + " ui-draggable-disabled");
            this._mouseDestroy();

            return this;
        },

        _mouseCapture:function (event) {

            var o = this.options;

            // among others, prevent a drag on a resizable-handle
            if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
                return false;

            //Quit if we're not on a valid handle
            this.handle = this._getHandle(event);
            if (!this.handle)
                return false;

            if (o.iframeFix) {
                $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function () {
                    $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')
                        .css({
                            width:this.offsetWidth + "px", height:this.offsetHeight + "px",
                            position:"absolute", opacity:"0.001", zIndex:1000
                        })
                        .css($(this).offset())
                        .appendTo("body");
                });
            }

            return true;

        },

        _mouseStart:function (event) {

            var o = this.options;

            //Create and append the visible helper
            this.helper = this._createHelper(event);

            //Cache the helper size
            this._cacheHelperProportions();

            //If ddmanager is used for droppables, set the global draggable
            if ($.ui.ddmanager)
                $.ui.ddmanager.current = this;

            /*
             * - Position generation -
             * This block generates everything position related - it's the core of draggables.
             */

            //Cache the margins of the original element
            this._cacheMargins();

            //Store the helper's css position
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();

            //The element's absolute position on the page minus margins
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top:this.offset.top - this.margins.top,
                left:this.offset.left - this.margins.left
            };

            $.extend(this.offset, {
                click:{ //Where the click happened, relative to the element
                    left:event.pageX - this.offset.left,
                    top:event.pageY - this.offset.top
                },
                parent:this._getParentOffset(),
                relative:this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
            });

            //Generate the original position
            this.originalPosition = this.position = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;

            //Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

            //Set a containment if given in the options
            if (o.containment)
                this._setContainment();

            //Trigger event + callbacks
            if (this._trigger("start", event) === false) {
                this._clear();
                return false;
            }

            //Recache the helper size
            this._cacheHelperProportions();

            //Prepare the droppable offsets
            if ($.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);

            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

            //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
            if ($.ui.ddmanager) $.ui.ddmanager.dragStart(this, event);

            return true;
        },

        _mouseDrag:function (event, noPropagation) {

            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");

            //Call plugins and callbacks and use the resulting position if something is returned
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger('drag', event, ui) === false) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }

            if (!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left + 'px';
            if (!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top + 'px';
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

            return false;
        },

        _mouseStop:function (event) {

            //If we are using droppables, inform the manager about the drop
            var dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour)
                dropped = $.ui.ddmanager.drop(this, event);

            //if a drop comes from outside (a sortable)
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }

            //if the original element is removed, don't bother to continue if helper is set to "original"
            if ((!this.element[0] || !this.element[0].parentNode) && this.options.helper == "original")
                return false;

            if ((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                var self = this;
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                    if (self._trigger("stop", event) !== false) {
                        self._clear();
                    }
                });
            } else {
                if (this._trigger("stop", event) !== false) {
                    this._clear();
                }
            }

            return false;
        },

        _mouseUp:function (event) {
            if (this.options.iframeFix === true) {
                $("div.ui-draggable-iframeFix").each(function () {
                    this.parentNode.removeChild(this);
                }); //Remove frame helpers
            }

            //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
            if ($.ui.ddmanager) $.ui.ddmanager.dragStop(this, event);

            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },

        cancel:function () {

            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp({});
            } else {
                this._clear();
            }

            return this;

        },

        _getHandle:function (event) {

            var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
            $(this.options.handle, this.element)
                .find("*")
                .andSelf()
                .each(function () {
                    if (this == event.target) handle = true;
                });

            return handle;

        },

        _createHelper:function (event) {

            var o = this.options;
            var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);

            if (!helper.parents('body').length)
                helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));

            if (helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
                helper.css("position", "absolute");

            return helper;

        },

        _adjustOffsetFromHelper:function (obj) {
            if (typeof obj == 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {left:+obj[0], top:+obj[1] || 0};
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },

        _getParentOffset:function () {

            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();

            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }

            if ((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
                || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie)) //Ugly IE fix
                po = { top:0, left:0 };

            return {
                top:po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left:po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };

        },

        _getRelativeOffset:function () {

            if (this.cssPosition == "relative") {
                var p = this.element.position();
                return {
                    top:p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left:p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else {
                return { top:0, left:0 };
            }

        },

        _cacheMargins:function () {
            this.margins = {
                left:(parseInt(this.element.css("marginLeft"), 10) || 0),
                top:(parseInt(this.element.css("marginTop"), 10) || 0),
                right:(parseInt(this.element.css("marginRight"), 10) || 0),
                bottom:(parseInt(this.element.css("marginBottom"), 10) || 0)
            };
        },

        _cacheHelperProportions:function () {
            this.helperProportions = {
                width:this.helper.outerWidth(),
                height:this.helper.outerHeight()
            };
        },

        _setContainment:function () {

            var o = this.options;
            if (o.containment == 'parent') o.containment = this.helper[0].parentNode;
            if (o.containment == 'document' || o.containment == 'window') this.containment = [
                o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
                o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
                (o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
                (o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
            ];

            if (!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
                var c = $(o.containment);
                var ce = c[0];
                if (!ce) return;
                var co = c.offset();
                var over = ($(ce).css("overflow") != 'hidden');

                this.containment = [
                    (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0),
                    (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0),
                    (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
                    (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom
                ];
                this.relative_container = c;

            } else if (o.containment.constructor == Array) {
                this.containment = o.containment;
            }

        },

        _convertPositionTo:function (d, pos) {

            if (!pos) pos = this.position;
            var mod = d == "absolute" ? 1 : -1;
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

            return {
                top:(
                    pos.top                                                                    // The absolute mouse position
                        + this.offset.relative.top * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.top * mod                                            // The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
                    ),
                left:(
                    pos.left                                                                // The absolute mouse position
                        + this.offset.relative.left * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.left * mod                                            // The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
                    )
            };

        },

        _generatePosition:function (event) {

            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            var pageX = event.pageX;
            var pageY = event.pageY;

            /*
             * - Position constraining -
             * Constrain the position to a mix of grid, containment.
             */

            if (this.originalPosition) { //If we are not dragging yet, we won't check for options
                var containment;
                if (this.containment) {
                    if (this.relative_container) {
                        var co = this.relative_container.offset();
                        containment = [ this.containment[0] + co.left,
                            this.containment[1] + co.top,
                            this.containment[2] + co.left,
                            this.containment[3] + co.top ];
                    }
                    else {
                        containment = this.containment;
                    }

                    if (event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;
                }

                if (o.grid) {
                    //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
                    var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

                    var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }

            }

            return {
                top:(
                    pageY                                                                // The absolute mouse position
                        - this.offset.click.top                                                    // Click offset (relative to the element)
                        - this.offset.relative.top                                                // Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.top                                                // The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
                    ),
                left:(
                    pageX                                                                // The absolute mouse position
                        - this.offset.click.left                                                // Click offset (relative to the element)
                        - this.offset.relative.left                                                // Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.left                                                // The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
                    )
            };

        },

        _clear:function () {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
            //if($.ui.ddmanager) $.ui.ddmanager.current = null;
            this.helper = null;
            this.cancelHelperRemoval = false;
        },

        // From now on bulk stuff - mainly helpers

        _trigger:function (type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [event, ui]);
            if (type == "drag") this.positionAbs = this._convertPositionTo("absolute"); //The absolute position has to be recalculated after plugins
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },

        plugins:{},

        _uiHash:function (event) {
            return {
                helper:this.helper,
                position:this.position,
                originalPosition:this.originalPosition,
                offset:this.positionAbs
            };
        }

    });

    $.extend($.ui.draggable, {
        version:"1.8.18"
    });

    $.ui.plugin.add("draggable", "connectToSortable", {
        start:function (event, ui) {

            var inst = $(this).data("draggable"), o = inst.options,
                uiSortable = $.extend({}, ui, { item:inst.element });
            inst.sortables = [];
            $(o.connectToSortable).each(function () {
                var sortable = $.data(this, 'sortable');
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({
                        instance:sortable,
                        shouldRevert:sortable.options.revert
                    });
                    sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
                    sortable._trigger("activate", event, uiSortable);
                }
            });

        },
        stop:function (event, ui) {

            //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
            var inst = $(this).data("draggable"),
                uiSortable = $.extend({}, ui, { item:inst.element });

            $.each(inst.sortables, function () {
                if (this.instance.isOver) {

                    this.instance.isOver = 0;

                    inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
                    this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

                    //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: 'valid/invalid'
                    if (this.shouldRevert) this.instance.options.revert = true;

                    //Trigger the stop of the sortable
                    this.instance._mouseStop(event);

                    this.instance.options.helper = this.instance.options._helper;

                    //If the helper has been the original item, restore properties in the sortable
                    if (inst.options.helper == 'original')
                        this.instance.currentItem.css({ top:'auto', left:'auto' });

                } else {
                    this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
                    this.instance._trigger("deactivate", event, uiSortable);
                }

            });

        },
        drag:function (event, ui) {

            var inst = $(this).data("draggable"), self = this;

            var checkPos = function (o) {
                var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
                var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;
                var itemHeight = o.height, itemWidth = o.width;
                var itemTop = o.top, itemLeft = o.left;

                return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
            };

            $.each(inst.sortables, function (i) {

                //Copy over some variables to allow calling the sortable's native _intersectsWith
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;

                if (this.instance._intersectsWith(this.instance.containerCache)) {

                    //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
                    if (!this.instance.isOver) {

                        this.instance.isOver = 1;
                        //Now we fake the start of dragging for the sortable instance,
                        //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
                        //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
                        this.instance.currentItem = $(self).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
                        this.instance.options.helper = function () {
                            return ui.helper[0];
                        };

                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, true);
                        this.instance._mouseStart(event, true, true);

                        //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element; //draggable revert needs that
                        //hack so receive/update callbacks work (mostly)
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;

                    }

                    //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
                    if (this.instance.currentItem) this.instance._mouseDrag(event);

                } else {

                    //If it doesn't intersect with the sortable, and it intersected before,
                    //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
                    if (this.instance.isOver) {

                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;

                        //Prevent reverting on this forced stop
                        this.instance.options.revert = false;

                        // The out event needs to be triggered independently
                        this.instance._trigger('out', event, this.instance._uiHash(this.instance));

                        this.instance._mouseStop(event, true);
                        this.instance.options.helper = this.instance.options._helper;

                        //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
                        this.instance.currentItem.remove();
                        if (this.instance.placeholder) this.instance.placeholder.remove();

                        inst._trigger("fromSortable", event);
                        inst.dropped = false; //draggable revert needs that
                    }

                }
                ;

            });

        }
    });

    $.ui.plugin.add("draggable", "cursor", {
        start:function (event, ui) {
            var t = $('body'), o = $(this).data('draggable').options;
            if (t.css("cursor")) o._cursor = t.css("cursor");
            t.css("cursor", o.cursor);
        },
        stop:function (event, ui) {
            var o = $(this).data('draggable').options;
            if (o._cursor) $('body').css("cursor", o._cursor);
        }
    });

    $.ui.plugin.add("draggable", "opacity", {
        start:function (event, ui) {
            var t = $(ui.helper), o = $(this).data('draggable').options;
            if (t.css("opacity")) o._opacity = t.css("opacity");
            t.css('opacity', o.opacity);
        },
        stop:function (event, ui) {
            var o = $(this).data('draggable').options;
            if (o._opacity) $(ui.helper).css('opacity', o._opacity);
        }
    });

    $.ui.plugin.add("draggable", "scroll", {
        start:function (event, ui) {
            var i = $(this).data("draggable");
            if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset();
        },
        drag:function (event, ui) {

            var i = $(this).data("draggable"), o = i.options, scrolled = false;

            if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {

                if (!o.axis || o.axis != 'x') {
                    if ((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                    else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                }

                if (!o.axis || o.axis != 'y') {
                    if ((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                    else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                }

            } else {

                if (!o.axis || o.axis != 'x') {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                }

                if (!o.axis || o.axis != 'y') {
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }

            }

            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(i, event);

        }
    });

    $.ui.plugin.add("draggable", "snap", {
        start:function (event, ui) {

            var i = $(this).data("draggable"), o = i.options;
            i.snapElements = [];

            $(o.snap.constructor != String ? ( o.snap.items || ':data(draggable)' ) : o.snap).each(function () {
                var $t = $(this);
                var $o = $t.offset();
                if (this != i.element[0]) i.snapElements.push({
                    item:this,
                    width:$t.outerWidth(), height:$t.outerHeight(),
                    top:$o.top, left:$o.left
                });
            });

        },
        drag:function (event, ui) {

            var inst = $(this).data("draggable"), o = inst.options;
            var d = o.snapTolerance;

            var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
                y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

            for (var i = inst.snapElements.length - 1; i >= 0; i--) {

                var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width,
                    t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;

                //Yes, I know, this is insane ;)
                if (!((l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d) || (l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d) || (l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d) || (l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d))) {
                    if (inst.snapElements[i].snapping) (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem:inst.snapElements[i].item })));
                    inst.snapElements[i].snapping = false;
                    continue;
                }

                if (o.snapMode != 'inner') {
                    var ts = Math.abs(t - y2) <= d;
                    var bs = Math.abs(b - y1) <= d;
                    var ls = Math.abs(l - x2) <= d;
                    var rs = Math.abs(r - x1) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", { top:t - inst.helperProportions.height, left:0 }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", { top:b, left:0 }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", { top:0, left:l - inst.helperProportions.width }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", { top:0, left:r }).left - inst.margins.left;
                }

                var first = (ts || bs || ls || rs);

                if (o.snapMode != 'outer') {
                    var ts = Math.abs(t - y1) <= d;
                    var bs = Math.abs(b - y2) <= d;
                    var ls = Math.abs(l - x1) <= d;
                    var rs = Math.abs(r - x2) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", { top:t, left:0 }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", { top:b - inst.helperProportions.height, left:0 }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", { top:0, left:l }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", { top:0, left:r - inst.helperProportions.width }).left - inst.margins.left;
                }

                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                    (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem:inst.snapElements[i].item })));
                inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

            }
            ;

        }
    });

    $.ui.plugin.add("draggable", "stack", {
        start:function (event, ui) {

            var o = $(this).data("draggable").options;

            var group = $.makeArray($(o.stack)).sort(function (a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            if (!group.length) {
                return;
            }

            var min = parseInt(group[0].style.zIndex) || 0;
            $(group).each(function (i) {
                this.style.zIndex = min + i;
            });

            this[0].style.zIndex = min + group.length;

        }
    });

    $.ui.plugin.add("draggable", "zIndex", {
        start:function (event, ui) {
            var t = $(ui.helper), o = $(this).data("draggable").options;
            if (t.css("zIndex")) o._zIndex = t.css("zIndex");
            t.css('zIndex', o.zIndex);
        },
        stop:function (event, ui) {
            var o = $(this).data("draggable").options;
            if (o._zIndex) $(ui.helper).css('zIndex', o._zIndex);
        }
    });

})(jQuery);
/*
 * jQuery UI Droppable 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Droppables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.mouse.js
 *	jquery.ui.draggable.js
 */
(function ($, undefined) {

    $.widget("ui.droppable", {
        widgetEventPrefix:"drop",
        options:{
            accept:'*',
            activeClass:false,
            addClasses:true,
            greedy:false,
            hoverClass:false,
            scope:'default',
            tolerance:'intersect'
        },
        _create:function () {

            var o = this.options, accept = o.accept;
            this.isover = 0;
            this.isout = 1;

            this.accept = $.isFunction(accept) ? accept : function (d) {
                return d.is(accept);
            };

            //Store the droppable's proportions
            this.proportions = { width:this.element[0].offsetWidth, height:this.element[0].offsetHeight };

            // Add the reference and positions to the manager
            $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
            $.ui.ddmanager.droppables[o.scope].push(this);

            (o.addClasses && this.element.addClass("ui-droppable"));

        },

        destroy:function () {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            for (var i = 0; i < drop.length; i++)
                if (drop[i] == this)
                    drop.splice(i, 1);

            this.element
                .removeClass("ui-droppable ui-droppable-disabled")
                .removeData("droppable")
                .unbind(".droppable");

            return this;
        },

        _setOption:function (key, value) {

            if (key == 'accept') {
                this.accept = $.isFunction(value) ? value : function (d) {
                    return d.is(value);
                };
            }
            $.Widget.prototype._setOption.apply(this, arguments);
        },

        _activate:function (event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass) this.element.addClass(this.options.activeClass);
            (draggable && this._trigger('activate', event, this.ui(draggable)));
        },

        _deactivate:function (event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass) this.element.removeClass(this.options.activeClass);
            (draggable && this._trigger('deactivate', event, this.ui(draggable)));
        },

        _over:function (event) {

            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.hoverClass) this.element.addClass(this.options.hoverClass);
                this._trigger('over', event, this.ui(draggable));
            }

        },

        _out:function (event) {

            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
                this._trigger('out', event, this.ui(draggable));
            }

        },

        _drop:function (event, custom) {

            var draggable = custom || $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return false; // Bail if draggable and droppable are same element

            var childrenIntersection = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
                var inst = $.data(this, 'droppable');
                if (
                    inst.options.greedy
                        && !inst.options.disabled
                        && inst.options.scope == draggable.options.scope
                        && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element))
                        && $.ui.intersect(draggable, $.extend(inst, { offset:inst.element.offset() }), inst.options.tolerance)
                    ) {
                    childrenIntersection = true;
                    return false;
                }
            });
            if (childrenIntersection) return false;

            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                if (this.options.activeClass) this.element.removeClass(this.options.activeClass);
                if (this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
                this._trigger('drop', event, this.ui(draggable));
                return this.element;
            }

            return false;

        },

        ui:function (c) {
            return {
                draggable:(c.currentItem || c.element),
                helper:c.helper,
                position:c.position,
                offset:c.positionAbs
            };
        }

    });

    $.extend($.ui.droppable, {
        version:"1.8.18"
    });

    $.ui.intersect = function (draggable, droppable, toleranceMode) {

        if (!droppable.offset) return false;

        var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
            y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;
        var l = droppable.offset.left, r = l + droppable.proportions.width,
            t = droppable.offset.top, b = t + droppable.proportions.height;

        switch (toleranceMode) {
            case 'fit':
                return (l <= x1 && x2 <= r
                    && t <= y1 && y2 <= b);
                break;
            case 'intersect':
                return (l < x1 + (draggable.helperProportions.width / 2) // Right Half
                    && x2 - (draggable.helperProportions.width / 2) < r // Left Half
                    && t < y1 + (draggable.helperProportions.height / 2) // Bottom Half
                    && y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
                break;
            case 'pointer':
                var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left),
                    draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top),
                    isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
                return isOver;
                break;
            case 'touch':
                return (
                    (y1 >= t && y1 <= b) || // Top edge touching
                        (y2 >= t && y2 <= b) || // Bottom edge touching
                        (y1 < t && y2 > b)        // Surrounded vertically
                    ) && (
                    (x1 >= l && x1 <= r) || // Left edge touching
                        (x2 >= l && x2 <= r) || // Right edge touching
                        (x1 < l && x2 > r)        // Surrounded horizontally
                    );
                break;
            default:
                return false;
                break;
        }

    };

    /*
     This manager tracks offsets of draggables and droppables
     */
    $.ui.ddmanager = {
        current:null,
        droppables:{ 'default':[] },
        prepareOffsets:function (t, event) {

            var m = $.ui.ddmanager.droppables[t.options.scope] || [];
            var type = event ? event.type : null; // workaround for #2317
            var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();

            droppablesLoop: for (var i = 0; i < m.length; i++) {

                if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element)))) continue;	//No disabled and non-accepted
                for (var j = 0; j < list.length; j++) {
                    if (list[j] == m[i].element[0]) {
                        m[i].proportions.height = 0;
                        continue droppablesLoop;
                    }
                }
                ; //Filter out elements in the current dragged item
                m[i].visible = m[i].element.css("display") != "none";
                if (!m[i].visible) continue; 									//If the element is not visible, continue

                if (type == "mousedown") m[i]._activate.call(m[i], event); //Activate the droppable if used directly from draggables

                m[i].offset = m[i].element.offset();
                m[i].proportions = { width:m[i].element[0].offsetWidth, height:m[i].element[0].offsetHeight };

            }

        },
        drop:function (draggable, event) {

            var dropped = false;
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {

                if (!this.options) return;
                if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                    dropped = this._drop.call(this, event) || dropped;

                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    this.isout = 1;
                    this.isover = 0;
                    this._deactivate.call(this, event);
                }

            });
            return dropped;

        },
        dragStart:function (draggable, event) {
            //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
            draggable.element.parents(":not(body,html)").bind("scroll.droppable", function () {
                if (!draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);
            });
        },
        drag:function (draggable, event) {

            //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
            if (draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);

            //Run through all droppables and check their positions based on specific tolerance options
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {

                if (this.options.disabled || this.greedyChild || !this.visible) return;
                var intersects = $.ui.intersect(draggable, this, this.options.tolerance);

                var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);
                if (!c) return;

                var parentInstance;
                if (this.options.greedy) {
                    var parent = this.element.parents(':data(droppable):eq(0)');
                    if (parent.length) {
                        parentInstance = $.data(parent[0], 'droppable');
                        parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
                    }
                }

                // we just moved into a greedy child
                if (parentInstance && c == 'isover') {
                    parentInstance['isover'] = 0;
                    parentInstance['isout'] = 1;
                    parentInstance._out.call(parentInstance, event);
                }

                this[c] = 1;
                this[c == 'isout' ? 'isover' : 'isout'] = 0;
                this[c == "isover" ? "_over" : "_out"].call(this, event);

                // we just moved out of a greedy child
                if (parentInstance && c == 'isout') {
                    parentInstance['isout'] = 0;
                    parentInstance['isover'] = 1;
                    parentInstance._over.call(parentInstance, event);
                }
            });

        },
        dragStop:function (draggable, event) {
            draggable.element.parents(":not(body,html)").unbind("scroll.droppable");
            //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
            if (!draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);
        }
    };

})(jQuery);
/*
 * jQuery UI Resizable 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Resizables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.resizable", $.ui.mouse, {
        widgetEventPrefix:"resize",
        options:{
            alsoResize:false,
            animate:false,
            animateDuration:"slow",
            animateEasing:"swing",
            aspectRatio:false,
            autoHide:false,
            containment:false,
            ghost:false,
            grid:false,
            handles:"e,s,se",
            helper:false,
            maxHeight:null,
            maxWidth:null,
            minHeight:10,
            minWidth:10,
            zIndex:1000
        },
        _create:function () {

            var self = this, o = this.options;
            this.element.addClass("ui-resizable");

            $.extend(this, {
                _aspectRatio:!!(o.aspectRatio),
                aspectRatio:o.aspectRatio,
                originalElement:this.element,
                _proportionallyResizeElements:[],
                _helper:o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
            });

            //Wrap the element if it cannot hold child nodes
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

                //Create a wrapper element and set the wrapper to the new current internal element
                this.element.wrap(
                    $('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                        position:this.element.css('position'),
                        width:this.element.outerWidth(),
                        height:this.element.outerHeight(),
                        top:this.element.css('top'),
                        left:this.element.css('left')
                    })
                );

                //Overwrite the original this.element
                this.element = this.element.parent().data(
                    "resizable", this.element.data('resizable')
                );

                this.elementIsWrapper = true;

                //Move margins to the wrapper
                this.element.css({ marginLeft:this.originalElement.css("marginLeft"), marginTop:this.originalElement.css("marginTop"), marginRight:this.originalElement.css("marginRight"), marginBottom:this.originalElement.css("marginBottom") });
                this.originalElement.css({ marginLeft:0, marginTop:0, marginRight:0, marginBottom:0});

                //Prevent Safari textarea resize
                this.originalResizeStyle = this.originalElement.css('resize');
                this.originalElement.css('resize', 'none');

                //Push the actual element to our proportionallyResize internal array
                this._proportionallyResizeElements.push(this.originalElement.css({ position:'static', zoom:1, display:'block' }));

                // avoid IE jump (hard set the margin)
                this.originalElement.css({ margin:this.originalElement.css('margin') });

                // fix handlers offset
                this._proportionallyResize();

            }

            this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : { n:'.ui-resizable-n', e:'.ui-resizable-e', s:'.ui-resizable-s', w:'.ui-resizable-w', se:'.ui-resizable-se', sw:'.ui-resizable-sw', ne:'.ui-resizable-ne', nw:'.ui-resizable-nw' });
            if (this.handles.constructor == String) {

                if (this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';
                var n = this.handles.split(",");
                this.handles = {};

                for (var i = 0; i < n.length; i++) {

                    var handle = $.trim(n[i]), hname = 'ui-resizable-' + handle;
                    var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');

                    // increase zIndex of sw, se, ne, nw axis
                    //TODO : this modifies original option
                    if (/sw|se|ne|nw/.test(handle)) axis.css({ zIndex:++o.zIndex });

                    //TODO : What's going on here?
                    if ('se' == handle) {
                        axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                    }
                    ;

                    //Insert into internal handles object and append to element
                    this.handles[handle] = '.ui-resizable-' + handle;
                    this.element.append(axis);
                }

            }

            this._renderAxis = function (target) {

                target = target || this.element;

                for (var i in this.handles) {

                    if (this.handles[i].constructor == String)
                        this.handles[i] = $(this.handles[i], this.element).show();

                    //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

                        var axis = $(this.handles[i], this.element), padWrapper = 0;

                        //Checking the correct pad and border
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

                        //The padding type i have to apply...
                        var padPos = [ 'padding',
                            /ne|nw|n/.test(i) ? 'Top' :
                                /se|sw|s/.test(i) ? 'Bottom' :
                                    /^e$/.test(i) ? 'Right' : 'Left' ].join("");

                        target.css(padPos, padWrapper);

                        this._proportionallyResize();

                    }

                    //TODO: What's that good for? There's not anything to be executed left
                    if (!$(this.handles[i]).length)
                        continue;

                }
            };

            //TODO: make renderAxis a prototype function
            this._renderAxis(this.element);

            this._handles = $('.ui-resizable-handle', this.element)
                .disableSelection();

            //Matching axis name
            this._handles.mouseover(function () {
                if (!self.resizing) {
                    if (this.className)
                        var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                    //Axis, default = se
                    self.axis = axis && axis[1] ? axis[1] : 'se';
                }
            });

            //If we want to auto hide the elements
            if (o.autoHide) {
                this._handles.hide();
                $(this.element)
                    .addClass("ui-resizable-autohide")
                    .hover(function () {
                        if (o.disabled) return;
                        $(this).removeClass("ui-resizable-autohide");
                        self._handles.show();
                    },
                    function () {
                        if (o.disabled) return;
                        if (!self.resizing) {
                            $(this).addClass("ui-resizable-autohide");
                            self._handles.hide();
                        }
                    });
            }

            //Initialize the mouse interaction
            this._mouseInit();

        },

        destroy:function () {

            this._mouseDestroy();

            var _destroy = function (exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
                    .removeData("resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
            };

            //TODO: Unwrap at same DOM position
            if (this.elementIsWrapper) {
                _destroy(this.element);
                var wrapper = this.element;
                wrapper.after(
                    this.originalElement.css({
                        position:wrapper.css('position'),
                        width:wrapper.outerWidth(),
                        height:wrapper.outerHeight(),
                        top:wrapper.css('top'),
                        left:wrapper.css('left')
                    })
                ).remove();
            }

            this.originalElement.css('resize', this.originalResizeStyle);
            _destroy(this.originalElement);

            return this;
        },

        _mouseCapture:function (event) {
            var handle = false;
            for (var i in this.handles) {
                if ($(this.handles[i])[0] == event.target) {
                    handle = true;
                }
            }

            return !this.options.disabled && handle;
        },

        _mouseStart:function (event) {

            var o = this.options, iniPos = this.element.position(), el = this.element;

            this.resizing = true;
            this.documentScroll = { top:$(document).scrollTop(), left:$(document).scrollLeft() };

            // bugfix for http://dev.jquery.com/ticket/1749
            if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
                el.css({ position:'absolute', top:iniPos.top, left:iniPos.left });
            }

            this._renderProxy();

            var curleft = num(this.helper.css('left')), curtop = num(this.helper.css('top'));

            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }

            //Store needed variables
            this.offset = this.helper.offset();
            this.position = { left:curleft, top:curtop };
            this.size = this._helper ? { width:el.outerWidth(), height:el.outerHeight() } : { width:el.width(), height:el.height() };
            this.originalSize = this._helper ? { width:el.outerWidth(), height:el.outerHeight() } : { width:el.width(), height:el.height() };
            this.originalPosition = { left:curleft, top:curtop };
            this.sizeDiff = { width:el.outerWidth() - el.width(), height:el.outerHeight() - el.height() };
            this.originalMousePosition = { left:event.pageX, top:event.pageY };

            //Aspect Ratio
            this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

            var cursor = $('.ui-resizable-' + this.axis).css('cursor');
            $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);

            el.addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true;
        },

        _mouseDrag:function (event) {

            //Increase performance, avoid regex
            var el = this.helper, o = this.options, props = {},
                self = this, smp = this.originalMousePosition, a = this.axis;

            var dx = (event.pageX - smp.left) || 0, dy = (event.pageY - smp.top) || 0;
            var trigger = this._change[a];
            if (!trigger) return false;

            // Calculate the attrs that will be change
            var data = trigger.apply(this, [event, dx, dy]), ie6 = $.browser.msie && $.browser.version < 7, csdif = this.sizeDiff;

            // Put this in the mouseDrag handler since the user can start pressing shift while resizing
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey)
                data = this._updateRatio(data, event);

            data = this._respectSize(data, event);

            // plugins callbacks need to be called first
            this._propagate("resize", event);

            el.css({
                top:this.position.top + "px", left:this.position.left + "px",
                width:this.size.width + "px", height:this.size.height + "px"
            });

            if (!this._helper && this._proportionallyResizeElements.length)
                this._proportionallyResize();

            this._updateCache(data);

            // calling the user callback at the end
            this._trigger('resize', event, this.ui());

            return false;
        },

        _mouseStop:function (event) {

            this.resizing = false;
            var o = this.options, self = this;

            if (this._helper) {
                var pr = this._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                    soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
                    soffsetw = ista ? 0 : self.sizeDiff.width;

                var s = { width:(self.helper.width() - soffsetw), height:(self.helper.height() - soffseth) },
                    left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                    top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

                if (!o.animate)
                    this.element.css($.extend(s, { top:top, left:left }));

                self.helper.height(self.size.height);
                self.helper.width(self.size.width);

                if (this._helper && !o.animate) this._proportionallyResize();
            }

            $('body').css('cursor', 'auto');

            this.element.removeClass("ui-resizable-resizing");

            this._propagate("stop", event);

            if (this._helper) this.helper.remove();
            return false;

        },

        _updateVirtualBoundaries:function (forceAspectRatio) {
            var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;

            b = {
                minWidth:isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth:isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                minHeight:isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight:isNumber(o.maxHeight) ? o.maxHeight : Infinity
            };

            if (this._aspectRatio || forceAspectRatio) {
                // We want to create an enclosing box whose aspect ration is the requested one
                // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;

                if (pMinWidth > b.minWidth) b.minWidth = pMinWidth;
                if (pMinHeight > b.minHeight) b.minHeight = pMinHeight;
                if (pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
                if (pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
            }
            this._vBoundaries = b;
        },

        _updateCache:function (data) {
            var o = this.options;
            this.offset = this.helper.offset();
            if (isNumber(data.left)) this.position.left = data.left;
            if (isNumber(data.top)) this.position.top = data.top;
            if (isNumber(data.height)) this.size.height = data.height;
            if (isNumber(data.width)) this.size.width = data.width;
        },

        _updateRatio:function (data, event) {

            var o = this.options, cpos = this.position, csize = this.size, a = this.axis;

            if (isNumber(data.height)) data.width = (data.height * this.aspectRatio);
            else if (isNumber(data.width)) data.height = (data.width / this.aspectRatio);

            if (a == 'sw') {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if (a == 'nw') {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }

            return data;
        },

        _respectSize:function (data, event) {

            var el = this.helper, o = this._vBoundaries, pRatio = this._aspectRatio || event.shiftKey, a = this.axis,
                ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
                isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);

            if (isminw) data.width = o.minWidth;
            if (isminh) data.height = o.minHeight;
            if (ismaxw) data.width = o.maxWidth;
            if (ismaxh) data.height = o.maxHeight;

            var dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height;
            var cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);

            if (isminw && cw) data.left = dw - o.minWidth;
            if (ismaxw && cw) data.left = dw - o.maxWidth;
            if (isminh && ch)    data.top = dh - o.minHeight;
            if (ismaxh && ch)    data.top = dh - o.maxHeight;

            // fixing jump error on top/left - bug #2330
            var isNotwh = !data.width && !data.height;
            if (isNotwh && !data.left && data.top) data.top = null;
            else if (isNotwh && !data.top && data.left) data.left = null;

            return data;
        },

        _proportionallyResize:function () {

            var o = this.options;
            if (!this._proportionallyResizeElements.length) return;
            var element = this.helper || this.element;

            for (var i = 0; i < this._proportionallyResizeElements.length; i++) {

                var prel = this._proportionallyResizeElements[i];

                if (!this.borderDif) {
                    var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
                        p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];

                    this.borderDif = $.map(b, function (v, i) {
                        var border = parseInt(v, 10) || 0, padding = parseInt(p[i], 10) || 0;
                        return border + padding;
                    });
                }

                if ($.browser.msie && !(!($(element).is(':hidden') || $(element).parents(':hidden').length)))
                    continue;

                prel.css({
                    height:(element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                    width:(element.width() - this.borderDif[1] - this.borderDif[3]) || 0
                });

            }
            ;

        },

        _renderProxy:function () {

            var el = this.element, o = this.options;
            this.elementOffset = el.offset();

            if (this._helper) {

                this.helper = this.helper || $('<div style="overflow:hidden;"></div>');

                // fix ie6 offset TODO: This seems broken
                var ie6 = $.browser.msie && $.browser.version < 7, ie6offset = (ie6 ? 1 : 0),
                    pxyoffset = ( ie6 ? 2 : -1 );

                this.helper.addClass(this._helper).css({
                    width:this.element.outerWidth() + pxyoffset,
                    height:this.element.outerHeight() + pxyoffset,
                    position:'absolute',
                    left:this.elementOffset.left - ie6offset + 'px',
                    top:this.elementOffset.top - ie6offset + 'px',
                    zIndex:++o.zIndex //TODO: Don't modify option
                });

                this.helper
                    .appendTo("body")
                    .disableSelection();

            } else {
                this.helper = this.element;
            }

        },

        _change:{
            e:function (event, dx, dy) {
                return { width:this.originalSize.width + dx };
            },
            w:function (event, dx, dy) {
                var o = this.options, cs = this.originalSize, sp = this.originalPosition;
                return { left:sp.left + dx, width:cs.width - dx };
            },
            n:function (event, dx, dy) {
                var o = this.options, cs = this.originalSize, sp = this.originalPosition;
                return { top:sp.top + dy, height:cs.height - dy };
            },
            s:function (event, dx, dy) {
                return { height:this.originalSize.height + dy };
            },
            se:function (event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
            },
            sw:function (event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
            },
            ne:function (event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
            },
            nw:function (event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
            }
        },

        _propagate:function (n, event) {
            $.ui.plugin.call(this, n, [event, this.ui()]);
            (n != "resize" && this._trigger(n, event, this.ui()));
        },

        plugins:{},

        ui:function () {
            return {
                originalElement:this.originalElement,
                element:this.element,
                helper:this.helper,
                position:this.position,
                size:this.size,
                originalSize:this.originalSize,
                originalPosition:this.originalPosition
            };
        }

    });

    $.extend($.ui.resizable, {
        version:"1.8.18"
    });

    /*
     * Resizable Extensions
     */

    $.ui.plugin.add("resizable", "alsoResize", {

        start:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options;

            var _store = function (exp) {
                $(exp).each(function () {
                    var el = $(this);
                    el.data("resizable-alsoresize", {
                        width:parseInt(el.width(), 10), height:parseInt(el.height(), 10),
                        left:parseInt(el.css('left'), 10), top:parseInt(el.css('top'), 10)
                    });
                });
            };

            if (typeof(o.alsoResize) == 'object' && !o.alsoResize.parentNode) {
                if (o.alsoResize.length) {
                    o.alsoResize = o.alsoResize[0];
                    _store(o.alsoResize);
                }
                else {
                    $.each(o.alsoResize, function (exp) {
                        _store(exp);
                    });
                }
            } else {
                _store(o.alsoResize);
            }
        },

        resize:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options, os = self.originalSize, op = self.originalPosition;

            var delta = {
                    height:(self.size.height - os.height) || 0, width:(self.size.width - os.width) || 0,
                    top:(self.position.top - op.top) || 0, left:(self.position.left - op.left) || 0
                },

                _alsoResize = function (exp, c) {
                    $(exp).each(function () {
                        var el = $(this), start = $(this).data("resizable-alsoresize"), style = {},
                            css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];

                        $.each(css, function (i, prop) {
                            var sum = (start[prop] || 0) + (delta[prop] || 0);
                            if (sum && sum >= 0)
                                style[prop] = sum || null;
                        });

                        el.css(style);
                    });
                };

            if (typeof(o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
                $.each(o.alsoResize, function (exp, c) {
                    _alsoResize(exp, c);
                });
            } else {
                _alsoResize(o.alsoResize);
            }
        },

        stop:function (event, ui) {
            $(this).removeData("resizable-alsoresize");
        }
    });

    $.ui.plugin.add("resizable", "animate", {

        stop:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options;

            var pr = self._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
                soffsetw = ista ? 0 : self.sizeDiff.width;

            var style = { width:(self.size.width - soffsetw), height:(self.size.height - soffseth) },
                left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

            self.element.animate(
                $.extend(style, top && left ? { top:top, left:left } : {}), {
                    duration:o.animateDuration,
                    easing:o.animateEasing,
                    step:function () {

                        var data = {
                            width:parseInt(self.element.css('width'), 10),
                            height:parseInt(self.element.css('height'), 10),
                            top:parseInt(self.element.css('top'), 10),
                            left:parseInt(self.element.css('left'), 10)
                        };

                        if (pr && pr.length) $(pr[0]).css({ width:data.width, height:data.height });

                        // propagating resize, and updating values for each animation step
                        self._updateCache(data);
                        self._propagate("resize", event);

                    }
                }
            );
        }

    });

    $.ui.plugin.add("resizable", "containment", {

        start:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options, el = self.element;
            var oc = o.containment, ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
            if (!ce) return;

            self.containerElement = $(ce);

            if (/document/.test(oc) || oc == document) {
                self.containerOffset = { left:0, top:0 };
                self.containerPosition = { left:0, top:0 };

                self.parentData = {
                    element:$(document), left:0, top:0,
                    width:$(document).width(), height:$(document).height() || document.body.parentNode.scrollHeight
                };
            }

            // i'm a node, so compute top, left, right, bottom
            else {
                var element = $(ce), p = [];
                $([ "Top", "Right", "Left", "Bottom" ]).each(function (i, name) {
                    p[i] = num(element.css("padding" + name));
                });

                self.containerOffset = element.offset();
                self.containerPosition = element.position();
                self.containerSize = { height:(element.innerHeight() - p[3]), width:(element.innerWidth() - p[1]) };

                var co = self.containerOffset, ch = self.containerSize.height, cw = self.containerSize.width,
                    width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw ), height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

                self.parentData = {
                    element:ce, left:co.left, top:co.top, width:width, height:height
                };
            }
        },

        resize:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options,
                ps = self.containerSize, co = self.containerOffset, cs = self.size, cp = self.position,
                pRatio = self._aspectRatio || event.shiftKey, cop = { top:0, left:0 }, ce = self.containerElement;

            if (ce[0] != document && (/static/).test(ce.css('position'))) cop = co;

            if (cp.left < (self._helper ? co.left : 0)) {
                self.size.width = self.size.width + (self._helper ? (self.position.left - co.left) : (self.position.left - cop.left));
                if (pRatio) self.size.height = self.size.width / o.aspectRatio;
                self.position.left = o.helper ? co.left : 0;
            }

            if (cp.top < (self._helper ? co.top : 0)) {
                self.size.height = self.size.height + (self._helper ? (self.position.top - co.top) : self.position.top);
                if (pRatio) self.size.width = self.size.height * o.aspectRatio;
                self.position.top = self._helper ? co.top : 0;
            }

            self.offset.left = self.parentData.left + self.position.left;
            self.offset.top = self.parentData.top + self.position.top;

            var woset = Math.abs((self._helper ? self.offset.left - cop.left : (self.offset.left - cop.left)) + self.sizeDiff.width),
                hoset = Math.abs((self._helper ? self.offset.top - cop.top : (self.offset.top - co.top)) + self.sizeDiff.height);

            var isParent = self.containerElement.get(0) == self.element.parent().get(0),
                isOffsetRelative = /relative|absolute/.test(self.containerElement.css('position'));

            if (isParent && isOffsetRelative) woset -= self.parentData.left;

            if (woset + self.size.width >= self.parentData.width) {
                self.size.width = self.parentData.width - woset;
                if (pRatio) self.size.height = self.size.width / self.aspectRatio;
            }

            if (hoset + self.size.height >= self.parentData.height) {
                self.size.height = self.parentData.height - hoset;
                if (pRatio) self.size.width = self.size.height * self.aspectRatio;
            }
        },

        stop:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options, cp = self.position,
                co = self.containerOffset, cop = self.containerPosition, ce = self.containerElement;

            var helper = $(self.helper), ho = helper.offset(), w = helper.outerWidth() - self.sizeDiff.width, h = helper.outerHeight() - self.sizeDiff.height;

            if (self._helper && !o.animate && (/relative/).test(ce.css('position')))
                $(this).css({ left:ho.left - cop.left - co.left, width:w, height:h });

            if (self._helper && !o.animate && (/static/).test(ce.css('position')))
                $(this).css({ left:ho.left - cop.left - co.left, width:w, height:h });

        }
    });

    $.ui.plugin.add("resizable", "ghost", {

        start:function (event, ui) {

            var self = $(this).data("resizable"), o = self.options, cs = self.size;

            self.ghost = self.originalElement.clone();
            self.ghost
                .css({ opacity:.25, display:'block', position:'relative', height:cs.height, width:cs.width, margin:0, left:0, top:0 })
                .addClass('ui-resizable-ghost')
                .addClass(typeof o.ghost == 'string' ? o.ghost : '');

            self.ghost.appendTo(self.helper);

        },

        resize:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options;
            if (self.ghost) self.ghost.css({ position:'relative', height:self.size.height, width:self.size.width });
        },

        stop:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options;
            if (self.ghost && self.helper) self.helper.get(0).removeChild(self.ghost.get(0));
        }

    });

    $.ui.plugin.add("resizable", "grid", {

        resize:function (event, ui) {
            var self = $(this).data("resizable"), o = self.options, cs = self.size, os = self.originalSize, op = self.originalPosition, a = self.axis, ratio = o._aspectRatio || event.shiftKey;
            o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
            var ox = Math.round((cs.width - os.width) / (o.grid[0] || 1)) * (o.grid[0] || 1), oy = Math.round((cs.height - os.height) / (o.grid[1] || 1)) * (o.grid[1] || 1);

            if (/^(se|s|e)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
            }
            else if (/^(ne)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.top = op.top - oy;
            }
            else if (/^(sw)$/.test(a)) {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.left = op.left - ox;
            }
            else {
                self.size.width = os.width + ox;
                self.size.height = os.height + oy;
                self.position.top = op.top - oy;
                self.position.left = op.left - ox;
            }
        }

    });

    var num = function (v) {
        return parseInt(v, 10) || 0;
    };

    var isNumber = function (value) {
        return !isNaN(parseInt(value, 10));
    };

})(jQuery);
/*
 * jQuery UI Selectable 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Selectables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.selectable", $.ui.mouse, {
        options:{
            appendTo:'body',
            autoRefresh:true,
            distance:0,
            filter:'*',
            tolerance:'touch'
        },
        _create:function () {
            var self = this;

            this.element.addClass("ui-selectable");

            this.dragged = false;

            // cache selectee children based on filter
            var selectees;
            this.refresh = function () {
                selectees = $(self.options.filter, self.element[0]);
                selectees.addClass("ui-selectee");
                selectees.each(function () {
                    var $this = $(this);
                    var pos = $this.offset();
                    $.data(this, "selectable-item", {
                        element:this,
                        $element:$this,
                        left:pos.left,
                        top:pos.top,
                        right:pos.left + $this.outerWidth(),
                        bottom:pos.top + $this.outerHeight(),
                        startselected:false,
                        selected:$this.hasClass('ui-selected'),
                        selecting:$this.hasClass('ui-selecting'),
                        unselecting:$this.hasClass('ui-unselecting')
                    });
                });
            };
            this.refresh();

            this.selectees = selectees.addClass("ui-selectee");

            this._mouseInit();

            this.helper = $("<div class='ui-selectable-helper'></div>");
        },

        destroy:function () {
            this.selectees
                .removeClass("ui-selectee")
                .removeData("selectable-item");
            this.element
                .removeClass("ui-selectable ui-selectable-disabled")
                .removeData("selectable")
                .unbind(".selectable");
            this._mouseDestroy();

            return this;
        },

        _mouseStart:function (event) {
            var self = this;

            this.opos = [event.pageX, event.pageY];

            if (this.options.disabled)
                return;

            var options = this.options;

            this.selectees = $(options.filter, this.element[0]);

            this._trigger("start", event);

            $(options.appendTo).append(this.helper);
            // position helper (lasso)
            this.helper.css({
                "left":event.clientX,
                "top":event.clientY,
                "width":0,
                "height":0
            });

            if (options.autoRefresh) {
                this.refresh();
            }

            this.selectees.filter('.ui-selected').each(function () {
                var selectee = $.data(this, "selectable-item");
                selectee.startselected = true;
                if (!event.metaKey && !event.ctrlKey) {
                    selectee.$element.removeClass('ui-selected');
                    selectee.selected = false;
                    selectee.$element.addClass('ui-unselecting');
                    selectee.unselecting = true;
                    // selectable UNSELECTING callback
                    self._trigger("unselecting", event, {
                        unselecting:selectee.element
                    });
                }
            });

            $(event.target).parents().andSelf().each(function () {
                var selectee = $.data(this, "selectable-item");
                if (selectee) {
                    var doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass('ui-selected');
                    selectee.$element
                        .removeClass(doSelect ? "ui-unselecting" : "ui-selected")
                        .addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    // selectable (UN)SELECTING callback
                    if (doSelect) {
                        self._trigger("selecting", event, {
                            selecting:selectee.element
                        });
                    } else {
                        self._trigger("unselecting", event, {
                            unselecting:selectee.element
                        });
                    }
                    return false;
                }
            });

        },

        _mouseDrag:function (event) {
            var self = this;
            this.dragged = true;

            if (this.options.disabled)
                return;

            var options = this.options;

            var x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
            if (x1 > x2) {
                var tmp = x2;
                x2 = x1;
                x1 = tmp;
            }
            if (y1 > y2) {
                var tmp = y2;
                y2 = y1;
                y1 = tmp;
            }
            this.helper.css({left:x1, top:y1, width:x2 - x1, height:y2 - y1});

            this.selectees.each(function () {
                var selectee = $.data(this, "selectable-item");
                //prevent helper from being selected if appendTo: selectable
                if (!selectee || selectee.element == self.element[0])
                    return;
                var hit = false;
                if (options.tolerance == 'touch') {
                    hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
                } else if (options.tolerance == 'fit') {
                    hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
                }

                if (hit) {
                    // SELECT
                    if (selectee.selected) {
                        selectee.$element.removeClass('ui-selected');
                        selectee.selected = false;
                    }
                    if (selectee.unselecting) {
                        selectee.$element.removeClass('ui-unselecting');
                        selectee.unselecting = false;
                    }
                    if (!selectee.selecting) {
                        selectee.$element.addClass('ui-selecting');
                        selectee.selecting = true;
                        // selectable SELECTING callback
                        self._trigger("selecting", event, {
                            selecting:selectee.element
                        });
                    }
                } else {
                    // UNSELECT
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            selectee.$element.removeClass('ui-selecting');
                            selectee.selecting = false;
                            selectee.$element.addClass('ui-selected');
                            selectee.selected = true;
                        } else {
                            selectee.$element.removeClass('ui-selecting');
                            selectee.selecting = false;
                            if (selectee.startselected) {
                                selectee.$element.addClass('ui-unselecting');
                                selectee.unselecting = true;
                            }
                            // selectable UNSELECTING callback
                            self._trigger("unselecting", event, {
                                unselecting:selectee.element
                            });
                        }
                    }
                    if (selectee.selected) {
                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            selectee.$element.removeClass('ui-selected');
                            selectee.selected = false;

                            selectee.$element.addClass('ui-unselecting');
                            selectee.unselecting = true;
                            // selectable UNSELECTING callback
                            self._trigger("unselecting", event, {
                                unselecting:selectee.element
                            });
                        }
                    }
                }
            });

            return false;
        },

        _mouseStop:function (event) {
            var self = this;

            this.dragged = false;

            var options = this.options;

            $('.ui-unselecting', this.element[0]).each(function () {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass('ui-unselecting');
                selectee.unselecting = false;
                selectee.startselected = false;
                self._trigger("unselected", event, {
                    unselected:selectee.element
                });
            });
            $('.ui-selecting', this.element[0]).each(function () {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
                selectee.selecting = false;
                selectee.selected = true;
                selectee.startselected = true;
                self._trigger("selected", event, {
                    selected:selectee.element
                });
            });
            this._trigger("stop", event);

            this.helper.remove();

            return false;
        }

    });

    $.extend($.ui.selectable, {
        version:"1.8.18"
    });

})(jQuery);
/*
 * jQuery UI Sortable 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Sortables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.sortable", $.ui.mouse, {
        widgetEventPrefix:"sort",
        ready:false,
        options:{
            appendTo:"parent",
            axis:false,
            connectWith:false,
            containment:false,
            cursor:'auto',
            cursorAt:false,
            dropOnEmpty:true,
            forcePlaceholderSize:false,
            forceHelperSize:false,
            grid:false,
            handle:false,
            helper:"original",
            items:'> *',
            opacity:false,
            placeholder:false,
            revert:false,
            scroll:true,
            scrollSensitivity:20,
            scrollSpeed:20,
            scope:"default",
            tolerance:"intersect",
            zIndex:1000
        },
        _create:function () {

            var o = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");

            //Get the items
            this.refresh();

            //Let's determine if the items are being displayed horizontally
            this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;

            //Let's determine the parent's offset
            this.offset = this.element.offset();

            //Initialize mouse events for interaction
            this._mouseInit();

            //We're ready to go
            this.ready = true

        },

        destroy:function () {
            $.Widget.prototype.destroy.call(this);
            this.element
                .removeClass("ui-sortable ui-sortable-disabled");
            this._mouseDestroy();

            for (var i = this.items.length - 1; i >= 0; i--)
                this.items[i].item.removeData(this.widgetName + "-item");

            return this;
        },

        _setOption:function (key, value) {
            if (key === "disabled") {
                this.options[ key ] = value;

                this.widget()
                    [ value ? "addClass" : "removeClass"]("ui-sortable-disabled");
            } else {
                // Don't call widget base _setOption for disable as it adds ui-state-disabled class
                $.Widget.prototype._setOption.apply(this, arguments);
            }
        },

        _mouseCapture:function (event, overrideHandle) {
            var that = this;

            if (this.reverting) {
                return false;
            }

            if (this.options.disabled || this.options.type == 'static') return false;

            //We have to refresh the items data once first
            this._refreshItems(event);

            //Find out if the clicked node (or one of its parents) is a actual item in this.items
            var currentItem = null, self = this, nodes = $(event.target).parents().each(function () {
                if ($.data(this, that.widgetName + '-item') == self) {
                    currentItem = $(this);
                    return false;
                }
            });
            if ($.data(event.target, that.widgetName + '-item') == self) currentItem = $(event.target);

            if (!currentItem) return false;
            if (this.options.handle && !overrideHandle) {
                var validHandle = false;

                $(this.options.handle, currentItem).find("*").andSelf().each(function () {
                    if (this == event.target) validHandle = true;
                });
                if (!validHandle) return false;
            }

            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;

        },

        _mouseStart:function (event, overrideHandle, noActivation) {

            var o = this.options, self = this;
            this.currentContainer = this;

            //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
            this.refreshPositions();

            //Create and append the visible helper
            this.helper = this._createHelper(event);

            //Cache the helper size
            this._cacheHelperProportions();

            /*
             * - Position generation -
             * This block generates everything position related - it's the core of draggables.
             */

            //Cache the margins of the original element
            this._cacheMargins();

            //Get the next scrolling parent
            this.scrollParent = this.helper.scrollParent();

            //The element's absolute position on the page minus margins
            this.offset = this.currentItem.offset();
            this.offset = {
                top:this.offset.top - this.margins.top,
                left:this.offset.left - this.margins.left
            };

            // Only after we got the offset, we can change the helper's position to absolute
            // TODO: Still need to figure out a way to make relative sorting possible
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");

            $.extend(this.offset, {
                click:{ //Where the click happened, relative to the element
                    left:event.pageX - this.offset.left,
                    top:event.pageY - this.offset.top
                },
                parent:this._getParentOffset(),
                relative:this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
            });

            //Generate the original position
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;

            //Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

            //Cache the former DOM position
            this.domPosition = { prev:this.currentItem.prev()[0], parent:this.currentItem.parent()[0] };

            //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
            if (this.helper[0] != this.currentItem[0]) {
                this.currentItem.hide();
            }

            //Create the placeholder
            this._createPlaceholder();

            //Set a containment if given in the options
            if (o.containment)
                this._setContainment();

            if (o.cursor) { // cursor option
                if ($('body').css("cursor")) this._storedCursor = $('body').css("cursor");
                $('body').css("cursor", o.cursor);
            }

            if (o.opacity) { // opacity option
                if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", o.opacity);
            }

            if (o.zIndex) { // zIndex option
                if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", o.zIndex);
            }

            //Prepare scrolling
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML')
                this.overflowOffset = this.scrollParent.offset();

            //Call callbacks
            this._trigger("start", event, this._uiHash());

            //Recache the helper size
            if (!this._preserveHelperProportions)
                this._cacheHelperProportions();


            //Post 'activate' events to possible containers
            if (!noActivation) {
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("activate", event, self._uiHash(this));
                }
            }

            //Prepare possible droppables
            if ($.ui.ddmanager)
                $.ui.ddmanager.current = this;

            if ($.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);

            this.dragging = true;

            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
            return true;

        },

        _mouseDrag:function (event) {

            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");

            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }

            //Do scrolling
            if (this.options.scroll) {
                var o = this.options, scrolled = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {

                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity)
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;

                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;

                } else {

                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);

                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);

                }

                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
            }

            //Regenerate the absolute position used for position checks
            this.positionAbs = this._convertPositionTo("absolute");

            //Set the helper position
            if (!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left + 'px';
            if (!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top + 'px';

            //Rearrange
            for (var i = this.items.length - 1; i >= 0; i--) {

                //Cache variables and intersection, continue if no intersection
                var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item);
                if (!intersection) continue;

                if (itemElement != this.currentItem[0] //cannot intersect with itself
                    && this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement //no useless actions that have been done before
                    && !$.ui.contains(this.placeholder[0], itemElement) //no action if the item moved is the parent of the item checked
                    && (this.options.type == 'semi-dynamic' ? !$.ui.contains(this.element[0], itemElement) : true)
                //&& itemElement.parentNode == this.placeholder[0].parentNode // only rearrange items within the same container
                    ) {

                    this.direction = intersection == 1 ? "down" : "up";

                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                        this._rearrange(event, item);
                    } else {
                        break;
                    }

                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }

            //Post events to containers
            this._contactContainers(event);

            //Interconnect with droppables
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

            //Call callbacks
            this._trigger('sort', event, this._uiHash());

            this.lastPositionAbs = this.positionAbs;
            return false;

        },

        _mouseStop:function (event, noPropagation) {

            if (!event) return;

            //If we are using droppables, inform the manager about the drop
            if ($.ui.ddmanager && !this.options.dropBehaviour)
                $.ui.ddmanager.drop(this, event);

            if (this.options.revert) {
                var self = this;
                var cur = self.placeholder.offset();

                self.reverting = true;

                $(this.helper).animate({
                    left:cur.left - this.offset.parent.left - self.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                    top:cur.top - this.offset.parent.top - self.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                }, parseInt(this.options.revert, 10) || 500, function () {
                    self._clear(event);
                });
            } else {
                this._clear(event, noPropagation);
            }

            return false;

        },

        cancel:function () {

            var self = this;

            if (this.dragging) {

                this._mouseUp({ target:null });

                if (this.options.helper == "original")
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                else
                    this.currentItem.show();

                //Post deactivating events to containers
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, self._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, self._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }

            }

            if (this.placeholder) {
                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                if (this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                if (this.options.helper != "original" && this.helper && this.helper[0].parentNode) this.helper.remove();

                $.extend(this, {
                    helper:null,
                    dragging:false,
                    reverting:false,
                    _noFinalSort:null
                });

                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem);
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem);
                }
            }

            return this;

        },

        serialize:function (o) {

            var items = this._getItemsAsjQuery(o && o.connected);
            var str = [];
            o = o || {};

            $(items).each(function () {
                var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
                if (res) str.push((o.key || res[1] + '[]') + '=' + (o.key && o.expression ? res[1] : res[2]));
            });

            if (!str.length && o.key) {
                str.push(o.key + '=');
            }

            return str.join('&');

        },

        toArray:function (o) {

            var items = this._getItemsAsjQuery(o && o.connected);
            var ret = [];
            o = o || {};

            items.each(function () {
                ret.push($(o.item || this).attr(o.attribute || 'id') || '');
            });
            return ret;

        },

        /* Be careful with the following core functions */
        _intersectsWith:function (item) {

            var x1 = this.positionAbs.left,
                x2 = x1 + this.helperProportions.width,
                y1 = this.positionAbs.top,
                y2 = y1 + this.helperProportions.height;

            var l = item.left,
                r = l + item.width,
                t = item.top,
                b = t + item.height;

            var dyClick = this.offset.click.top,
                dxClick = this.offset.click.left;

            var isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;

            if (this.options.tolerance == "pointer"
                || this.options.forcePointerForContainers
                || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height'])
                ) {
                return isOverElement;
            } else {

                return (l < x1 + (this.helperProportions.width / 2) // Right Half
                    && x2 - (this.helperProportions.width / 2) < r // Left Half
                    && t < y1 + (this.helperProportions.height / 2) // Bottom Half
                    && y2 - (this.helperProportions.height / 2) < b ); // Top Half

            }
        },

        _intersectsWithPointer:function (item) {

            var isOverElementHeight = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
                isOverElementWidth = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
                isOverElement = isOverElementHeight && isOverElementWidth,
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();

            if (!isOverElement)
                return false;

            return this.floating ?
                ( ((horizontalDirection && horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1 )
                : ( verticalDirection && (verticalDirection == "down" ? 2 : 1) );

        },

        _intersectsWithSides:function (item) {

            var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height / 2), item.height),
                isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width / 2), item.width),
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();

            if (this.floating && horizontalDirection) {
                return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
            } else {
                return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && !isOverBottomHalf));
            }

        },

        _getDragVerticalDirection:function () {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta != 0 && (delta > 0 ? "down" : "up");
        },

        _getDragHorizontalDirection:function () {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta != 0 && (delta > 0 ? "right" : "left");
        },

        refresh:function (event) {
            this._refreshItems(event);
            this.refreshPositions();
            return this;
        },

        _connectWith:function () {
            var options = this.options;
            return options.connectWith.constructor == String
                ? [options.connectWith]
                : options.connectWith;
        },

        _getItemsAsjQuery:function (connected) {

            var self = this;
            var items = [];
            var queries = [];
            var connectWith = this._connectWith();

            if (connectWith && connected) {
                for (var i = connectWith.length - 1; i >= 0; i--) {
                    var cur = $(connectWith[i]);
                    for (var j = cur.length - 1; j >= 0; j--) {
                        var inst = $.data(cur[j], this.widgetName);
                        if (inst && inst != this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
                        }
                    }
                    ;
                }
                ;
            }

            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options:this.options, item:this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);

            for (var i = queries.length - 1; i >= 0; i--) {
                queries[i][0].each(function () {
                    items.push(this);
                });
            }
            ;

            return $(items);

        },

        _removeCurrentsFromItems:function () {

            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

            for (var i = 0; i < this.items.length; i++) {

                for (var j = 0; j < list.length; j++) {
                    if (list[j] == this.items[i].item[0])
                        this.items.splice(i, 1);
                }
                ;

            }
            ;

        },

        _refreshItems:function (event) {

            this.items = [];
            this.containers = [this];
            var items = this.items;
            var self = this;
            var queries = [
                [$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item:this.currentItem }) : $(this.options.items, this.element), this]
            ];
            var connectWith = this._connectWith();

            if (connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
                for (var i = connectWith.length - 1; i >= 0; i--) {
                    var cur = $(connectWith[i]);
                    for (var j = cur.length - 1; j >= 0; j--) {
                        var inst = $.data(cur[j], this.widgetName);
                        if (inst && inst != this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item:this.currentItem }) : $(inst.options.items, inst.element), inst]);
                            this.containers.push(inst);
                        }
                    }
                    ;
                }
                ;
            }

            for (var i = queries.length - 1; i >= 0; i--) {
                var targetData = queries[i][1];
                var _queries = queries[i][0];

                for (var j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    var item = $(_queries[j]);

                    item.data(this.widgetName + '-item', targetData); // Data for target checking (mouse manager)

                    items.push({
                        item:item,
                        instance:targetData,
                        width:0, height:0,
                        left:0, top:0
                    });
                }
                ;
            }
            ;

        },

        refreshPositions:function (fast) {

            //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset();
            }

            for (var i = this.items.length - 1; i >= 0; i--) {
                var item = this.items[i];

                //We ignore calculating positions of all connected containers when we're not over them
                if (item.instance != this.currentContainer && this.currentContainer && item.item[0] != this.currentItem[0])
                    continue;

                var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }

                var p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
            ;

            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this);
            } else {
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    var p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                }
                ;
            }

            return this;
        },

        _createPlaceholder:function (that) {

            var self = that || this, o = self.options;

            if (!o.placeholder || o.placeholder.constructor == String) {
                var className = o.placeholder;
                o.placeholder = {
                    element:function () {

                        var el = $(document.createElement(self.currentItem[0].nodeName))
                            .addClass(className || self.currentItem[0].className + " ui-sortable-placeholder")
                            .removeClass("ui-sortable-helper")[0];

                        if (!className)
                            el.style.visibility = "hidden";

                        return el;
                    },
                    update:function (container, p) {

                        // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                        // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                        if (className && !o.forcePlaceholderSize) return;

                        //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                        if (!p.height()) {
                            p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop') || 0, 10) - parseInt(self.currentItem.css('paddingBottom') || 0, 10));
                        }
                        ;
                        if (!p.width()) {
                            p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft') || 0, 10) - parseInt(self.currentItem.css('paddingRight') || 0, 10));
                        }
                        ;
                    }
                };
            }

            //Create the placeholder
            self.placeholder = $(o.placeholder.element.call(self.element, self.currentItem));

            //Append it after the actual current item
            self.currentItem.after(self.placeholder);

            //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
            o.placeholder.update(self, self.placeholder);

        },

        _contactContainers:function (event) {

            // get innermost container that intersects with item 
            var innermostContainer = null, innermostIndex = null;


            for (var i = this.containers.length - 1; i >= 0; i--) {

                // never consider a container that's located within the item itself 
                if ($.ui.contains(this.currentItem[0], this.containers[i].element[0]))
                    continue;

                if (this._intersectsWith(this.containers[i].containerCache)) {

                    // if we've already found a container and it's more "inner" than this, then continue 
                    if (innermostContainer && $.ui.contains(this.containers[i].element[0], innermostContainer.element[0]))
                        continue;

                    innermostContainer = this.containers[i];
                    innermostIndex = i;

                } else {
                    // container doesn't intersect. trigger "out" event if necessary 
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }

            }

            // if no intersecting containers found, return 
            if (!innermostContainer) return;

            // move the item into the container if it's not there already
            if (this.containers.length === 1) {
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            } else if (this.currentContainer != this.containers[innermostIndex]) {

                //When entering a new container, we will find the item with the least distance and append our item near it 
                var dist = 10000;
                var itemWithLeastDistance = null;
                var base = this.positionAbs[this.containers[innermostIndex].floating ? 'left' : 'top'];
                for (var j = this.items.length - 1; j >= 0; j--) {
                    if (!$.ui.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;
                    var cur = this.items[j][this.containers[innermostIndex].floating ? 'left' : 'top'];
                    if (Math.abs(cur - base) < dist) {
                        dist = Math.abs(cur - base);
                        itemWithLeastDistance = this.items[j];
                    }
                }

                if (!itemWithLeastDistance && !this.options.dropOnEmpty) //Check if dropOnEmpty is enabled 
                    return;

                this.currentContainer = this.containers[innermostIndex];
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));

                //Update the placeholder 
                this.options.placeholder.update(this.currentContainer, this.placeholder);

                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }


        },

        _createHelper:function (event) {

            var o = this.options;
            var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);

            if (!helper.parents('body').length) //Add the helper to the DOM if that didn't happen already
                $(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);

            if (helper[0] == this.currentItem[0])
                this._storedCSS = { width:this.currentItem[0].style.width, height:this.currentItem[0].style.height, position:this.currentItem.css("position"), top:this.currentItem.css("top"), left:this.currentItem.css("left") };

            if (helper[0].style.width == '' || o.forceHelperSize) helper.width(this.currentItem.width());
            if (helper[0].style.height == '' || o.forceHelperSize) helper.height(this.currentItem.height());

            return helper;

        },

        _adjustOffsetFromHelper:function (obj) {
            if (typeof obj == 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {left:+obj[0], top:+obj[1] || 0};
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },

        _getParentOffset:function () {


            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();

            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }

            if ((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
                || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie)) //Ugly IE fix
                po = { top:0, left:0 };

            return {
                top:po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left:po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };

        },

        _getRelativeOffset:function () {

            if (this.cssPosition == "relative") {
                var p = this.currentItem.position();
                return {
                    top:p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left:p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else {
                return { top:0, left:0 };
            }

        },

        _cacheMargins:function () {
            this.margins = {
                left:(parseInt(this.currentItem.css("marginLeft"), 10) || 0),
                top:(parseInt(this.currentItem.css("marginTop"), 10) || 0)
            };
        },

        _cacheHelperProportions:function () {
            this.helperProportions = {
                width:this.helper.outerWidth(),
                height:this.helper.outerHeight()
            };
        },

        _setContainment:function () {

            var o = this.options;
            if (o.containment == 'parent') o.containment = this.helper[0].parentNode;
            if (o.containment == 'document' || o.containment == 'window') this.containment = [
                0 - this.offset.relative.left - this.offset.parent.left,
                0 - this.offset.relative.top - this.offset.parent.top,
                $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
                ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
            ];

            if (!(/^(document|window|parent)$/).test(o.containment)) {
                var ce = $(o.containment)[0];
                var co = $(o.containment).offset();
                var over = ($(ce).css("overflow") != 'hidden');

                this.containment = [
                    co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left,
                    co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top,
                    co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left,
                    co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top
                ];
            }

        },

        _convertPositionTo:function (d, pos) {

            if (!pos) pos = this.position;
            var mod = d == "absolute" ? 1 : -1;
            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

            return {
                top:(
                    pos.top                                                                    // The absolute mouse position
                        + this.offset.relative.top * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.top * mod                                            // The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
                    ),
                left:(
                    pos.left                                                                // The absolute mouse position
                        + this.offset.relative.left * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                        + this.offset.parent.left * mod                                            // The offsetParent's offset without borders (offset + border)
                        - ($.browser.safari && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
                    )
            };

        },

        _generatePosition:function (event) {

            var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

            // This is another very weird special case that only happens for relative elements:
            // 1. If the css position is relative
            // 2. and the scroll parent is the document or similar to the offset parent
            // we have to refresh the relative offset during the scroll so there are no jumps
            if (this.cssPosition == 'relative' && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset();
            }

            var pageX = event.pageX;
            var pageY = event.pageY;

            /*
             * - Position constraining -
             * Constrain the position to a mix of grid, containment.
             */

            if (this.originalPosition) { //If we are not dragging yet, we won't check for options

                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
                }

                if (o.grid) {
                    var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

                    var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }

            }

            return {
                top:(
                    pageY                                                                // The absolute mouse position
                        - this.offset.click.top                                                    // Click offset (relative to the element)
                        - this.offset.relative.top                                                // Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.top                                                // The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
                    ),
                left:(
                    pageX                                                                // The absolute mouse position
                        - this.offset.click.left                                                // Click offset (relative to the element)
                        - this.offset.relative.left                                                // Only for relative positioned nodes: Relative offset from element to offset parent
                        - this.offset.parent.left                                                // The offsetParent's offset without borders (offset + border)
                        + ($.browser.safari && this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
                    )
            };

        },

        _rearrange:function (event, i, a, hardRefresh) {

            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));

            //Various things done here to improve the performance:
            // 1. we create a setTimeout, that calls refreshPositions
            // 2. on the instance, we have a counter variable, that get's higher after every append
            // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
            // 4. this lets only the last addition to the timeout stack through
            this.counter = this.counter ? ++this.counter : 1;
            var self = this, counter = this.counter;

            window.setTimeout(function () {
                if (counter == self.counter) self.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
            }, 0);

        },

        _clear:function (event, noPropagation) {

            this.reverting = false;
            // We delay all events that have to be triggered to after the point where the placeholder has been removed and
            // everything else normalized again
            var delayedTriggers = [], self = this;

            // We first have to update the dom position of the actual currentItem
            // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
            if (!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem);
            this._noFinalSort = null;

            if (this.helper[0] == this.currentItem[0]) {
                for (var i in this._storedCSS) {
                    if (this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static') this._storedCSS[i] = '';
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else {
                this.currentItem.show();
            }

            if (this.fromOutside && !noPropagation) delayedTriggers.push(function (event) {
                this._trigger("receive", event, this._uiHash(this.fromOutside));
            });
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !noPropagation) delayedTriggers.push(function (event) {
                this._trigger("update", event, this._uiHash());
            }); //Trigger update callback if the DOM position has changed
            if (!$.ui.contains(this.element[0], this.currentItem[0])) { //Node was moved out of the current element
                if (!noPropagation) delayedTriggers.push(function (event) {
                    this._trigger("remove", event, this._uiHash());
                });
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    if ($.ui.contains(this.containers[i].element[0], this.currentItem[0]) && !noPropagation) {
                        delayedTriggers.push((function (c) {
                            return function (event) {
                                c._trigger("receive", event, this._uiHash(this));
                            };
                        }).call(this, this.containers[i]));
                        delayedTriggers.push((function (c) {
                            return function (event) {
                                c._trigger("update", event, this._uiHash(this));
                            };
                        }).call(this, this.containers[i]));
                    }
                }
                ;
            }
            ;

            //Post events to containers
            for (var i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) delayedTriggers.push((function (c) {
                    return function (event) {
                        c._trigger("deactivate", event, this._uiHash(this));
                    };
                }).call(this, this.containers[i]));
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push((function (c) {
                        return function (event) {
                            c._trigger("out", event, this._uiHash(this));
                        };
                    }).call(this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }

            //Do what was originally in plugins
            if (this._storedCursor) $('body').css("cursor", this._storedCursor); //Reset cursor
            if (this._storedOpacity) this.helper.css("opacity", this._storedOpacity); //Reset opacity
            if (this._storedZIndex) this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex); //Reset z-index

            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                    for (var i = 0; i < delayedTriggers.length; i++) {
                        delayedTriggers[i].call(this, event);
                    }
                    ; //Trigger all delayed events
                    this._trigger("stop", event, this._uiHash());
                }
                return false;
            }

            if (!noPropagation) this._trigger("beforeStop", event, this._uiHash());

            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

            if (this.helper[0] != this.currentItem[0]) this.helper.remove();
            this.helper = null;

            if (!noPropagation) {
                for (var i = 0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event);
                }
                ; //Trigger all delayed events
                this._trigger("stop", event, this._uiHash());
            }

            this.fromOutside = false;
            return true;

        },

        _trigger:function () {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel();
            }
        },

        _uiHash:function (inst) {
            var self = inst || this;
            return {
                helper:self.helper,
                placeholder:self.placeholder || $([]),
                position:self.position,
                originalPosition:self.originalPosition,
                offset:self.positionAbs,
                item:self.currentItem,
                sender:inst ? inst.element : null
            };
        }

    });

    $.extend($.ui.sortable, {
        version:"1.8.18"
    });

})(jQuery);
/*
 * jQuery UI Effects 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/
 */
;
jQuery.effects || (function ($, undefined) {

    $.effects = {};


    /******************************************************************************/
    /****************************** COLOR ANIMATIONS ******************************/
    /******************************************************************************/

// override the animation for color styles
    $.each(['backgroundColor', 'borderBottomColor', 'borderLeftColor',
        'borderRightColor', 'borderTopColor', 'borderColor', 'color', 'outlineColor'],
        function (i, attr) {
            $.fx.step[attr] = function (fx) {
                if (!fx.colorInit) {
                    fx.start = getColor(fx.elem, attr);
                    fx.end = getRGB(fx.end);
                    fx.colorInit = true;
                }

                fx.elem.style[attr] = 'rgb(' +
                    Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + ',' +
                    Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + ',' +
                    Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ')';
            };
        });

// Color Conversion functions from highlightFade
// By Blair Mitchelmore
// http://jquery.offput.ca/highlightFade/

// Parse strings looking for color tuples [255,255,255]
    function getRGB(color) {
        var result;

        // Check if we're already dealing with an array of colors
        if (color && color.constructor == Array && color.length == 3)
            return color;

        // Look for rgb(num,num,num)
        if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color))
            return [parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10)];

        // Look for rgb(num%,num%,num%)
        if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color))
            return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55];

        // Look for #a0b1c2
        if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color))
            return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];

        // Look for #fff
        if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color))
            return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)];

        // Look for rgba(0, 0, 0, 0) == transparent in Safari 3
        if (result = /rgba\(0, 0, 0, 0\)/.exec(color))
            return colors['transparent'];

        // Otherwise, we're most likely dealing with a named color
        return colors[$.trim(color).toLowerCase()];
    }

    function getColor(elem, attr) {
        var color;

        do {
            color = $.curCSS(elem, attr);

            // Keep going until we find an element that has color, or we hit the body
            if (color != '' && color != 'transparent' || $.nodeName(elem, "body"))
                break;

            attr = "backgroundColor";
        } while (elem = elem.parentNode);

        return getRGB(color);
    }

    ;

// Some named colors to work with
// From Interface by Stefan Petre
// http://interface.eyecon.ro/

    var colors = {
        aqua:[0, 255, 255],
        azure:[240, 255, 255],
        beige:[245, 245, 220],
        black:[0, 0, 0],
        blue:[0, 0, 255],
        brown:[165, 42, 42],
        cyan:[0, 255, 255],
        darkblue:[0, 0, 139],
        darkcyan:[0, 139, 139],
        darkgrey:[169, 169, 169],
        darkgreen:[0, 100, 0],
        darkkhaki:[189, 183, 107],
        darkmagenta:[139, 0, 139],
        darkolivegreen:[85, 107, 47],
        darkorange:[255, 140, 0],
        darkorchid:[153, 50, 204],
        darkred:[139, 0, 0],
        darksalmon:[233, 150, 122],
        darkviolet:[148, 0, 211],
        fuchsia:[255, 0, 255],
        gold:[255, 215, 0],
        green:[0, 128, 0],
        indigo:[75, 0, 130],
        khaki:[240, 230, 140],
        lightblue:[173, 216, 230],
        lightcyan:[224, 255, 255],
        lightgreen:[144, 238, 144],
        lightgrey:[211, 211, 211],
        lightpink:[255, 182, 193],
        lightyellow:[255, 255, 224],
        lime:[0, 255, 0],
        magenta:[255, 0, 255],
        maroon:[128, 0, 0],
        navy:[0, 0, 128],
        olive:[128, 128, 0],
        orange:[255, 165, 0],
        pink:[255, 192, 203],
        purple:[128, 0, 128],
        violet:[128, 0, 128],
        red:[255, 0, 0],
        silver:[192, 192, 192],
        white:[255, 255, 255],
        yellow:[255, 255, 0],
        transparent:[255, 255, 255]
    };


    /******************************************************************************/
    /****************************** CLASS ANIMATIONS ******************************/
    /******************************************************************************/

    var classAnimationActions = ['add', 'remove', 'toggle'],
        shorthandStyles = {
            border:1,
            borderBottom:1,
            borderColor:1,
            borderLeft:1,
            borderRight:1,
            borderTop:1,
            borderWidth:1,
            margin:1,
            padding:1
        };

    function getElementStyles() {
        var style = document.defaultView
                ? document.defaultView.getComputedStyle(this, null)
                : this.currentStyle,
            newStyle = {},
            key,
            camelCase;

        // webkit enumerates style porperties
        if (style && style.length && style[0] && style[style[0]]) {
            var len = style.length;
            while (len--) {
                key = style[len];
                if (typeof style[key] == 'string') {
                    camelCase = key.replace(/\-(\w)/g, function (all, letter) {
                        return letter.toUpperCase();
                    });
                    newStyle[camelCase] = style[key];
                }
            }
        } else {
            for (key in style) {
                if (typeof style[key] === 'string') {
                    newStyle[key] = style[key];
                }
            }
        }

        return newStyle;
    }

    function filterStyles(styles) {
        var name, value;
        for (name in styles) {
            value = styles[name];
            if (
            // ignore null and undefined values
                value == null ||
                    // ignore functions (when does this occur?)
                    $.isFunction(value) ||
                    // shorthand styles that need to be expanded
                    name in shorthandStyles ||
                    // ignore scrollbars (break in IE)
                    (/scrollbar/).test(name) ||

                    // only colors or values that can be converted to numbers
                    (!(/color/i).test(name) && isNaN(parseFloat(value)))
                ) {
                delete styles[name];
            }
        }

        return styles;
    }

    function styleDifference(oldStyle, newStyle) {
        var diff = { _:0 }, // http://dev.jquery.com/ticket/5459
            name;

        for (name in newStyle) {
            if (oldStyle[name] != newStyle[name]) {
                diff[name] = newStyle[name];
            }
        }

        return diff;
    }

    $.effects.animateClass = function (value, duration, easing, callback) {
        if ($.isFunction(easing)) {
            callback = easing;
            easing = null;
        }

        return this.queue(function () {
            var that = $(this),
                originalStyleAttr = that.attr('style') || ' ',
                originalStyle = filterStyles(getElementStyles.call(this)),
                newStyle,
                className = that.attr('class');

            $.each(classAnimationActions, function (i, action) {
                if (value[action]) {
                    that[action + 'Class'](value[action]);
                }
            });
            newStyle = filterStyles(getElementStyles.call(this));
            that.attr('class', className);

            that.animate(styleDifference(originalStyle, newStyle), {
                queue:false,
                duration:duration,
                easing:easing,
                complete:function () {
                    $.each(classAnimationActions, function (i, action) {
                        if (value[action]) {
                            that[action + 'Class'](value[action]);
                        }
                    });
                    // work around bug in IE by clearing the cssText before setting it
                    if (typeof that.attr('style') == 'object') {
                        that.attr('style').cssText = '';
                        that.attr('style').cssText = originalStyleAttr;
                    } else {
                        that.attr('style', originalStyleAttr);
                    }
                    if (callback) {
                        callback.apply(this, arguments);
                    }
                    $.dequeue(this);
                }
            });
        });
    };

    $.fn.extend({
        _addClass:$.fn.addClass,
        addClass:function (classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [
                { add:classNames },
                speed,
                easing,
                callback
            ]) : this._addClass(classNames);
        },

        _removeClass:$.fn.removeClass,
        removeClass:function (classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [
                { remove:classNames },
                speed,
                easing,
                callback
            ]) : this._removeClass(classNames);
        },

        _toggleClass:$.fn.toggleClass,
        toggleClass:function (classNames, force, speed, easing, callback) {
            if (typeof force == "boolean" || force === undefined) {
                if (!speed) {
                    // without speed parameter;
                    return this._toggleClass(classNames, force);
                } else {
                    return $.effects.animateClass.apply(this, [(force ? {add:classNames} : {remove:classNames}), speed, easing, callback]);
                }
            } else {
                // without switch parameter;
                return $.effects.animateClass.apply(this, [
                    { toggle:classNames },
                    force,
                    speed,
                    easing
                ]);
            }
        },

        switchClass:function (remove, add, speed, easing, callback) {
            return $.effects.animateClass.apply(this, [
                { add:add, remove:remove },
                speed,
                easing,
                callback
            ]);
        }
    });


    /******************************************************************************/
    /*********************************** EFFECTS **********************************/
    /******************************************************************************/

    $.extend($.effects, {
        version:"1.8.18",

        // Saves a set of properties in a data storage
        save:function (element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) element.data("ec.storage." + set[i], element[0].style[set[i]]);
            }
        },

        // Restores a set of previously saved properties from a data storage
        restore:function (element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) element.css(set[i], element.data("ec.storage." + set[i]));
            }
        },

        setMode:function (el, mode) {
            if (mode == 'toggle') mode = el.is(':hidden') ? 'show' : 'hide'; // Set for toggle
            return mode;
        },

        getBaseline:function (origin, original) { // Translates a [top,left] array into a baseline value
            // this should be a little more flexible in the future to handle a string & hash
            var y, x;
            switch (origin[0]) {
                case 'top':
                    y = 0;
                    break;
                case 'middle':
                    y = 0.5;
                    break;
                case 'bottom':
                    y = 1;
                    break;
                default:
                    y = origin[0] / original.height;
            }
            ;
            switch (origin[1]) {
                case 'left':
                    x = 0;
                    break;
                case 'center':
                    x = 0.5;
                    break;
                case 'right':
                    x = 1;
                    break;
                default:
                    x = origin[1] / original.width;
            }
            ;
            return {x:x, y:y};
        },

        // Wraps the element around a wrapper that copies position properties
        createWrapper:function (element) {

            // if the element is already wrapped, return it
            if (element.parent().is('.ui-effects-wrapper')) {
                return element.parent();
            }

            // wrap the element
            var props = {
                    width:element.outerWidth(true),
                    height:element.outerHeight(true),
                    'float':element.css('float')
                },
                wrapper = $('<div></div>')
                    .addClass('ui-effects-wrapper')
                    .css({
                        fontSize:'100%',
                        background:'transparent',
                        border:'none',
                        margin:0,
                        padding:0
                    }),
                active = document.activeElement;

            element.wrap(wrapper);

            // Fixes #7595 - Elements lose focus when wrapped.
            if (element[ 0 ] === active || $.contains(element[ 0 ], active)) {
                $(active).focus();
            }

            wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually loose the reference to the wrapped element

            // transfer positioning properties to the wrapper
            if (element.css('position') == 'static') {
                wrapper.css({ position:'relative' });
                element.css({ position:'relative' });
            } else {
                $.extend(props, {
                    position:element.css('position'),
                    zIndex:element.css('z-index')
                });
                $.each(['top', 'left', 'bottom', 'right'], function (i, pos) {
                    props[pos] = element.css(pos);
                    if (isNaN(parseInt(props[pos], 10))) {
                        props[pos] = 'auto';
                    }
                });
                element.css({position:'relative', top:0, left:0, right:'auto', bottom:'auto' });
            }

            return wrapper.css(props).show();
        },

        removeWrapper:function (element) {
            var parent,
                active = document.activeElement;

            if (element.parent().is('.ui-effects-wrapper')) {
                parent = element.parent().replaceWith(element);
                // Fixes #7595 - Elements lose focus when wrapped.
                if (element[ 0 ] === active || $.contains(element[ 0 ], active)) {
                    $(active).focus();
                }
                return parent;
            }

            return element;
        },

        setTransition:function (element, list, factor, value) {
            value = value || {};
            $.each(list, function (i, x) {
                unit = element.cssUnit(x);
                if (unit[0] > 0) value[x] = unit[0] * factor + unit[1];
            });
            return value;
        }
    });


    function _normalizeArguments(effect, options, speed, callback) {
        // shift params for method overloading
        if (typeof effect == 'object') {
            callback = options;
            speed = null;
            options = effect;
            effect = options.effect;
        }
        if ($.isFunction(options)) {
            callback = options;
            speed = null;
            options = {};
        }
        if (typeof options == 'number' || $.fx.speeds[options]) {
            callback = speed;
            speed = options;
            options = {};
        }
        if ($.isFunction(speed)) {
            callback = speed;
            speed = null;
        }

        options = options || {};

        speed = speed || options.duration;
        speed = $.fx.off ? 0 : typeof speed == 'number'
            ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;

        callback = callback || options.complete;

        return [effect, options, speed, callback];
    }

    function standardSpeed(speed) {
        // valid standard speeds
        if (!speed || typeof speed === "number" || $.fx.speeds[ speed ]) {
            return true;
        }

        // invalid strings - treat as "normal" speed
        if (typeof speed === "string" && !$.effects[ speed ]) {
            return true;
        }

        return false;
    }

    $.fn.extend({
        effect:function (effect, options, speed, callback) {
            var args = _normalizeArguments.apply(this, arguments),
            // TODO: make effects take actual parameters instead of a hash
                args2 = {
                    options:args[1],
                    duration:args[2],
                    callback:args[3]
                },
                mode = args2.options.mode,
                effectMethod = $.effects[effect];

            if ($.fx.off || !effectMethod) {
                // delegate to the original method (e.g., .show()) if possible
                if (mode) {
                    return this[ mode ](args2.duration, args2.callback);
                } else {
                    return this.each(function () {
                        if (args2.callback) {
                            args2.callback.call(this);
                        }
                    });
                }
            }

            return effectMethod.call(this, args2);
        },

        _show:$.fn.show,
        show:function (speed) {
            if (standardSpeed(speed)) {
                return this._show.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'show';
                return this.effect.apply(this, args);
            }
        },

        _hide:$.fn.hide,
        hide:function (speed) {
            if (standardSpeed(speed)) {
                return this._hide.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'hide';
                return this.effect.apply(this, args);
            }
        },

        // jQuery core overloads toggle and creates _toggle
        __toggle:$.fn.toggle,
        toggle:function (speed) {
            if (standardSpeed(speed) || typeof speed === "boolean" || $.isFunction(speed)) {
                return this.__toggle.apply(this, arguments);
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = 'toggle';
                return this.effect.apply(this, args);
            }
        },

        // helper functions
        cssUnit:function (key) {
            var style = this.css(key), val = [];
            $.each(['em', 'px', '%', 'pt'], function (i, unit) {
                if (style.indexOf(unit) > 0)
                    val = [parseFloat(style), unit];
            });
            return val;
        }
    });


    /******************************************************************************/
    /*********************************** EASING ***********************************/
    /******************************************************************************/

    /*
     * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
     *
     * Uses the built in easing capabilities added In jQuery 1.1
     * to offer multiple easing options
     *
     * TERMS OF USE - jQuery Easing
     *
     * Open source under the BSD License.
     *
     * Copyright 2008 George McGinley Smith
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification,
     * are permitted provided that the following conditions are met:
     *
     * Redistributions of source code must retain the above copyright notice, this list of
     * conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice, this list
     * of conditions and the following disclaimer in the documentation and/or other materials
     * provided with the distribution.
     *
     * Neither the name of the author nor the names of contributors may be used to endorse
     * or promote products derived from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
     * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
     * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
     * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
     * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     * OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */

// t: current time, b: begInnIng value, c: change In value, d: duration
    $.easing.jswing = $.easing.swing;

    $.extend($.easing,
        {
            def:'easeOutQuad',
            swing:function (x, t, b, c, d) {
                //alert($.easing.default);
                return $.easing[$.easing.def](x, t, b, c, d);
            },
            easeInQuad:function (x, t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOutQuad:function (x, t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOutQuad:function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t + b;
                return -c / 2 * ((--t) * (t - 2) - 1) + b;
            },
            easeInCubic:function (x, t, b, c, d) {
                return c * (t /= d) * t * t + b;
            },
            easeOutCubic:function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            easeInOutCubic:function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t + 2) + b;
            },
            easeInQuart:function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t + b;
            },
            easeOutQuart:function (x, t, b, c, d) {
                return -c * ((t = t / d - 1) * t * t * t - 1) + b;
            },
            easeInOutQuart:function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
                return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
            },
            easeInQuint:function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t * t + b;
            },
            easeOutQuint:function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
            },
            easeInOutQuint:function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
            },
            easeInSine:function (x, t, b, c, d) {
                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
            },
            easeOutSine:function (x, t, b, c, d) {
                return c * Math.sin(t / d * (Math.PI / 2)) + b;
            },
            easeInOutSine:function (x, t, b, c, d) {
                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
            },
            easeInExpo:function (x, t, b, c, d) {
                return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
            },
            easeOutExpo:function (x, t, b, c, d) {
                return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
            },
            easeInOutExpo:function (x, t, b, c, d) {
                if (t == 0) return b;
                if (t == d) return b + c;
                if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
            },
            easeInCirc:function (x, t, b, c, d) {
                return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
            },
            easeOutCirc:function (x, t, b, c, d) {
                return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
            },
            easeInOutCirc:function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
                return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
            },
            easeInElastic:function (x, t, b, c, d) {
                var s = 1.70158;
                var p = 0;
                var a = c;
                if (t == 0) return b;
                if ((t /= d) == 1) return b + c;
                if (!p) p = d * .3;
                if (a < Math.abs(c)) {
                    a = c;
                    var s = p / 4;
                }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            },
            easeOutElastic:function (x, t, b, c, d) {
                var s = 1.70158;
                var p = 0;
                var a = c;
                if (t == 0) return b;
                if ((t /= d) == 1) return b + c;
                if (!p) p = d * .3;
                if (a < Math.abs(c)) {
                    a = c;
                    var s = p / 4;
                }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
            },
            easeInOutElastic:function (x, t, b, c, d) {
                var s = 1.70158;
                var p = 0;
                var a = c;
                if (t == 0) return b;
                if ((t /= d / 2) == 2) return b + c;
                if (!p) p = d * (.3 * 1.5);
                if (a < Math.abs(c)) {
                    a = c;
                    var s = p / 4;
                }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
            },
            easeInBack:function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * (t /= d) * t * ((s + 1) * t - s) + b;
            },
            easeOutBack:function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            },
            easeInOutBack:function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
                return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
            },
            easeInBounce:function (x, t, b, c, d) {
                return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b;
            },
            easeOutBounce:function (x, t, b, c, d) {
                if ((t /= d) < (1 / 2.75)) {
                    return c * (7.5625 * t * t) + b;
                } else if (t < (2 / 2.75)) {
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
                } else if (t < (2.5 / 2.75)) {
                    return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
                } else {
                    return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
                }
            },
            easeInOutBounce:function (x, t, b, c, d) {
                if (t < d / 2) return $.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
                return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
            }
        });

    /*
     *
     * TERMS OF USE - EASING EQUATIONS
     *
     * Open source under the BSD License.
     *
     * Copyright 2001 Robert Penner
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification,
     * are permitted provided that the following conditions are met:
     *
     * Redistributions of source code must retain the above copyright notice, this list of
     * conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice, this list
     * of conditions and the following disclaimer in the documentation and/or other materials
     * provided with the distribution.
     *
     * Neither the name of the author nor the names of contributors may be used to endorse
     * or promote products derived from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
     * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
     * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
     * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
     * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     * OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */

})(jQuery);
/*
 * jQuery UI Effects Blind 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Blind
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.blind = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
            var direction = o.options.direction || 'vertical'; // Default direction

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
            var ref = (direction == 'vertical') ? 'height' : 'width';
            var distance = (direction == 'vertical') ? wrapper.height() : wrapper.width();
            if (mode == 'show') wrapper.css(ref, 0); // Shift

            // Animation
            var animation = {};
            animation[ref] = mode == 'show' ? distance : 0;

            // Animate
            wrapper.animate(animation, o.duration, o.options.easing, function () {
                if (mode == 'hide') el.hide(); // Hide
                $.effects.restore(el, props);
                $.effects.removeWrapper(el); // Restore
                if (o.callback) o.callback.apply(el[0], arguments); // Callback
                el.dequeue();
            });

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Bounce 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Bounce
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.bounce = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
            var direction = o.options.direction || 'up'; // Default direction
            var distance = o.options.distance || 20; // Default distance
            var times = o.options.times || 5; // Default # of times
            var speed = o.duration || 250; // Default speed per bounce
            if (/show|hide/.test(mode)) props.push('opacity'); // Avoid touching opacity to prevent clearType and PNG issues in IE

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            $.effects.createWrapper(el); // Create Wrapper
            var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
            var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
            var distance = o.options.distance || (ref == 'top' ? el.outerHeight({margin:true}) / 3 : el.outerWidth({margin:true}) / 3);
            if (mode == 'show') el.css('opacity', 0).css(ref, motion == 'pos' ? -distance : distance); // Shift
            if (mode == 'hide') distance = distance / (times * 2);
            if (mode != 'hide') times--;

            // Animate
            if (mode == 'show') { // Show Bounce
                var animation = {opacity:1};
                animation[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
                el.animate(animation, speed / 2, o.options.easing);
                distance = distance / 2;
                times--;
            }
            ;
            for (var i = 0; i < times; i++) { // Bounces
                var animation1 = {}, animation2 = {};
                animation1[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
                animation2[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
                el.animate(animation1, speed / 2, o.options.easing).animate(animation2, speed / 2, o.options.easing);
                distance = (mode == 'hide') ? distance * 2 : distance / 2;
            }
            ;
            if (mode == 'hide') { // Last Bounce
                var animation = {opacity:0};
                animation[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
                el.animate(animation, speed / 2, o.options.easing, function () {
                    el.hide(); // Hide
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el); // Restore
                    if (o.callback) o.callback.apply(this, arguments); // Callback
                });
            } else {
                var animation1 = {}, animation2 = {};
                animation1[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
                animation2[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
                el.animate(animation1, speed / 2, o.options.easing).animate(animation2, speed / 2, o.options.easing, function () {
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el); // Restore
                    if (o.callback) o.callback.apply(this, arguments); // Callback
                });
            }
            ;
            el.queue('fx', function () {
                el.dequeue();
            });
            el.dequeue();
        });

    };

})(jQuery);
/*
 * jQuery UI Effects Clip 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Clip
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.clip = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right', 'height', 'width'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
            var direction = o.options.direction || 'vertical'; // Default direction

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
            var animate = el[0].tagName == 'IMG' ? wrapper : el;
            var ref = {
                size:(direction == 'vertical') ? 'height' : 'width',
                position:(direction == 'vertical') ? 'top' : 'left'
            };
            var distance = (direction == 'vertical') ? animate.height() : animate.width();
            if (mode == 'show') {
                animate.css(ref.size, 0);
                animate.css(ref.position, distance / 2);
            } // Shift

            // Animation
            var animation = {};
            animation[ref.size] = mode == 'show' ? distance : 0;
            animation[ref.position] = mode == 'show' ? 0 : distance / 2;

            // Animate
            animate.animate(animation, { queue:false, duration:o.duration, easing:o.options.easing, complete:function () {
                if (mode == 'hide') el.hide(); // Hide
                $.effects.restore(el, props);
                $.effects.removeWrapper(el); // Restore
                if (o.callback) o.callback.apply(el[0], arguments); // Callback
                el.dequeue();
            }});

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Drop 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Drop
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.drop = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right', 'opacity'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
            var direction = o.options.direction || 'left'; // Default Direction

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            $.effects.createWrapper(el); // Create Wrapper
            var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
            var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
            var distance = o.options.distance || (ref == 'top' ? el.outerHeight({margin:true}) / 2 : el.outerWidth({margin:true}) / 2);
            if (mode == 'show') el.css('opacity', 0).css(ref, motion == 'pos' ? -distance : distance); // Shift

            // Animation
            var animation = {opacity:mode == 'show' ? 1 : 0};
            animation[ref] = (mode == 'show' ? (motion == 'pos' ? '+=' : '-=') : (motion == 'pos' ? '-=' : '+=')) + distance;

            // Animate
            el.animate(animation, { queue:false, duration:o.duration, easing:o.options.easing, complete:function () {
                if (mode == 'hide') el.hide(); // Hide
                $.effects.restore(el, props);
                $.effects.removeWrapper(el); // Restore
                if (o.callback) o.callback.apply(this, arguments); // Callback
                el.dequeue();
            }});

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Explode 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Explode
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.explode = function (o) {

        return this.queue(function () {

            var rows = o.options.pieces ? Math.round(Math.sqrt(o.options.pieces)) : 3;
            var cells = o.options.pieces ? Math.round(Math.sqrt(o.options.pieces)) : 3;

            o.options.mode = o.options.mode == 'toggle' ? ($(this).is(':visible') ? 'hide' : 'show') : o.options.mode;
            var el = $(this).show().css('visibility', 'hidden');
            var offset = el.offset();

            //Substract the margins - not fixing the problem yet.
            offset.top -= parseInt(el.css("marginTop"), 10) || 0;
            offset.left -= parseInt(el.css("marginLeft"), 10) || 0;

            var width = el.outerWidth(true);
            var height = el.outerHeight(true);

            for (var i = 0; i < rows; i++) { // =
                for (var j = 0; j < cells; j++) { // ||
                    el
                        .clone()
                        .appendTo('body')
                        .wrap('<div></div>')
                        .css({
                            position:'absolute',
                            visibility:'visible',
                            left:-j * (width / cells),
                            top:-i * (height / rows)
                        })
                        .parent()
                        .addClass('ui-effects-explode')
                        .css({
                            position:'absolute',
                            overflow:'hidden',
                            width:width / cells,
                            height:height / rows,
                            left:offset.left + j * (width / cells) + (o.options.mode == 'show' ? (j - Math.floor(cells / 2)) * (width / cells) : 0),
                            top:offset.top + i * (height / rows) + (o.options.mode == 'show' ? (i - Math.floor(rows / 2)) * (height / rows) : 0),
                            opacity:o.options.mode == 'show' ? 0 : 1
                        }).animate({
                            left:offset.left + j * (width / cells) + (o.options.mode == 'show' ? 0 : (j - Math.floor(cells / 2)) * (width / cells)),
                            top:offset.top + i * (height / rows) + (o.options.mode == 'show' ? 0 : (i - Math.floor(rows / 2)) * (height / rows)),
                            opacity:o.options.mode == 'show' ? 1 : 0
                        }, o.duration || 500);
                }
            }

            // Set a timeout, to call the callback approx. when the other animations have finished
            setTimeout(function () {

                o.options.mode == 'show' ? el.css({ visibility:'visible' }) : el.css({ visibility:'visible' }).hide();
                if (o.callback) o.callback.apply(el[0]); // Callback
                el.dequeue();

                $('div.ui-effects-explode').remove();

            }, o.duration || 500);


        });

    };

})(jQuery);
/*
 * jQuery UI Effects Fade 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Fade
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.fade = function (o) {
        return this.queue(function () {
            var elem = $(this),
                mode = $.effects.setMode(elem, o.options.mode || 'hide');

            elem.animate({ opacity:mode }, {
                queue:false,
                duration:o.duration,
                easing:o.options.easing,
                complete:function () {
                    (o.callback && o.callback.apply(this, arguments));
                    elem.dequeue();
                }
            });
        });
    };

})(jQuery);
/*
 * jQuery UI Effects Fold 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Fold
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.fold = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
            var size = o.options.size || 15; // Default fold size
            var horizFirst = !(!o.options.horizFirst); // Ensure a boolean value
            var duration = o.duration ? o.duration / 2 : $.fx.speeds._default / 2;

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
            var widthFirst = ((mode == 'show') != horizFirst);
            var ref = widthFirst ? ['width', 'height'] : ['height', 'width'];
            var distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];
            var percent = /([0-9]+)%/.exec(size);
            if (percent) size = parseInt(percent[1], 10) / 100 * distance[mode == 'hide' ? 0 : 1];
            if (mode == 'show') wrapper.css(horizFirst ? {height:0, width:size} : {height:size, width:0}); // Shift

            // Animation
            var animation1 = {}, animation2 = {};
            animation1[ref[0]] = mode == 'show' ? distance[0] : size;
            animation2[ref[1]] = mode == 'show' ? distance[1] : 0;

            // Animate
            wrapper.animate(animation1, duration, o.options.easing)
                .animate(animation2, duration, o.options.easing, function () {
                    if (mode == 'hide') el.hide(); // Hide
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el); // Restore
                    if (o.callback) o.callback.apply(el[0], arguments); // Callback
                    el.dequeue();
                });

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Highlight 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Highlight
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.highlight = function (o) {
        return this.queue(function () {
            var elem = $(this),
                props = ['backgroundImage', 'backgroundColor', 'opacity'],
                mode = $.effects.setMode(elem, o.options.mode || 'show'),
                animation = {
                    backgroundColor:elem.css('backgroundColor')
                };

            if (mode == 'hide') {
                animation.opacity = 0;
            }

            $.effects.save(elem, props);
            elem
                .show()
                .css({
                    backgroundImage:'none',
                    backgroundColor:o.options.color || '#ffff99'
                })
                .animate(animation, {
                    queue:false,
                    duration:o.duration,
                    easing:o.options.easing,
                    complete:function () {
                        (mode == 'hide' && elem.hide());
                        $.effects.restore(elem, props);
                        (mode == 'show' && !$.support.opacity && this.style.removeAttribute('filter'));
                        (o.callback && o.callback.apply(this, arguments));
                        elem.dequeue();
                    }
                });
        });
    };

})(jQuery);
/*
 * jQuery UI Effects Pulsate 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Pulsate
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.pulsate = function (o) {
        return this.queue(function () {
            var elem = $(this),
                mode = $.effects.setMode(elem, o.options.mode || 'show');
            times = ((o.options.times || 5) * 2) - 1;
            duration = o.duration ? o.duration / 2 : $.fx.speeds._default / 2,
                isVisible = elem.is(':visible'),
                animateTo = 0;

            if (!isVisible) {
                elem.css('opacity', 0).show();
                animateTo = 1;
            }

            if ((mode == 'hide' && isVisible) || (mode == 'show' && !isVisible)) {
                times--;
            }

            for (var i = 0; i < times; i++) {
                elem.animate({ opacity:animateTo }, duration, o.options.easing);
                animateTo = (animateTo + 1) % 2;
            }

            elem.animate({ opacity:animateTo }, duration, o.options.easing, function () {
                if (animateTo == 0) {
                    elem.hide();
                }
                (o.callback && o.callback.apply(this, arguments));
            });

            elem
                .queue('fx', function () {
                    elem.dequeue();
                })
                .dequeue();
        });
    };

})(jQuery);
/*
 * jQuery UI Effects Scale 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Scale
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.puff = function (o) {
        return this.queue(function () {
            var elem = $(this),
                mode = $.effects.setMode(elem, o.options.mode || 'hide'),
                percent = parseInt(o.options.percent, 10) || 150,
                factor = percent / 100,
                original = { height:elem.height(), width:elem.width() };

            $.extend(o.options, {
                fade:true,
                mode:mode,
                percent:mode == 'hide' ? percent : 100,
                from:mode == 'hide'
                    ? original
                    : {
                    height:original.height * factor,
                    width:original.width * factor
                }
            });

            elem.effect('scale', o.options, o.duration, o.callback);
            elem.dequeue();
        });
    };

    $.effects.scale = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this);

            // Set options
            var options = $.extend(true, {}, o.options);
            var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
            var percent = parseInt(o.options.percent, 10) || (parseInt(o.options.percent, 10) == 0 ? 0 : (mode == 'hide' ? 0 : 100)); // Set default scaling percent
            var direction = o.options.direction || 'both'; // Set default axis
            var origin = o.options.origin; // The origin of the scaling
            if (mode != 'effect') { // Set default origin and restore for show/hide
                options.origin = origin || ['middle', 'center'];
                options.restore = true;
            }
            var original = {height:el.height(), width:el.width()}; // Save original
            el.from = o.options.from || (mode == 'show' ? {height:0, width:0} : original); // Default from state

            // Adjust
            var factor = { // Set scaling factor
                y:direction != 'horizontal' ? (percent / 100) : 1,
                x:direction != 'vertical' ? (percent / 100) : 1
            };
            el.to = {height:original.height * factor.y, width:original.width * factor.x}; // Set to state

            if (o.options.fade) { // Fade option to support puff
                if (mode == 'show') {
                    el.from.opacity = 0;
                    el.to.opacity = 1;
                }
                ;
                if (mode == 'hide') {
                    el.from.opacity = 1;
                    el.to.opacity = 0;
                }
                ;
            }
            ;

            // Animation
            options.from = el.from;
            options.to = el.to;
            options.mode = mode;

            // Animate
            el.effect('size', options, o.duration, o.callback);
            el.dequeue();
        });

    };

    $.effects.size = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right', 'width', 'height', 'overflow', 'opacity'];
            var props1 = ['position', 'top', 'bottom', 'left', 'right', 'overflow', 'opacity']; // Always restore
            var props2 = ['width', 'height', 'overflow']; // Copy for children
            var cProps = ['fontSize'];
            var vProps = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];
            var hProps = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
            var restore = o.options.restore || false; // Default restore
            var scale = o.options.scale || 'both'; // Default scale mode
            var origin = o.options.origin; // The origin of the sizing
            var original = {height:el.height(), width:el.width()}; // Save original
            el.from = o.options.from || original; // Default from state
            el.to = o.options.to || original; // Default to state
            // Adjust
            if (origin) { // Calculate baseline shifts
                var baseline = $.effects.getBaseline(origin, original);
                el.from.top = (original.height - el.from.height) * baseline.y;
                el.from.left = (original.width - el.from.width) * baseline.x;
                el.to.top = (original.height - el.to.height) * baseline.y;
                el.to.left = (original.width - el.to.width) * baseline.x;
            }
            ;
            var factor = { // Set scaling factor
                from:{y:el.from.height / original.height, x:el.from.width / original.width},
                to:{y:el.to.height / original.height, x:el.to.width / original.width}
            };
            if (scale == 'box' || scale == 'both') { // Scale the css box
                if (factor.from.y != factor.to.y) { // Vertical props scaling
                    props = props.concat(vProps);
                    el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
                }
                ;
                if (factor.from.x != factor.to.x) { // Horizontal props scaling
                    props = props.concat(hProps);
                    el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                    el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
                }
                ;
            }
            ;
            if (scale == 'content' || scale == 'both') { // Scale the content
                if (factor.from.y != factor.to.y) { // Vertical props scaling
                    props = props.concat(cProps);
                    el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
                }
                ;
            }
            ;
            $.effects.save(el, restore ? props : props1);
            el.show(); // Save & Show
            $.effects.createWrapper(el); // Create Wrapper
            el.css('overflow', 'hidden').css(el.from); // Shift

            // Animate
            if (scale == 'content' || scale == 'both') { // Scale the children
                vProps = vProps.concat(['marginTop', 'marginBottom']).concat(cProps); // Add margins/font-size
                hProps = hProps.concat(['marginLeft', 'marginRight']); // Add margins
                props2 = props.concat(vProps).concat(hProps); // Concat
                el.find("*[width]").each(function () {
                    child = $(this);
                    if (restore) $.effects.save(child, props2);
                    var c_original = {height:child.height(), width:child.width()}; // Save original
                    child.from = {height:c_original.height * factor.from.y, width:c_original.width * factor.from.x};
                    child.to = {height:c_original.height * factor.to.y, width:c_original.width * factor.to.x};
                    if (factor.from.y != factor.to.y) { // Vertical props scaling
                        child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                        child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                    }
                    ;
                    if (factor.from.x != factor.to.x) { // Horizontal props scaling
                        child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                        child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                    }
                    ;
                    child.css(child.from); // Shift children
                    child.animate(child.to, o.duration, o.options.easing, function () {
                        if (restore) $.effects.restore(child, props2); // Restore children
                    }); // Animate children
                });
            }
            ;

            // Animate
            el.animate(el.to, { queue:false, duration:o.duration, easing:o.options.easing, complete:function () {
                if (el.to.opacity === 0) {
                    el.css('opacity', el.from.opacity);
                }
                if (mode == 'hide') el.hide(); // Hide
                $.effects.restore(el, restore ? props : props1);
                $.effects.removeWrapper(el); // Restore
                if (o.callback) o.callback.apply(this, arguments); // Callback
                el.dequeue();
            }});

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Shake 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Shake
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.shake = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
            var direction = o.options.direction || 'left'; // Default direction
            var distance = o.options.distance || 20; // Default distance
            var times = o.options.times || 3; // Default # of times
            var speed = o.duration || o.options.duration || 140; // Default speed per shake

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            $.effects.createWrapper(el); // Create Wrapper
            var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
            var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';

            // Animation
            var animation = {}, animation1 = {}, animation2 = {};
            animation[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
            animation1[ref] = (motion == 'pos' ? '+=' : '-=') + distance * 2;
            animation2[ref] = (motion == 'pos' ? '-=' : '+=') + distance * 2;

            // Animate
            el.animate(animation, speed, o.options.easing);
            for (var i = 1; i < times; i++) { // Shakes
                el.animate(animation1, speed, o.options.easing).animate(animation2, speed, o.options.easing);
            }
            ;
            el.animate(animation1, speed, o.options.easing).
                animate(animation, speed / 2, o.options.easing, function () { // Last shake
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el); // Restore
                    if (o.callback) o.callback.apply(this, arguments); // Callback
                });
            el.queue('fx', function () {
                el.dequeue();
            });
            el.dequeue();
        });

    };

})(jQuery);
/*
 * jQuery UI Effects Slide 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Slide
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.slide = function (o) {

        return this.queue(function () {

            // Create element
            var el = $(this), props = ['position', 'top', 'bottom', 'left', 'right'];

            // Set options
            var mode = $.effects.setMode(el, o.options.mode || 'show'); // Set Mode
            var direction = o.options.direction || 'left'; // Default Direction

            // Adjust
            $.effects.save(el, props);
            el.show(); // Save & Show
            $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
            var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
            var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
            var distance = o.options.distance || (ref == 'top' ? el.outerHeight({margin:true}) : el.outerWidth({margin:true}));
            if (mode == 'show') el.css(ref, motion == 'pos' ? (isNaN(distance) ? "-" + distance : -distance) : distance); // Shift

            // Animation
            var animation = {};
            animation[ref] = (mode == 'show' ? (motion == 'pos' ? '+=' : '-=') : (motion == 'pos' ? '-=' : '+=')) + distance;

            // Animate
            el.animate(animation, { queue:false, duration:o.duration, easing:o.options.easing, complete:function () {
                if (mode == 'hide') el.hide(); // Hide
                $.effects.restore(el, props);
                $.effects.removeWrapper(el); // Restore
                if (o.callback) o.callback.apply(this, arguments); // Callback
                el.dequeue();
            }});

        });

    };

})(jQuery);
/*
 * jQuery UI Effects Transfer 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Effects/Transfer
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function ($, undefined) {

    $.effects.transfer = function (o) {
        return this.queue(function () {
            var elem = $(this),
                target = $(o.options.to),
                endPosition = target.offset(),
                animation = {
                    top:endPosition.top,
                    left:endPosition.left,
                    height:target.innerHeight(),
                    width:target.innerWidth()
                },
                startPosition = elem.offset(),
                transfer = $('<div class="ui-effects-transfer"></div>')
                    .appendTo(document.body)
                    .addClass(o.options.className)
                    .css({
                        top:startPosition.top,
                        left:startPosition.left,
                        height:elem.innerHeight(),
                        width:elem.innerWidth(),
                        position:'absolute'
                    })
                    .animate(animation, o.duration, o.options.easing, function () {
                        transfer.remove();
                        (o.callback && o.callback.apply(elem[0], arguments));
                        elem.dequeue();
                    });
        });
    };

})(jQuery);
/*
 * jQuery UI Accordion 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Accordion
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.accordion", {
        options:{
            active:0,
            animated:"slide",
            autoHeight:true,
            clearStyle:false,
            collapsible:false,
            event:"click",
            fillSpace:false,
            header:"> li > :first-child,> :not(li):even",
            icons:{
                header:"ui-icon-triangle-1-e",
                headerSelected:"ui-icon-triangle-1-s"
            },
            navigation:false,
            navigationFilter:function () {
                return this.href.toLowerCase() === location.href.toLowerCase();
            }
        },

        _create:function () {
            var self = this,
                options = self.options;

            self.running = 0;

            self.element
                .addClass("ui-accordion ui-widget ui-helper-reset")
                // in lack of child-selectors in CSS
                // we need to mark top-LIs in a UL-accordion for some IE-fix
                .children("li")
                .addClass("ui-accordion-li-fix");

            self.headers = self.element.find(options.header)
                .addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all")
                .bind("mouseenter.accordion", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).addClass("ui-state-hover");
                })
                .bind("mouseleave.accordion", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).removeClass("ui-state-hover");
                })
                .bind("focus.accordion", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).addClass("ui-state-focus");
                })
                .bind("blur.accordion", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).removeClass("ui-state-focus");
                });

            self.headers.next()
                .addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");

            if (options.navigation) {
                var current = self.element.find("a").filter(options.navigationFilter).eq(0);
                if (current.length) {
                    var header = current.closest(".ui-accordion-header");
                    if (header.length) {
                        // anchor within header
                        self.active = header;
                    } else {
                        // anchor within content
                        self.active = current.closest(".ui-accordion-content").prev();
                    }
                }
            }

            self.active = self._findActive(self.active || options.active)
                .addClass("ui-state-default ui-state-active")
                .toggleClass("ui-corner-all")
                .toggleClass("ui-corner-top");
            self.active.next().addClass("ui-accordion-content-active");

            self._createIcons();
            self.resize();

            // ARIA
            self.element.attr("role", "tablist");

            self.headers
                .attr("role", "tab")
                .bind("keydown.accordion", function (event) {
                    return self._keydown(event);
                })
                .next()
                .attr("role", "tabpanel");

            self.headers
                .not(self.active || "")
                .attr({
                    "aria-expanded":"false",
                    "aria-selected":"false",
                    tabIndex:-1
                })
                .next()
                .hide();

            // make sure at least one header is in the tab order
            if (!self.active.length) {
                self.headers.eq(0).attr("tabIndex", 0);
            } else {
                self.active
                    .attr({
                        "aria-expanded":"true",
                        "aria-selected":"true",
                        tabIndex:0
                    });
            }

            // only need links in tab order for Safari
            if (!$.browser.safari) {
                self.headers.find("a").attr("tabIndex", -1);
            }

            if (options.event) {
                self.headers.bind(options.event.split(" ").join(".accordion ") + ".accordion", function (event) {
                    self._clickHandler.call(self, event, this);
                    event.preventDefault();
                });
            }
        },

        _createIcons:function () {
            var options = this.options;
            if (options.icons) {
                $("<span></span>")
                    .addClass("ui-icon " + options.icons.header)
                    .prependTo(this.headers);
                this.active.children(".ui-icon")
                    .toggleClass(options.icons.header)
                    .toggleClass(options.icons.headerSelected);
                this.element.addClass("ui-accordion-icons");
            }
        },

        _destroyIcons:function () {
            this.headers.children(".ui-icon").remove();
            this.element.removeClass("ui-accordion-icons");
        },

        destroy:function () {
            var options = this.options;

            this.element
                .removeClass("ui-accordion ui-widget ui-helper-reset")
                .removeAttr("role");

            this.headers
                .unbind(".accordion")
                .removeClass("ui-accordion-header ui-accordion-disabled ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top")
                .removeAttr("role")
                .removeAttr("aria-expanded")
                .removeAttr("aria-selected")
                .removeAttr("tabIndex");

            this.headers.find("a").removeAttr("tabIndex");
            this._destroyIcons();
            var contents = this.headers.next()
                .css("display", "")
                .removeAttr("role")
                .removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");
            if (options.autoHeight || options.fillHeight) {
                contents.css("height", "");
            }

            return $.Widget.prototype.destroy.call(this);
        },

        _setOption:function (key, value) {
            $.Widget.prototype._setOption.apply(this, arguments);

            if (key == "active") {
                this.activate(value);
            }
            if (key == "icons") {
                this._destroyIcons();
                if (value) {
                    this._createIcons();
                }
            }
            // #5332 - opacity doesn't cascade to positioned elements in IE
            // so we need to add the disabled class to the headers and panels
            if (key == "disabled") {
                this.headers.add(this.headers.next())
                    [ value ? "addClass" : "removeClass" ](
                    "ui-accordion-disabled ui-state-disabled");
            }
        },

        _keydown:function (event) {
            if (this.options.disabled || event.altKey || event.ctrlKey) {
                return;
            }

            var keyCode = $.ui.keyCode,
                length = this.headers.length,
                currentIndex = this.headers.index(event.target),
                toFocus = false;

            switch (event.keyCode) {
                case keyCode.RIGHT:
                case keyCode.DOWN:
                    toFocus = this.headers[ ( currentIndex + 1 ) % length ];
                    break;
                case keyCode.LEFT:
                case keyCode.UP:
                    toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
                    break;
                case keyCode.SPACE:
                case keyCode.ENTER:
                    this._clickHandler({ target:event.target }, event.target);
                    event.preventDefault();
            }

            if (toFocus) {
                $(event.target).attr("tabIndex", -1);
                $(toFocus).attr("tabIndex", 0);
                toFocus.focus();
                return false;
            }

            return true;
        },

        resize:function () {
            var options = this.options,
                maxHeight;

            if (options.fillSpace) {
                if ($.browser.msie) {
                    var defOverflow = this.element.parent().css("overflow");
                    this.element.parent().css("overflow", "hidden");
                }
                maxHeight = this.element.parent().height();
                if ($.browser.msie) {
                    this.element.parent().css("overflow", defOverflow);
                }

                this.headers.each(function () {
                    maxHeight -= $(this).outerHeight(true);
                });

                this.headers.next()
                    .each(function () {
                        $(this).height(Math.max(0, maxHeight -
                            $(this).innerHeight() + $(this).height()));
                    })
                    .css("overflow", "auto");
            } else if (options.autoHeight) {
                maxHeight = 0;
                this.headers.next()
                    .each(function () {
                        maxHeight = Math.max(maxHeight, $(this).height("").height());
                    })
                    .height(maxHeight);
            }

            return this;
        },

        activate:function (index) {
            // TODO this gets called on init, changing the option without an explicit call for that
            this.options.active = index;
            // call clickHandler with custom event
            var active = this._findActive(index)[ 0 ];
            this._clickHandler({ target:active }, active);

            return this;
        },

        _findActive:function (selector) {
            return selector
                ? typeof selector === "number"
                ? this.headers.filter(":eq(" + selector + ")")
                : this.headers.not(this.headers.not(selector))
                : selector === false
                ? $([])
                : this.headers.filter(":eq(0)");
        },

        // TODO isn't event.target enough? why the separate target argument?
        _clickHandler:function (event, target) {
            var options = this.options;
            if (options.disabled) {
                return;
            }

            // called only when using activate(false) to close all parts programmatically
            if (!event.target) {
                if (!options.collapsible) {
                    return;
                }
                this.active
                    .removeClass("ui-state-active ui-corner-top")
                    .addClass("ui-state-default ui-corner-all")
                    .children(".ui-icon")
                    .removeClass(options.icons.headerSelected)
                    .addClass(options.icons.header);
                this.active.next().addClass("ui-accordion-content-active");
                var toHide = this.active.next(),
                    data = {
                        options:options,
                        newHeader:$([]),
                        oldHeader:options.active,
                        newContent:$([]),
                        oldContent:toHide
                    },
                    toShow = ( this.active = $([]) );
                this._toggle(toShow, toHide, data);
                return;
            }

            // get the click target
            var clicked = $(event.currentTarget || target),
                clickedIsActive = clicked[0] === this.active[0];

            // TODO the option is changed, is that correct?
            // TODO if it is correct, shouldn't that happen after determining that the click is valid?
            options.active = options.collapsible && clickedIsActive ?
                false :
                this.headers.index(clicked);

            // if animations are still active, or the active header is the target, ignore click
            if (this.running || ( !options.collapsible && clickedIsActive )) {
                return;
            }

            // find elements to show and hide
            var active = this.active,
                toShow = clicked.next(),
                toHide = this.active.next(),
                data = {
                    options:options,
                    newHeader:clickedIsActive && options.collapsible ? $([]) : clicked,
                    oldHeader:this.active,
                    newContent:clickedIsActive && options.collapsible ? $([]) : toShow,
                    oldContent:toHide
                },
                down = this.headers.index(this.active[0]) > this.headers.index(clicked[0]);

            // when the call to ._toggle() comes after the class changes
            // it causes a very odd bug in IE 8 (see #6720)
            this.active = clickedIsActive ? $([]) : clicked;
            this._toggle(toShow, toHide, data, clickedIsActive, down);

            // switch classes
            active
                .removeClass("ui-state-active ui-corner-top")
                .addClass("ui-state-default ui-corner-all")
                .children(".ui-icon")
                .removeClass(options.icons.headerSelected)
                .addClass(options.icons.header);
            if (!clickedIsActive) {
                clicked
                    .removeClass("ui-state-default ui-corner-all")
                    .addClass("ui-state-active ui-corner-top")
                    .children(".ui-icon")
                    .removeClass(options.icons.header)
                    .addClass(options.icons.headerSelected);
                clicked
                    .next()
                    .addClass("ui-accordion-content-active");
            }

            return;
        },

        _toggle:function (toShow, toHide, data, clickedIsActive, down) {
            var self = this,
                options = self.options;

            self.toShow = toShow;
            self.toHide = toHide;
            self.data = data;

            var complete = function () {
                if (!self) {
                    return;
                }
                return self._completed.apply(self, arguments);
            };

            // trigger changestart event
            self._trigger("changestart", null, self.data);

            // count elements to animate
            self.running = toHide.size() === 0 ? toShow.size() : toHide.size();

            if (options.animated) {
                var animOptions = {};

                if (options.collapsible && clickedIsActive) {
                    animOptions = {
                        toShow:$([]),
                        toHide:toHide,
                        complete:complete,
                        down:down,
                        autoHeight:options.autoHeight || options.fillSpace
                    };
                } else {
                    animOptions = {
                        toShow:toShow,
                        toHide:toHide,
                        complete:complete,
                        down:down,
                        autoHeight:options.autoHeight || options.fillSpace
                    };
                }

                if (!options.proxied) {
                    options.proxied = options.animated;
                }

                if (!options.proxiedDuration) {
                    options.proxiedDuration = options.duration;
                }

                options.animated = $.isFunction(options.proxied) ?
                    options.proxied(animOptions) :
                    options.proxied;

                options.duration = $.isFunction(options.proxiedDuration) ?
                    options.proxiedDuration(animOptions) :
                    options.proxiedDuration;

                var animations = $.ui.accordion.animations,
                    duration = options.duration,
                    easing = options.animated;

                if (easing && !animations[ easing ] && !$.easing[ easing ]) {
                    easing = "slide";
                }
                if (!animations[ easing ]) {
                    animations[ easing ] = function (options) {
                        this.slide(options, {
                            easing:easing,
                            duration:duration || 700
                        });
                    };
                }

                animations[ easing ](animOptions);
            } else {
                if (options.collapsible && clickedIsActive) {
                    toShow.toggle();
                } else {
                    toHide.hide();
                    toShow.show();
                }

                complete(true);
            }

            // TODO assert that the blur and focus triggers are really necessary, remove otherwise
            toHide.prev()
                .attr({
                    "aria-expanded":"false",
                    "aria-selected":"false",
                    tabIndex:-1
                })
                .blur();
            toShow.prev()
                .attr({
                    "aria-expanded":"true",
                    "aria-selected":"true",
                    tabIndex:0
                })
                .focus();
        },

        _completed:function (cancel) {
            this.running = cancel ? 0 : --this.running;
            if (this.running) {
                return;
            }

            if (this.options.clearStyle) {
                this.toShow.add(this.toHide).css({
                    height:"",
                    overflow:""
                });
            }

            // other classes are removed before the animation; this one needs to stay until completed
            this.toHide.removeClass("ui-accordion-content-active");
            // Work around for rendering bug in IE (#5421)
            if (this.toHide.length) {
                this.toHide.parent()[0].className = this.toHide.parent()[0].className;
            }

            this._trigger("change", null, this.data);
        }
    });

    $.extend($.ui.accordion, {
        version:"1.8.18",
        animations:{
            slide:function (options, additions) {
                options = $.extend({
                    easing:"swing",
                    duration:300
                }, options, additions);
                if (!options.toHide.size()) {
                    options.toShow.animate({
                        height:"show",
                        paddingTop:"show",
                        paddingBottom:"show"
                    }, options);
                    return;
                }
                if (!options.toShow.size()) {
                    options.toHide.animate({
                        height:"hide",
                        paddingTop:"hide",
                        paddingBottom:"hide"
                    }, options);
                    return;
                }
                var overflow = options.toShow.css("overflow"),
                    percentDone = 0,
                    showProps = {},
                    hideProps = {},
                    fxAttrs = [ "height", "paddingTop", "paddingBottom" ],
                    originalWidth;
                // fix width before calculating height of hidden element
                var s = options.toShow;
                originalWidth = s[0].style.width;
                s.width(s.parent().width()
                    - parseFloat(s.css("paddingLeft"))
                    - parseFloat(s.css("paddingRight"))
                    - ( parseFloat(s.css("borderLeftWidth")) || 0 )
                    - ( parseFloat(s.css("borderRightWidth")) || 0 ));

                $.each(fxAttrs, function (i, prop) {
                    hideProps[ prop ] = "hide";

                    var parts = ( "" + $.css(options.toShow[0], prop) ).match(/^([\d+-.]+)(.*)$/);
                    showProps[ prop ] = {
                        value:parts[ 1 ],
                        unit:parts[ 2 ] || "px"
                    };
                });
                options.toShow.css({ height:0, overflow:"hidden" }).show();
                options.toHide
                    .filter(":hidden")
                    .each(options.complete)
                    .end()
                    .filter(":visible")
                    .animate(hideProps, {
                        step:function (now, settings) {
                            // only calculate the percent when animating height
                            // IE gets very inconsistent results when animating elements
                            // with small values, which is common for padding
                            if (settings.prop == "height") {
                                percentDone = ( settings.end - settings.start === 0 ) ? 0 :
                                    ( settings.now - settings.start ) / ( settings.end - settings.start );
                            }

                            options.toShow[ 0 ].style[ settings.prop ] =
                                ( percentDone * showProps[ settings.prop ].value )
                                    + showProps[ settings.prop ].unit;
                        },
                        duration:options.duration,
                        easing:options.easing,
                        complete:function () {
                            if (!options.autoHeight) {
                                options.toShow.css("height", "");
                            }
                            options.toShow.css({
                                width:originalWidth,
                                overflow:overflow
                            });
                            options.complete();
                        }
                    });
            },
            bounceslide:function (options) {
                this.slide(options, {
                    easing:options.down ? "easeOutBounce" : "swing",
                    duration:options.down ? 1000 : 200
                });
            }
        }
    });

})(jQuery);
/*
 * jQuery UI Autocomplete 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Autocomplete
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.position.js
 */
(function ($, undefined) {

// used to prevent race conditions with remote data sources
    var requestIndex = 0;

    $.widget("ui.autocomplete", {
        options:{
            appendTo:"body",
            autoFocus:false,
            delay:300,
            minLength:1,
            position:{
                my:"left top",
                at:"left bottom",
                collision:"none"
            },
            source:null
        },

        pending:0,

        _create:function () {
            var self = this,
                doc = this.element[ 0 ].ownerDocument,
                suppressKeyPress;

            this.element
                .addClass("ui-autocomplete-input")
                .attr("autocomplete", "off")
                // TODO verify these actually work as intended
                .attr({
                    role:"textbox",
                    "aria-autocomplete":"list",
                    "aria-haspopup":"true"
                })
                .bind("keydown.autocomplete", function (event) {
                    if (self.options.disabled || self.element.propAttr("readOnly")) {
                        return;
                    }

                    suppressKeyPress = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            self._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            self._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            self._move("previous", event);
                            // prevent moving cursor to beginning of text field in some browsers
                            event.preventDefault();
                            break;
                        case keyCode.DOWN:
                            self._move("next", event);
                            // prevent moving cursor to end of text field in some browsers
                            event.preventDefault();
                            break;
                        case keyCode.ENTER:
                        case keyCode.NUMPAD_ENTER:
                            // when menu is open and has focus
                            if (self.menu.active) {
                                // #6055 - Opera still allows the keypress to occur
                                // which causes forms to submit
                                suppressKeyPress = true;
                                event.preventDefault();
                            }
                        //passthrough - ENTER and TAB both select the current element
                        case keyCode.TAB:
                            if (!self.menu.active) {
                                return;
                            }
                            self.menu.select(event);
                            break;
                        case keyCode.ESCAPE:
                            self.element.val(self.term);
                            self.close(event);
                            break;
                        default:
                            // keypress is triggered before the input value is changed
                            clearTimeout(self.searching);
                            self.searching = setTimeout(function () {
                                // only search if the value has changed
                                if (self.term != self.element.val()) {
                                    self.selectedItem = null;
                                    self.search(null, event);
                                }
                            }, self.options.delay);
                            break;
                    }
                })
                .bind("keypress.autocomplete", function (event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        event.preventDefault();
                    }
                })
                .bind("focus.autocomplete", function () {
                    if (self.options.disabled) {
                        return;
                    }

                    self.selectedItem = null;
                    self.previous = self.element.val();
                })
                .bind("blur.autocomplete", function (event) {
                    if (self.options.disabled) {
                        return;
                    }

                    clearTimeout(self.searching);
                    // clicks on the menu (or a button to trigger a search) will cause a blur event
                    self.closing = setTimeout(function () {
                        self.close(event);
                        self._change(event);
                    }, 150);
                });
            this._initSource();
            this.response = function () {
                return self._response.apply(self, arguments);
            };
            this.menu = $("<ul></ul>")
                .addClass("ui-autocomplete")
                .appendTo($(this.options.appendTo || "body", doc)[0])
                // prevent the close-on-blur in case of a "slow" click on the menu (long mousedown)
                .mousedown(function (event) {
                    // clicking on the scrollbar causes focus to shift to the body
                    // but we can't detect a mouseup or a click immediately afterward
                    // so we have to track the next mousedown and close the menu if
                    // the user clicks somewhere outside of the autocomplete
                    var menuElement = self.menu.element[ 0 ];
                    if (!$(event.target).closest(".ui-menu-item").length) {
                        setTimeout(function () {
                            $(document).one('mousedown', function (event) {
                                if (event.target !== self.element[ 0 ] &&
                                    event.target !== menuElement &&
                                    !$.ui.contains(menuElement, event.target)) {
                                    self.close();
                                }
                            });
                        }, 1);
                    }

                    // use another timeout to make sure the blur-event-handler on the input was already triggered
                    setTimeout(function () {
                        clearTimeout(self.closing);
                    }, 13);
                })
                .menu({
                    focus:function (event, ui) {
                        var item = ui.item.data("item.autocomplete");
                        if (false !== self._trigger("focus", event, { item:item })) {
                            // use value to match what will end up in the input, if it was a key event
                            if (/^key/.test(event.originalEvent.type)) {
                                self.element.val(item.value);
                            }
                        }
                    },
                    selected:function (event, ui) {
                        var item = ui.item.data("item.autocomplete"),
                            previous = self.previous;

                        // only trigger when focus was lost (click on menu)
                        if (self.element[0] !== doc.activeElement) {
                            self.element.focus();
                            self.previous = previous;
                            // #6109 - IE triggers two focus events and the second
                            // is asynchronous, so we need to reset the previous
                            // term synchronously and asynchronously :-(
                            setTimeout(function () {
                                self.previous = previous;
                                self.selectedItem = item;
                            }, 1);
                        }

                        if (false !== self._trigger("select", event, { item:item })) {
                            self.element.val(item.value);
                        }
                        // reset the term after the select event
                        // this allows custom select handling to work properly
                        self.term = self.element.val();

                        self.close(event);
                        self.selectedItem = item;
                    },
                    blur:function (event, ui) {
                        // don't set the value of the text field if it's already correct
                        // this prevents moving the cursor unnecessarily
                        if (self.menu.element.is(":visible") &&
                            ( self.element.val() !== self.term )) {
                            self.element.val(self.term);
                        }
                    }
                })
                .zIndex(this.element.zIndex() + 1)
                // workaround for jQuery bug #5781 http://dev.jquery.com/ticket/5781
                .css({ top:0, left:0 })
                .hide()
                .data("menu");
            if ($.fn.bgiframe) {
                this.menu.element.bgiframe();
            }
            // turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            self.beforeunloadHandler = function () {
                self.element.removeAttr("autocomplete");
            };
            $(window).bind("beforeunload", self.beforeunloadHandler);
        },

        destroy:function () {
            this.element
                .removeClass("ui-autocomplete-input")
                .removeAttr("autocomplete")
                .removeAttr("role")
                .removeAttr("aria-autocomplete")
                .removeAttr("aria-haspopup");
            this.menu.element.remove();
            $(window).unbind("beforeunload", this.beforeunloadHandler);
            $.Widget.prototype.destroy.call(this);
        },

        _setOption:function (key, value) {
            $.Widget.prototype._setOption.apply(this, arguments);
            if (key === "source") {
                this._initSource();
            }
            if (key === "appendTo") {
                this.menu.element.appendTo($(value || "body", this.element[0].ownerDocument)[0])
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort();
            }
        },

        _initSource:function () {
            var self = this,
                array,
                url;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function (request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };
            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                this.source = function (request, response) {
                    if (self.xhr) {
                        self.xhr.abort();
                    }
                    self.xhr = $.ajax({
                        url:url,
                        data:request,
                        dataType:"json",
                        context:{
                            autocompleteRequest:++requestIndex
                        },
                        success:function (data, status) {
                            if (this.autocompleteRequest === requestIndex) {
                                response(data);
                            }
                        },
                        error:function () {
                            if (this.autocompleteRequest === requestIndex) {
                                response([]);
                            }
                        }
                    });
                };
            } else {
                this.source = this.options.source;
            }
        },

        search:function (value, event) {
            value = value != null ? value : this.element.val();

            // always save the actual value, not the one passed as an argument
            this.term = this.element.val();

            if (value.length < this.options.minLength) {
                return this.close(event);
            }

            clearTimeout(this.closing);
            if (this._trigger("search", event) === false) {
                return;
            }

            return this._search(value);
        },

        _search:function (value) {
            this.pending++;
            this.element.addClass("ui-autocomplete-loading");

            this.source({ term:value }, this.response);
        },

        _response:function (content) {
            if (!this.options.disabled && content && content.length) {
                content = this._normalize(content);
                this._suggest(content);
                this._trigger("open");
            } else {
                this.close();
            }
            this.pending--;
            if (!this.pending) {
                this.element.removeClass("ui-autocomplete-loading");
            }
        },

        close:function (event) {
            clearTimeout(this.closing);
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.deactivate();
                this._trigger("close", event);
            }
        },

        _change:function (event) {
            if (this.previous !== this.element.val()) {
                this._trigger("change", event, { item:this.selectedItem });
            }
        },

        _normalize:function (items) {
            // assume all items have the right format when the first item is complete
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function (item) {
                if (typeof item === "string") {
                    return {
                        label:item,
                        value:item
                    };
                }
                return $.extend({
                    label:item.label || item.value,
                    value:item.value || item.label
                }, item);
            });
        },

        _suggest:function (items) {
            var ul = this.menu.element
                .empty()
                .zIndex(this.element.zIndex() + 1);
            this._renderMenu(ul, items);
            // TODO refresh should check if the active item is still in the dom, removing the need for a manual deactivate
            this.menu.deactivate();
            this.menu.refresh();

            // size and position menu
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of:this.element
            }, this.options.position));

            if (this.options.autoFocus) {
                this.menu.next(new $.Event("mouseover"));
            }
        },

        _resizeMenu:function () {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(
                // Firefox wraps long text (possibly a rounding bug)
                // so we add 1px to avoid the wrapping (#7513)
                ul.width("").outerWidth() + 1,
                this.element.outerWidth()
            ));
        },

        _renderMenu:function (ul, items) {
            var self = this;
            $.each(items, function (index, item) {
                self._renderItem(ul, item);
            });
        },

        _renderItem:function (ul, item) {
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append($("<a></a>").text(item.label))
                .appendTo(ul);
        },

        _move:function (direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return;
            }
            if (this.menu.first() && /^previous/.test(direction) ||
                this.menu.last() && /^next/.test(direction)) {
                this.element.val(this.term);
                this.menu.deactivate();
                return;
            }
            this.menu[ direction ](event);
        },

        widget:function () {
            return this.menu.element;
        }
    });

    $.extend($.ui.autocomplete, {
        escapeRegex:function (value) {
            return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        },
        filter:function (array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function (value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    });

}(jQuery));

/*
 * jQuery UI Menu (not officially released)
 * 
 * This widget isn't yet finished and the API is subject to change. We plan to finish
 * it for the next release. You're welcome to give it a try anyway and give us feedback,
 * as long as you're okay with migrating your code later on. We can help with that, too.
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Menu
 *
 * Depends:
 *	jquery.ui.core.js
 *  jquery.ui.widget.js
 */
(function ($) {

    $.widget("ui.menu", {
        _create:function () {
            var self = this;
            this.element
                .addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
                .attr({
                    role:"listbox",
                    "aria-activedescendant":"ui-active-menuitem"
                })
                .click(function (event) {
                    if (!$(event.target).closest(".ui-menu-item a").length) {
                        return;
                    }
                    // temporary
                    event.preventDefault();
                    self.select(event);
                });
            this.refresh();
        },

        refresh:function () {
            var self = this;

            // don't refresh list items that are already adapted
            var items = this.element.children("li:not(.ui-menu-item):has(a)")
                .addClass("ui-menu-item")
                .attr("role", "menuitem");

            items.children("a")
                .addClass("ui-corner-all")
                .attr("tabindex", -1)
                // mouseenter doesn't work with event delegation
                .mouseenter(function (event) {
                    self.activate(event, $(this).parent());
                })
                .mouseleave(function () {
                    self.deactivate();
                });
        },

        activate:function (event, item) {
            this.deactivate();
            if (this.hasScroll()) {
                var offset = item.offset().top - this.element.offset().top,
                    scroll = this.element.scrollTop(),
                    elementHeight = this.element.height();
                if (offset < 0) {
                    this.element.scrollTop(scroll + offset);
                } else if (offset >= elementHeight) {
                    this.element.scrollTop(scroll + offset - elementHeight + item.height());
                }
            }
            this.active = item.eq(0)
                .children("a")
                .addClass("ui-state-hover")
                .attr("id", "ui-active-menuitem")
                .end();
            this._trigger("focus", event, { item:item });
        },

        deactivate:function () {
            if (!this.active) {
                return;
            }

            this.active.children("a")
                .removeClass("ui-state-hover")
                .removeAttr("id");
            this._trigger("blur");
            this.active = null;
        },

        next:function (event) {
            this.move("next", ".ui-menu-item:first", event);
        },

        previous:function (event) {
            this.move("prev", ".ui-menu-item:last", event);
        },

        first:function () {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },

        last:function () {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },

        move:function (direction, edge, event) {
            if (!this.active) {
                this.activate(event, this.element.children(edge));
                return;
            }
            var next = this.active[direction + "All"](".ui-menu-item").eq(0);
            if (next.length) {
                this.activate(event, next);
            } else {
                this.activate(event, this.element.children(edge));
            }
        },

        // TODO merge with previousPage
        nextPage:function (event) {
            if (this.hasScroll()) {
                // TODO merge with no-scroll-else
                if (!this.active || this.last()) {
                    this.activate(event, this.element.children(".ui-menu-item:first"));
                    return;
                }
                var base = this.active.offset().top,
                    height = this.element.height(),
                    result = this.element.children(".ui-menu-item").filter(function () {
                        var close = $(this).offset().top - base - height + $(this).height();
                        // TODO improve approximation
                        return close < 10 && close > -10;
                    });

                // TODO try to catch this earlier when scrollTop indicates the last page anyway
                if (!result.length) {
                    result = this.element.children(".ui-menu-item:last");
                }
                this.activate(event, result);
            } else {
                this.activate(event, this.element.children(".ui-menu-item")
                    .filter(!this.active || this.last() ? ":first" : ":last"));
            }
        },

        // TODO merge with nextPage
        previousPage:function (event) {
            if (this.hasScroll()) {
                // TODO merge with no-scroll-else
                if (!this.active || this.first()) {
                    this.activate(event, this.element.children(".ui-menu-item:last"));
                    return;
                }

                var base = this.active.offset().top,
                    height = this.element.height();
                result = this.element.children(".ui-menu-item").filter(function () {
                    var close = $(this).offset().top - base + height - $(this).height();
                    // TODO improve approximation
                    return close < 10 && close > -10;
                });

                // TODO try to catch this earlier when scrollTop indicates the last page anyway
                if (!result.length) {
                    result = this.element.children(".ui-menu-item:first");
                }
                this.activate(event, result);
            } else {
                this.activate(event, this.element.children(".ui-menu-item")
                    .filter(!this.active || this.first() ? ":last" : ":first"));
            }
        },

        hasScroll:function () {
            return this.element.height() < this.element[ $.fn.prop ? "prop" : "attr" ]("scrollHeight");
        },

        select:function (event) {
            this._trigger("selected", event, { item:this.active });
        }
    });

}(jQuery));
/*
 * jQuery UI Button 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Button
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    var lastActive, startXPos, startYPos, clickDragged,
        baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
        stateClasses = "ui-state-hover ui-state-active ",
        typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
        formResetHandler = function () {
            var buttons = $(this).find(":ui-button");
            setTimeout(function () {
                buttons.button("refresh");
            }, 1);
        },
        radioGroup = function (radio) {
            var name = radio.name,
                form = radio.form,
                radios = $([]);
            if (name) {
                if (form) {
                    radios = $(form).find("[name='" + name + "']");
                } else {
                    radios = $("[name='" + name + "']", radio.ownerDocument)
                        .filter(function () {
                            return !this.form;
                        });
                }
            }
            return radios;
        };

    $.widget("ui.button", {
        options:{
            disabled:null,
            text:true,
            label:null,
            icons:{
                primary:null,
                secondary:null
            }
        },
        _create:function () {
            this.element.closest("form")
                .unbind("reset.button")
                .bind("reset.button", formResetHandler);

            if (typeof this.options.disabled !== "boolean") {
                this.options.disabled = !!this.element.propAttr("disabled");
            } else {
                this.element.propAttr("disabled", this.options.disabled);
            }

            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");

            var self = this,
                options = this.options,
                toggleButton = this.type === "checkbox" || this.type === "radio",
                hoverClass = "ui-state-hover" + ( !toggleButton ? " ui-state-active" : "" ),
                focusClass = "ui-state-focus";

            if (options.label === null) {
                options.label = this.buttonElement.html();
            }

            this.buttonElement
                .addClass(baseClasses)
                .attr("role", "button")
                .bind("mouseenter.button", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).addClass("ui-state-hover");
                    if (this === lastActive) {
                        $(this).addClass("ui-state-active");
                    }
                })
                .bind("mouseleave.button", function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).removeClass(hoverClass);
                })
                .bind("click.button", function (event) {
                    if (options.disabled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                });

            this.element
                .bind("focus.button", function () {
                    // no need to check disabled, focus won't be triggered anyway
                    self.buttonElement.addClass(focusClass);
                })
                .bind("blur.button", function () {
                    self.buttonElement.removeClass(focusClass);
                });

            if (toggleButton) {
                this.element.bind("change.button", function () {
                    if (clickDragged) {
                        return;
                    }
                    self.refresh();
                });
                // if mouse moves between mousedown and mouseup (drag) set clickDragged flag
                // prevents issue where button state changes but checkbox/radio checked state
                // does not in Firefox (see ticket #6970)
                this.buttonElement
                    .bind("mousedown.button", function (event) {
                        if (options.disabled) {
                            return;
                        }
                        clickDragged = false;
                        startXPos = event.pageX;
                        startYPos = event.pageY;
                    })
                    .bind("mouseup.button", function (event) {
                        if (options.disabled) {
                            return;
                        }
                        if (startXPos !== event.pageX || startYPos !== event.pageY) {
                            clickDragged = true;
                        }
                    });
            }

            if (this.type === "checkbox") {
                this.buttonElement.bind("click.button", function () {
                    if (options.disabled || clickDragged) {
                        return false;
                    }
                    $(this).toggleClass("ui-state-active");
                    self.buttonElement.attr("aria-pressed", self.element[0].checked);
                });
            } else if (this.type === "radio") {
                this.buttonElement.bind("click.button", function () {
                    if (options.disabled || clickDragged) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    self.buttonElement.attr("aria-pressed", "true");

                    var radio = self.element[ 0 ];
                    radioGroup(radio)
                        .not(radio)
                        .map(function () {
                            return $(this).button("widget")[ 0 ];
                        })
                        .removeClass("ui-state-active")
                        .attr("aria-pressed", "false");
                });
            } else {
                this.buttonElement
                    .bind("mousedown.button", function () {
                        if (options.disabled) {
                            return false;
                        }
                        $(this).addClass("ui-state-active");
                        lastActive = this;
                        $(document).one("mouseup", function () {
                            lastActive = null;
                        });
                    })
                    .bind("mouseup.button", function () {
                        if (options.disabled) {
                            return false;
                        }
                        $(this).removeClass("ui-state-active");
                    })
                    .bind("keydown.button", function (event) {
                        if (options.disabled) {
                            return false;
                        }
                        if (event.keyCode == $.ui.keyCode.SPACE || event.keyCode == $.ui.keyCode.ENTER) {
                            $(this).addClass("ui-state-active");
                        }
                    })
                    .bind("keyup.button", function () {
                        $(this).removeClass("ui-state-active");
                    });

                if (this.buttonElement.is("a")) {
                    this.buttonElement.keyup(function (event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            // TODO pass through original event correctly (just as 2nd argument doesn't work)
                            $(this).click();
                        }
                    });
                }
            }

            // TODO: pull out $.Widget's handling for the disabled option into
            // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
            // be overridden by individual plugins
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },

        _determineButtonType:function () {

            if (this.element.is(":checkbox")) {
                this.type = "checkbox";
            } else if (this.element.is(":radio")) {
                this.type = "radio";
            } else if (this.element.is("input")) {
                this.type = "input";
            } else {
                this.type = "button";
            }

            if (this.type === "checkbox" || this.type === "radio") {
                // we don't search against the document in case the element
                // is disconnected from the DOM
                var ancestor = this.element.parents().filter(":last"),
                    labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) {
                        this.buttonElement = ancestor.find(labelSelector);
                    }
                }
                this.element.addClass("ui-helper-hidden-accessible");

                var checked = this.element.is(":checked");
                if (checked) {
                    this.buttonElement.addClass("ui-state-active");
                }
                this.buttonElement.attr("aria-pressed", checked);
            } else {
                this.buttonElement = this.element;
            }
        },

        widget:function () {
            return this.buttonElement;
        },

        destroy:function () {
            this.element
                .removeClass("ui-helper-hidden-accessible");
            this.buttonElement
                .removeClass(baseClasses + " " + stateClasses + " " + typeClasses)
                .removeAttr("role")
                .removeAttr("aria-pressed")
                .html(this.buttonElement.find(".ui-button-text").html());

            if (!this.hasTitle) {
                this.buttonElement.removeAttr("title");
            }

            $.Widget.prototype.destroy.call(this);
        },

        _setOption:function (key, value) {
            $.Widget.prototype._setOption.apply(this, arguments);
            if (key === "disabled") {
                if (value) {
                    this.element.propAttr("disabled", true);
                } else {
                    this.element.propAttr("disabled", false);
                }
                return;
            }
            this._resetButton();
        },

        refresh:function () {
            var isDisabled = this.element.is(":disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOption("disabled", isDisabled);
            }
            if (this.type === "radio") {
                radioGroup(this.element[0]).each(function () {
                    if ($(this).is(":checked")) {
                        $(this).button("widget")
                            .addClass("ui-state-active")
                            .attr("aria-pressed", "true");
                    } else {
                        $(this).button("widget")
                            .removeClass("ui-state-active")
                            .attr("aria-pressed", "false");
                    }
                });
            } else if (this.type === "checkbox") {
                if (this.element.is(":checked")) {
                    this.buttonElement
                        .addClass("ui-state-active")
                        .attr("aria-pressed", "true");
                } else {
                    this.buttonElement
                        .removeClass("ui-state-active")
                        .attr("aria-pressed", "false");
                }
            }
        },

        _resetButton:function () {
            if (this.type === "input") {
                if (this.options.label) {
                    this.element.val(this.options.label);
                }
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses),
                buttonText = $("<span></span>", this.element[0].ownerDocument)
                    .addClass("ui-button-text")
                    .html(this.options.label)
                    .appendTo(buttonElement.empty())
                    .text(),
                icons = this.options.icons,
                multipleIcons = icons.primary && icons.secondary,
                buttonClasses = [];

            if (icons.primary || icons.secondary) {
                if (this.options.text) {
                    buttonClasses.push("ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ));
                }

                if (icons.primary) {
                    buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                }

                if (icons.secondary) {
                    buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                }

                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");

                    if (!this.hasTitle) {
                        buttonElement.attr("title", buttonText);
                    }
                }
            } else {
                buttonClasses.push("ui-button-text-only");
            }
            buttonElement.addClass(buttonClasses.join(" "));
        }
    });

    $.widget("ui.buttonset", {
        options:{
            items:":button, :submit, :reset, :checkbox, :radio, a, :data(button)"
        },

        _create:function () {
            this.element.addClass("ui-buttonset");
        },

        _init:function () {
            this.refresh();
        },

        _setOption:function (key, value) {
            if (key === "disabled") {
                this.buttons.button("option", key, value);
            }

            $.Widget.prototype._setOption.apply(this, arguments);
        },

        refresh:function () {
            var rtl = this.element.css("direction") === "rtl";

            this.buttons = this.element.find(this.options.items)
                .filter(":ui-button")
                .button("refresh")
                .end()
                .not(":ui-button")
                .button()
                .end()
                .map(function () {
                    return $(this).button("widget")[ 0 ];
                })
                .removeClass("ui-corner-all ui-corner-left ui-corner-right")
                .filter(":first")
                .addClass(rtl ? "ui-corner-right" : "ui-corner-left")
                .end()
                .filter(":last")
                .addClass(rtl ? "ui-corner-left" : "ui-corner-right")
                .end()
                .end();
        },

        destroy:function () {
            this.element.removeClass("ui-buttonset");
            this.buttons
                .map(function () {
                    return $(this).button("widget")[ 0 ];
                })
                .removeClass("ui-corner-left ui-corner-right")
                .end()
                .button("destroy");

            $.Widget.prototype.destroy.call(this);
        }
    });

}(jQuery) );
/*
 * jQuery UI Datepicker 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function ($, undefined) {

    $.extend($.ui, { datepicker:{ version:"1.8.18" } });

    var PROP_NAME = 'datepicker';
    var dpuuid = new Date().getTime();
    var instActive;

    /* Date picker manager.
     Use the singleton instance of this class, $.datepicker, to interact with the date picker.
     Settings for (groups of) date pickers are maintained in an instance object,
     allowing multiple different settings on the same page. */

    function Datepicker() {
        this.debug = false; // Change this to true to start debugging
        this._curInst = null; // The current instance in use
        this._keyEvent = false; // If the last event was a key event
        this._disabledInputs = []; // List of date picker inputs that have been disabled
        this._datepickerShowing = false; // True if the popup picker is showing , false if not
        this._inDialog = false; // True if showing within a "dialog", false if not
        this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
        this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
        this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
        this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
        this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
        this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
        this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
        this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
        this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
        this.regional = []; // Available regional settings, indexed by language code
        this.regional[''] = { // Default regional settings
            closeText:'Done', // Display text for close link
            prevText:'Prev', // Display text for previous month link
            nextText:'Next', // Display text for next month link
            currentText:'Today', // Display text for current month link
            monthNames:['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'], // Names of months for drop-down and formatting
            monthNamesShort:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
            dayNames:['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
            dayNamesShort:['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
            dayNamesMin:['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'], // Column headings for days starting at Sunday
            weekHeader:'Wk', // Column header for week of the year
            dateFormat:'mm/dd/yy', // See format options on parseDate
            firstDay:0, // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL:false, // True if right-to-left language, false if left-to-right
            showMonthAfterYear:false, // True if the year select precedes month, false for month then year
            yearSuffix:'' // Additional text to append to the year in the month headers
        };
        this._defaults = { // Global defaults for all the date picker instances
            showOn:'focus', // 'focus' for popup on focus,
            // 'button' for trigger button, or 'both' for either
            showAnim:'fadeIn', // Name of jQuery animation for popup
            showOptions:{}, // Options for enhanced animations
            defaultDate:null, // Used when field is blank: actual date,
            // +/-number for offset from today, null for today
            appendText:'', // Display text following the input box, e.g. showing the format
            buttonText:'...', // Text for trigger button
            buttonImage:'', // URL for trigger button image
            buttonImageOnly:false, // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext:false, // True to hide next/previous month links
            // if not applicable, false to just disable them
            navigationAsDateFormat:false, // True if date formatting applied to prev/today/next links
            gotoCurrent:false, // True if today link goes back to current selection instead
            changeMonth:false, // True if month can be selected directly, false if only prev/next
            changeYear:false, // True if year can be selected directly, false if only prev/next
            yearRange:'c-10:c+10', // Range of years to display in drop-down,
            // either relative to today's year (-nn:+nn), relative to currently displayed year
            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths:false, // True to show dates in other months, false to leave blank
            selectOtherMonths:false, // True to allow selection of dates in other months, false for unselectable
            showWeek:false, // True to show week of the year, false to not show it
            calculateWeek:this.iso8601Week, // How to calculate the week of the year,
            // takes a Date and returns the number of the week for it
            shortYearCutoff:'+10', // Short year values < this are in the current century,
            // > this are in the previous century,
            // string value starting with '+' for current year + value
            minDate:null, // The earliest selectable date, or null for no limit
            maxDate:null, // The latest selectable date, or null for no limit
            duration:'fast', // Duration of display/closure
            beforeShowDay:null, // Function that takes a date and returns an array with
            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
            // [2] = cell title (optional), e.g. $.datepicker.noWeekends
            beforeShow:null, // Function that takes an input field and
            // returns a set of custom settings for the date picker
            onSelect:null, // Define a callback function when a date is selected
            onChangeMonthYear:null, // Define a callback function when the month or year is changed
            onClose:null, // Define a callback function when the datepicker is closed
            numberOfMonths:1, // Number of months to show at a time
            showCurrentAtPos:0, // The position in multipe months at which to show the current month (starting at 0)
            stepMonths:1, // Number of months to step back/forward
            stepBigMonths:12, // Number of months to step back/forward for the big links
            altField:'', // Selector for an alternate field to store selected dates into
            altFormat:'', // The date format to use for the alternate field
            constrainInput:true, // The input is constrained by the current date format
            showButtonPanel:false, // True to show button panel, false to not show it
            autoSize:false, // True to size the input for the date format, false to leave as is
            disabled:false // The initial disabled state
        };
        $.extend(this._defaults, this.regional['']);
        this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
    }

    $.extend(Datepicker.prototype, {
        /* Class name added to elements to indicate already configured with a date picker. */
        markerClassName:'hasDatepicker',

        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows:4,

        /* Debug logging (if enabled). */
        log:function () {
            if (this.debug)
                console.log.apply('', arguments);
        },

        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker:function () {
            return this.dpDiv;
        },

        /* Override the default settings for all instances of the date picker.
         @param  settings  object - the new settings to use as defaults (anonymous object)
         @return the manager object */
        setDefaults:function (settings) {
            extendRemove(this._defaults, settings || {});
            return this;
        },

        /* Attach the date picker to a jQuery selection.
         @param  target    element - the target input field or division or span
         @param  settings  object - the new settings to use for this date picker instance (anonymous) */
        _attachDatepicker:function (target, settings) {
            // check for settings on the control itself - in namespace 'date:'
            var inlineSettings = null;
            for (var attrName in this._defaults) {
                var attrValue = target.getAttribute('date:' + attrName);
                if (attrValue) {
                    inlineSettings = inlineSettings || {};
                    try {
                        inlineSettings[attrName] = eval(attrValue);
                    } catch (err) {
                        inlineSettings[attrName] = attrValue;
                    }
                }
            }
            var nodeName = target.nodeName.toLowerCase();
            var inline = (nodeName == 'div' || nodeName == 'span');
            if (!target.id) {
                this.uuid += 1;
                target.id = 'dp' + this.uuid;
            }
            var inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {}, inlineSettings || {});
            if (nodeName == 'input') {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },

        /* Create a new instance object. */
        _newInst:function (target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
            return {id:id, input:target, // associated target
                selectedDay:0, selectedMonth:0, selectedYear:0, // current selection
                drawMonth:0, drawYear:0, // month being drawn
                inline:inline, // is datepicker inline or not
                dpDiv:(!inline ? this.dpDiv : // presentation div
                    bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
        },

        /* Attach the date picker to an input field. */
        _connectDatepicker:function (target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName))
                return;
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).
                keypress(this._doKeyPress).keyup(this._doKeyUp).
                bind("setData.datepicker",function (event, key, value) {
                    inst.settings[key] = value;
                }).bind("getData.datepicker", function (event, key) {
                    return this._get(inst, key);
                });
            this._autoSize(inst);
            $.data(target, PROP_NAME, inst);
            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
        },

        /* Make attachments based on settings. */
        _attachments:function (input, inst) {
            var appendText = this._get(inst, 'appendText');
            var isRTL = this._get(inst, 'isRTL');
            if (inst.append)
                inst.append.remove();
            if (appendText) {
                inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
                input[isRTL ? 'before' : 'after'](inst.append);
            }
            input.unbind('focus', this._showDatepicker);
            if (inst.trigger)
                inst.trigger.remove();
            var showOn = this._get(inst, 'showOn');
            if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
                input.focus(this._showDatepicker);
            if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
                var buttonText = this._get(inst, 'buttonText');
                var buttonImage = this._get(inst, 'buttonImage');
                inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
                    $('<img/>').addClass(this._triggerClass).
                        attr({ src:buttonImage, alt:buttonText, title:buttonText }) :
                    $('<button type="button"></button>').addClass(this._triggerClass).
                        html(buttonImage == '' ? buttonText : $('<img/>').attr(
                        { src:buttonImage, alt:buttonText, title:buttonText })));
                input[isRTL ? 'before' : 'after'](inst.trigger);
                inst.trigger.click(function () {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
                        $.datepicker._hideDatepicker();
                    else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else
                        $.datepicker._showDatepicker(input[0]);
                    return false;
                });
            }
        },

        /* Apply the maximum length for the date format. */
        _autoSize:function (inst) {
            if (this._get(inst, 'autoSize') && !inst.inline) {
                var date = new Date(2009, 12 - 1, 20); // Ensure double digits
                var dateFormat = this._get(inst, 'dateFormat');
                if (dateFormat.match(/[DM]/)) {
                    var findMax = function (names) {
                        var max = 0;
                        var maxI = 0;
                        for (var i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
                        'monthNames' : 'monthNamesShort'))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
                        'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
                }
                inst.input.attr('size', this._formatDate(inst, date).length);
            }
        },

        /* Attach an inline date picker to a div. */
        _inlineDatepicker:function (target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName))
                return;
            divSpan.addClass(this.markerClassName).append(inst.dpDiv).
                bind("setData.datepicker",function (event, key, value) {
                    inst.settings[key] = value;
                }).bind("getData.datepicker", function (event, key) {
                    return this._get(inst, key);
                });
            $.data(target, PROP_NAME, inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
            inst.dpDiv.css("display", "block");
        },

        /* Pop-up the date picker in a "dialog" box.
         @param  input     element - ignored
         @param  date      string or Date - the initial date to display
         @param  onSelect  function - the function to call when a date is selected
         @param  settings  object - update the dialog date picker instance's settings (anonymous object)
         @param  pos       int[2] - coordinates for the dialog's position within the screen or
         event - with x/y coordinates or
         leave empty for default (screen centre)
         @return the manager object */
        _dialogDatepicker:function (input, date, onSelect, settings, pos) {
            var inst = this._dialogInst; // internal instance
            if (!inst) {
                this.uuid += 1;
                var id = 'dp' + this.uuid;
                this._dialogInput = $('<input type="text" id="' + id +
                    '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
                this._dialogInput.keydown(this._doKeyDown);
                $('body').append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], PROP_NAME, inst);
            }
            extendRemove(inst.settings, settings || {});
            date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);

            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                var browserWidth = document.documentElement.clientWidth;
                var browserHeight = document.documentElement.clientHeight;
                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = // should use actual width/height below
                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
            }

            // move input on screen for focus, but hidden behind dialog
            this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI)
                $.blockUI(this.dpDiv);
            $.data(this._dialogInput[0], PROP_NAME, inst);
            return this;
        },

        /* Detach a datepicker from its control.
         @param  target    element - the target input field or division or span */
        _destroyDatepicker:function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            $.removeData(target, PROP_NAME);
            if (nodeName == 'input') {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).
                    unbind('focus', this._showDatepicker).
                    unbind('keydown', this._doKeyDown).
                    unbind('keypress', this._doKeyPress).
                    unbind('keyup', this._doKeyUp);
            } else if (nodeName == 'div' || nodeName == 'span')
                $target.removeClass(this.markerClassName).empty();
        },

        /* Enable the date picker to a jQuery selection.
         @param  target    element - the target input field or division or span */
        _enableDatepicker:function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == 'input') {
                target.disabled = false;
                inst.trigger.filter('button').
                    each(function () {
                        this.disabled = false;
                    }).end().
                    filter('img').css({opacity:'1.0', cursor:''});
            }
            else if (nodeName == 'div' || nodeName == 'span') {
                var inline = $target.children('.' + this._inlineClass);
                inline.children().removeClass('ui-state-disabled');
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                    removeAttr("disabled");
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function (value) {
                    return (value == target ? null : value);
                }); // delete entry
        },

        /* Disable the date picker to a jQuery selection.
         @param  target    element - the target input field or division or span */
        _disableDatepicker:function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == 'input') {
                target.disabled = true;
                inst.trigger.filter('button').
                    each(function () {
                        this.disabled = true;
                    }).end().
                    filter('img').css({opacity:'0.5', cursor:'default'});
            }
            else if (nodeName == 'div' || nodeName == 'span') {
                var inline = $target.children('.' + this._inlineClass);
                inline.children().addClass('ui-state-disabled');
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                    attr("disabled", "disabled");
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function (value) {
                    return (value == target ? null : value);
                }); // delete entry
            this._disabledInputs[this._disabledInputs.length] = target;
        },

        /* Is the first field in a jQuery collection disabled as a datepicker?
         @param  target    element - the target input field or division or span
         @return boolean - true if disabled, false if enabled */
        _isDisabledDatepicker:function (target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] == target)
                    return true;
            }
            return false;
        },

        /* Retrieve the instance data for the target control.
         @param  target  element - the target input field or division or span
         @return  object - the associated instance data
         @throws  error if a jQuery problem getting data */
        _getInst:function (target) {
            try {
                return $.data(target, PROP_NAME);
            }
            catch (err) {
                throw 'Missing instance data for this datepicker';
            }
        },

        /* Update or retrieve the settings for a date picker attached to an input field or division.
         @param  target  element - the target input field or division or span
         @param  name    object - the new settings to update or
         string - the name of the setting to change or retrieve,
         when retrieving also 'all' for all instance settings or
         'defaults' for all global defaults
         @param  value   any - the new value for the setting
         (omit if above is an object or to retrieve a value) */
        _optionDatepicker:function (target, name, value) {
            var inst = this._getInst(target);
            if (arguments.length == 2 && typeof name == 'string') {
                return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
                    (inst ? (name == 'all' ? $.extend({}, inst.settings) :
                        this._get(inst, name)) : null));
            }
            var settings = name || {};
            if (typeof name == 'string') {
                settings = {};
                settings[name] = value;
            }
            if (inst) {
                if (this._curInst == inst) {
                    this._hideDatepicker();
                }
                var date = this._getDateDatepicker(target, true);
                var minDate = this._getMinMaxDate(inst, 'min');
                var maxDate = this._getMinMaxDate(inst, 'max');
                extendRemove(inst.settings, settings);
                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
                    inst.settings.minDate = this._formatDate(inst, minDate);
                if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },

        // change method deprecated
        _changeDatepicker:function (target, name, value) {
            this._optionDatepicker(target, name, value);
        },

        /* Redraw the date picker attached to an input field or division.
         @param  target  element - the target input field or division or span */
        _refreshDatepicker:function (target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },

        /* Set the dates for a jQuery selection.
         @param  target   element - the target input field or division or span
         @param  date     Date - the new date */
        _setDateDatepicker:function (target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },

        /* Get the date(s) for the first entry in a jQuery selection.
         @param  target     element - the target input field or division or span
         @param  noDefault  boolean - true if no default date is to be used
         @return Date - the current date */
        _getDateDatepicker:function (target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline)
                this._setDateFromField(inst, noDefault);
            return (inst ? this._getDate(inst) : null);
        },

        /* Handle keystrokes. */
        _doKeyDown:function (event) {
            var inst = $.datepicker._getInst(event.target);
            var handled = true;
            var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing)
                switch (event.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker();
                        handled = false;
                        break; // hide on tab out
                    case 13:
                        var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' +
                            $.datepicker._currentClass + ')', inst.dpDiv);
                        if (sel[0])
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                        var onSelect = $.datepicker._get(inst, 'onSelect');
                        if (onSelect) {
                            var dateStr = $.datepicker._formatDate(inst);

                            // trigger custom callback
                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                        }
                        else
                            $.datepicker._hideDatepicker();
                        return false; // don't submit the form
                        break; // select the value on enter
                    case 27:
                        $.datepicker._hideDatepicker();
                        break; // hide on escape
                    case 33:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -$.datepicker._get(inst, 'stepBigMonths') :
                            -$.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // previous month/year on page up/+ ctrl
                    case 34:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +$.datepicker._get(inst, 'stepBigMonths') :
                            +$.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // next month/year on page down/+ ctrl
                    case 35:
                        if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break; // clear on ctrl or command +end
                    case 36:
                        if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break; // current on ctrl or command +home
                    case 37:
                        if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        // -1 day on ctrl or command +left
                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -$.datepicker._get(inst, 'stepBigMonths') :
                            -$.datepicker._get(inst, 'stepMonths')), 'M');
                        // next month/year on alt +left on Mac
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break; // -1 week on ctrl or command +up
                    case 39:
                        if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        // +1 day on ctrl or command +right
                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +$.datepicker._get(inst, 'stepBigMonths') :
                            +$.datepicker._get(inst, 'stepMonths')), 'M');
                        // next month/year on alt +right
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break; // +1 week on ctrl or command +down
                    default:
                        handled = false;
                }
            else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
                $.datepicker._showDatepicker(this);
            else {
                handled = false;
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },

        /* Filter entered characters - based on date format. */
        _doKeyPress:function (event) {
            var inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, 'constrainInput')) {
                var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
                var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
            }
        },

        /* Synchronise manual entry and field/alternate field. */
        _doKeyUp:function (event) {
            var inst = $.datepicker._getInst(event.target);
            if (inst.input.val() != inst.lastVal) {
                try {
                    var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
                        (inst.input ? inst.input.val() : null),
                        $.datepicker._getFormatConfig(inst));
                    if (date) { // only if valid
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                }
                catch (event) {
                    $.datepicker.log(event);
                }
            }
            return true;
        },

        /* Pop-up the date picker for a given input field.
         If false returned from beforeShow event handler do not show. 
         @param  input  element - the input field attached to the date picker or
         event - if triggered by focus */
        _showDatepicker:function (input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
                input = $('input', input.parentNode)[0];
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
                return;
            var inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst != inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                }
            }
            var beforeShow = $.datepicker._get(inst, 'beforeShow');
            var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if (beforeShowSettings === false) {
                //false
                return;
            }
            extendRemove(inst.settings, beforeShowSettings);
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) // hide cursor
                input.value = '';
            if (!$.datepicker._pos) { // position below input
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight; // add the height
            }
            var isFixed = false;
            $(input).parents().each(function () {
                isFixed |= $(this).css('position') == 'fixed';
                return !isFixed;
            });
            if (isFixed && $.browser.opera) { // correction for Opera when fixed and scrolled
                $.datepicker._pos[0] -= document.documentElement.scrollLeft;
                $.datepicker._pos[1] -= document.documentElement.scrollTop;
            }
            var offset = {left:$.datepicker._pos[0], top:$.datepicker._pos[1]};
            $.datepicker._pos = null;
            //to avoid flashes on Firefox
            inst.dpDiv.empty();
            // determine sizing offscreen
            inst.dpDiv.css({position:'absolute', display:'block', top:'-1000px'});
            $.datepicker._updateDatepicker(inst);
            // fix width for dynamic number of date pickers
            // and adjust position before showing
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({position:($.datepicker._inDialog && $.blockUI ?
                'static' : (isFixed ? 'fixed' : 'absolute')), display:'none',
                left:offset.left + 'px', top:offset.top + 'px'});
            if (!inst.inline) {
                var showAnim = $.datepicker._get(inst, 'showAnim');
                var duration = $.datepicker._get(inst, 'duration');
                var postProcess = function () {
                    var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
                    if (!!cover.length) {
                        var borders = $.datepicker._getBorders(inst.dpDiv);
                        cover.css({left:-borders[0], top:-borders[1],
                            width:inst.dpDiv.outerWidth(), height:inst.dpDiv.outerHeight()});
                    }
                };
                inst.dpDiv.zIndex($(input).zIndex() + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects[showAnim])
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                else
                    inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
                if (!showAnim || !duration)
                    postProcess();
                if (inst.input.is(':visible') && !inst.input.is(':disabled'))
                    inst.input.focus();
                $.datepicker._curInst = inst;
            }
        },

        /* Generate the date picker content. */
        _updateDatepicker:function (inst) {
            var self = this;
            self.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
            var borders = $.datepicker._getBorders(inst.dpDiv);
            instActive = inst; // for delegate hover events
            inst.dpDiv.empty().append(this._generateHTML(inst));
            var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
            if (!!cover.length) { //avoid call to outerXXXX() when not in IE6
                cover.css({left:-borders[0], top:-borders[1], width:inst.dpDiv.outerWidth(), height:inst.dpDiv.outerHeight()})
            }
            inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
            var numMonths = this._getNumberOfMonths(inst);
            var cols = numMonths[1];
            var width = 17;
            inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
            if (cols > 1)
                inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
            inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
                'Class']('ui-datepicker-multi');
            inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
                'Class']('ui-datepicker-rtl');
            if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
                // #6694 - don't focus the input if it's already focused
                // this breaks the change event in IE
                inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
                inst.input.focus();
            // deffered render of the years select (to avoid flashes on Firefox) 
            if (inst.yearshtml) {
                var origyearshtml = inst.yearshtml;
                setTimeout(function () {
                    //assure that inst.yearshtml didn't change.
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },

        /* Retrieve the size of left and top borders for an element.
         @param  elem  (jQuery object) the element of interest
         @return  (number[2]) the left and top borders */
        _getBorders:function (elem) {
            var convert = function (value) {
                return {thin:1, medium:2, thick:3}[value] || value;
            };
            return [parseFloat(convert(elem.css('border-left-width'))),
                parseFloat(convert(elem.css('border-top-width')))];
        },

        /* Check positioning to remain on screen. */
        _checkOffset:function (inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth();
            var dpHeight = inst.dpDiv.outerHeight();
            var inputWidth = inst.input ? inst.input.outerWidth() : 0;
            var inputHeight = inst.input ? inst.input.outerHeight() : 0;
            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();

            offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

            // now check if datepicker is showing outside window viewport - move to a better place if so.
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight) : 0);

            return offset;
        },

        /* Find an object's position on the screen. */
        _findPos:function (obj) {
            var inst = this._getInst(obj);
            var isRTL = this._get(inst, 'isRTL');
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },

        /* Hide the date picker from view.
         @param  input  element - the input field attached to the date picker */
        _hideDatepicker:function (input) {
            var inst = this._curInst;
            if (!inst || (input && inst != $.data(input, PROP_NAME)))
                return;
            if (this._datepickerShowing) {
                var showAnim = this._get(inst, 'showAnim');
                var duration = this._get(inst, 'duration');
                var self = this;
                var postProcess = function () {
                    $.datepicker._tidyDialog(inst);
                    self._curInst = null;
                };
                if ($.effects && $.effects[showAnim])
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                else
                    inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
                        (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
                if (!showAnim)
                    postProcess();
                this._datepickerShowing = false;
                var onClose = this._get(inst, 'onClose');
                if (onClose)
                    onClose.apply((inst.input ? inst.input[0] : null),
                        [(inst.input ? inst.input.val() : ''), inst]);
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({ position:'absolute', left:'0', top:'-100px' });
                    if ($.blockUI) {
                        $.unblockUI();
                        $('body').append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },

        /* Tidy up after a dialog display. */
        _tidyDialog:function (inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
        },

        /* Close date picker if clicked elsewhere. */
        _checkExternalClick:function (event) {
            if (!$.datepicker._curInst)
                return;

            var $target = $(event.target),
                inst = $.datepicker._getInst($target[0]);

            if (( ( $target[0].id != $.datepicker._mainDivId &&
                $target.parents('#' + $.datepicker._mainDivId).length == 0 &&
                !$target.hasClass($.datepicker.markerClassName) &&
                !$target.closest("." + $.datepicker._triggerClass).length &&
                $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
                ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst ))
                $.datepicker._hideDatepicker();
        },

        /* Adjust one of the date sub-fields. */
        _adjustDate:function (id, offset, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset +
                (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
                period);
            this._updateDatepicker(inst);
        },

        /* Action for current link. */
        _gotoToday:function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            }
            else {
                var date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a new month/year. */
        _selectMonthYear:function (id, select, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
                inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
                    parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a day. */
        _selectDay:function (id, month, year, td) {
            var target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }
            var inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $('a', td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst,
                inst.currentDay, inst.currentMonth, inst.currentYear));
        },

        /* Erase the input field and hide the date picker. */
        _clearDate:function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            this._selectDate(target, '');
        },

        /* Update the input field with the selected date. */
        _selectDate:function (id, dateStr) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input)
                inst.input.val(dateStr);
            this._updateAlternate(inst);
            var onSelect = this._get(inst, 'onSelect');
            if (onSelect)
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
            else if (inst.input)
                inst.input.trigger('change'); // fire the change event
            if (inst.inline)
                this._updateDatepicker(inst);
            else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof(inst.input[0]) != 'object')
                    inst.input.focus(); // restore focus
                this._lastInput = null;
            }
        },

        /* Update any alternate field to synchronise with the main field. */
        _updateAlternate:function (inst) {
            var altField = this._get(inst, 'altField');
            if (altField) { // update alternate field too
                var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
                var date = this._getDate(inst);
                var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function () {
                    $(this).val(dateStr);
                });
            }
        },

        /* Set as beforeShowDay function to prevent selection of weekends.
         @param  date  Date - the date to customise
         @return [boolean, string] - is this date selectable?, what is its CSS class? */
        noWeekends:function (date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ''];
        },

        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
         @param  date  Date - the date to get the week for
         @return  number - the number of the week within the year that contains this date */
        iso8601Week:function (date) {
            var checkDate = new Date(date.getTime());
            // Find Thursday of this week starting on Monday
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            var time = checkDate.getTime();
            checkDate.setMonth(0); // Compare with Jan 1
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        },

        /* Parse a string value into a date object.
         See formatDate below for the possible formats.

         @param  format    string - the expected format of the date
         @param  value     string - the date in the above format
         @param  settings  Object - attributes include:
         shortYearCutoff  number - the cutoff year for determining the century (optional)
         dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
         dayNames         string[7] - names of the days from Sunday (optional)
         monthNamesShort  string[12] - abbreviated names of the months (optional)
         monthNames       string[12] - names of the months (optional)
         @return  Date - the extracted date value or null if value is blank */
        parseDate:function (format, value, settings) {
            if (format == null || value == null)
                throw 'Invalid arguments';
            value = (typeof value == 'object' ? value.toString() : value + '');
            if (value == '')
                return null;
            var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var year = -1;
            var month = -1;
            var day = -1;
            var doy = -1;
            var literal = false;
            // Check whether a format character is doubled
            var lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            // Extract a number from the string value
            var getNumber = function (match) {
                var isDoubled = lookAhead(match);
                var size = (match == '@' ? 14 : (match == '!' ? 20 :
                    (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
                var digits = new RegExp('^\\d{1,' + size + '}');
                var num = value.substring(iValue).match(digits);
                if (!num)
                    throw 'Missing number at position ' + iValue;
                iValue += num[0].length;
                return parseInt(num[0], 10);
            };
            // Extract a name from the string value and convert to an index
            var getName = function (match, shortNames, longNames) {
                var names = $.map(lookAhead(match) ? longNames : shortNames,function (v, k) {
                    return [
                        [k, v]
                    ];
                }).sort(function (a, b) {
                        return -(a[1].length - b[1].length);
                    });
                var index = -1;
                $.each(names, function (i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return false;
                    }
                });
                if (index != -1)
                    return index + 1;
                else
                    throw 'Unknown name at position ' + iValue;
            };
            // Confirm that a literal character matches the string value
            var checkLiteral = function () {
                if (value.charAt(iValue) != format.charAt(iFormat))
                    throw 'Unexpected literal at position ' + iValue;
                iValue++;
            };
            var iValue = 0;
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal)
                    if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                        literal = false;
                    else
                        checkLiteral();
                else
                    switch (format.charAt(iFormat)) {
                        case 'd':
                            day = getNumber('d');
                            break;
                        case 'D':
                            getName('D', dayNamesShort, dayNames);
                            break;
                        case 'o':
                            doy = getNumber('o');
                            break;
                        case 'm':
                            month = getNumber('m');
                            break;
                        case 'M':
                            month = getName('M', monthNamesShort, monthNames);
                            break;
                        case 'y':
                            year = getNumber('y');
                            break;
                        case '@':
                            var date = new Date(getNumber('@'));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case '!':
                            var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'"))
                                checkLiteral();
                            else
                                literal = true;
                            break;
                        default:
                            checkLiteral();
                    }
            }
            if (iValue < value.length) {
                throw "Extra/unparsed characters found in date: " + value.substring(iValue);
            }
            if (year == -1)
                year = new Date().getFullYear();
            else if (year < 100)
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    (year <= shortYearCutoff ? 0 : -100);
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    var dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim)
                        break;
                    month++;
                    day -= dim;
                } while (true);
            }
            var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
                throw 'Invalid date'; // E.g. 31/02/00
            return date;
        },

        /* Standard date formats. */
        ATOM:'yy-mm-dd', // RFC 3339 (ISO 8601)
        COOKIE:'D, dd M yy',
        ISO_8601:'yy-mm-dd',
        RFC_822:'D, d M y',
        RFC_850:'DD, dd-M-y',
        RFC_1036:'D, d M y',
        RFC_1123:'D, d M yy',
        RFC_2822:'D, d M yy',
        RSS:'D, d M y', // RFC 822
        TICKS:'!',
        TIMESTAMP:'@',
        W3C:'yy-mm-dd', // ISO 8601

        _ticksTo1970:(((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

        /* Format a date object into a string value.
         The format can be combinations of the following:
         d  - day of month (no leading zero)
         dd - day of month (two digit)
         o  - day of year (no leading zeros)
         oo - day of year (three digit)
         D  - day name short
         DD - day name long
         m  - month of year (no leading zero)
         mm - month of year (two digit)
         M  - month name short
         MM - month name long
         y  - year (two digit)
         yy - year (four digit)
         @ - Unix timestamp (ms since 01/01/1970)
         ! - Windows ticks (100ns since 01/01/0001)
         '...' - literal text
         '' - single quote

         @param  format    string - the desired format of the date
         @param  date      Date - the date value to format
         @param  settings  Object - attributes include:
         dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
         dayNames         string[7] - names of the days from Sunday (optional)
         monthNamesShort  string[12] - abbreviated names of the months (optional)
         monthNames       string[12] - names of the months (optional)
         @return  string - the date in the above format */
        formatDate:function (format, date, settings) {
            if (!date)
                return '';
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            // Check whether a format character is doubled
            var lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            // Format a number, with leading zero if necessary
            var formatNumber = function (match, value, len) {
                var num = '' + value;
                if (lookAhead(match))
                    while (num.length < len)
                        num = '0' + num;
                return num;
            };
            // Format a name, short or long as requested
            var formatName = function (match, value, shortNames, longNames) {
                return (lookAhead(match) ? longNames[value] : shortNames[value]);
            };
            var output = '';
            var literal = false;
            if (date)
                for (var iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal)
                        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                            literal = false;
                        else
                            output += format.charAt(iFormat);
                    else
                        switch (format.charAt(iFormat)) {
                            case 'd':
                                output += formatNumber('d', date.getDate(), 2);
                                break;
                            case 'D':
                                output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                                break;
                            case 'o':
                                output += formatNumber('o',
                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case 'm':
                                output += formatNumber('m', date.getMonth() + 1, 2);
                                break;
                            case 'M':
                                output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case 'y':
                                output += (lookAhead('y') ? date.getFullYear() :
                                    (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                                break;
                            case '@':
                                output += date.getTime();
                                break;
                            case '!':
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'"))
                                    output += "'";
                                else
                                    literal = true;
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                }
            return output;
        },

        /* Extract all possible characters from the date format. */
        _possibleChars:function (format) {
            var chars = '';
            var literal = false;
            // Check whether a format character is doubled
            var lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches)
                    iFormat++;
                return matches;
            };
            for (var iFormat = 0; iFormat < format.length; iFormat++)
                if (literal)
                    if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                        literal = false;
                    else
                        chars += format.charAt(iFormat);
                else
                    switch (format.charAt(iFormat)) {
                        case 'd':
                        case 'm':
                        case 'y':
                        case '@':
                            chars += '0123456789';
                            break;
                        case 'D':
                        case 'M':
                            return null; // Accept anything
                        case "'":
                            if (lookAhead("'"))
                                chars += "'";
                            else
                                literal = true;
                            break;
                        default:
                            chars += format.charAt(iFormat);
                    }
            return chars;
        },

        /* Get a setting value, defaulting if necessary. */
        _get:function (inst, name) {
            return inst.settings[name] !== undefined ?
                inst.settings[name] : this._defaults[name];
        },

        /* Parse existing date and initialise date picker. */
        _setDateFromField:function (inst, noDefault) {
            if (inst.input.val() == inst.lastVal) {
                return;
            }
            var dateFormat = this._get(inst, 'dateFormat');
            var dates = inst.lastVal = inst.input ? inst.input.val() : null;
            var date, defaultDate;
            date = defaultDate = this._getDefaultDate(inst);
            var settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                this.log(event);
                dates = (noDefault ? '' : dates);
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst);
        },

        /* Retrieve the default date shown on opening. */
        _getDefaultDate:function (inst) {
            return this._restrictMinMax(inst,
                this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
        },

        /* A date may be specified as an exact value or a relative one. */
        _determineDate:function (inst, date, defaultDate) {
            var offsetNumeric = function (offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date;
            };
            var offsetString = function (offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
                        offset, $.datepicker._getFormatConfig(inst));
                }
                catch (e) {
                    // Ignore
                }
                var date = (offset.toLowerCase().match(/^c/) ?
                    $.datepicker._getDate(inst) : null) || new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
                var matches = pattern.exec(offset);
                while (matches) {
                    switch (matches[2] || 'd') {
                        case 'd' :
                        case 'D' :
                            day += parseInt(matches[1], 10);
                            break;
                        case 'w' :
                        case 'W' :
                            day += parseInt(matches[1], 10) * 7;
                            break;
                        case 'm' :
                        case 'M' :
                            month += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        case 'y':
                        case 'Y' :
                            year += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            };
            var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
                (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
            newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },

        /* Handle switch to/from daylight saving.
         Hours may be non-zero on daylight saving cut-over:
         > 12 when midnight changeover, but then cannot generate
         midnight datetime, so jump to 1AM, otherwise reset.
         @param  date  (Date) the date to check
         @return  (Date) the corrected date */
        _daylightSavingAdjust:function (date) {
            if (!date) return null;
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },

        /* Set the date(s) directly. */
        _setDate:function (inst, date, noChange) {
            var clear = !date;
            var origMonth = inst.selectedMonth;
            var origYear = inst.selectedYear;
            var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
                this._notifyChange(inst);
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? '' : this._formatDate(inst));
            }
        },

        /* Retrieve the date(s) directly. */
        _getDate:function (inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
                this._daylightSavingAdjust(new Date(
                    inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate;
        },

        /* Generate the HTML for the current state of the date picker. */
        _generateHTML:function (inst) {
            var today = new Date();
            today = this._daylightSavingAdjust(
                new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
            var isRTL = this._get(inst, 'isRTL');
            var showButtonPanel = this._get(inst, 'showButtonPanel');
            var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
            var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
            var numMonths = this._getNumberOfMonths(inst);
            var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
            var stepMonths = this._get(inst, 'stepMonths');
            var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
            var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
                new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            var drawMonth = inst.drawMonth - showCurrentAtPos;
            var drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            var prevText = this._get(inst, 'prevText');
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
                this._getFormatConfig(inst)));
            var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
                '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid +
                    '.datepicker._adjustDate(\'#' + inst.id + '\', -' + stepMonths + ', \'M\');"' +
                    ' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
                (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
            var nextText = this._get(inst, 'nextText');
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
                this._getFormatConfig(inst)));
            var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
                '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid +
                    '.datepicker._adjustDate(\'#' + inst.id + '\', +' + stepMonths + ', \'M\');"' +
                    ' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
                (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
            var currentText = this._get(inst, 'currentText');
            var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText :
                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
            var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
                '.datepicker._hideDatepicker();">' + this._get(inst, 'closeText') + '</button>' : '');
            var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
                (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
                    '.datepicker._gotoToday(\'#' + inst.id + '\');"' +
                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
            var firstDay = parseInt(this._get(inst, 'firstDay'), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);
            var showWeek = this._get(inst, 'showWeek');
            var dayNames = this._get(inst, 'dayNames');
            var dayNamesShort = this._get(inst, 'dayNamesShort');
            var dayNamesMin = this._get(inst, 'dayNamesMin');
            var monthNames = this._get(inst, 'monthNames');
            var monthNamesShort = this._get(inst, 'monthNamesShort');
            var beforeShowDay = this._get(inst, 'beforeShowDay');
            var showOtherMonths = this._get(inst, 'showOtherMonths');
            var selectOtherMonths = this._get(inst, 'selectOtherMonths');
            var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
            var defaultDate = this._getDefaultDate(inst);
            var html = '';
            for (var row = 0; row < numMonths[0]; row++) {
                var group = '';
                this.maxRows = 4;
                for (var col = 0; col < numMonths[1]; col++) {
                    var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    var cornerClass = ' ui-corner-all';
                    var calender = '';
                    if (isMultiMonth) {
                        calender += '<div class="ui-datepicker-group';
                        if (numMonths[1] > 1)
                            switch (col) {
                                case 0:
                                    calender += ' ui-datepicker-group-first';
                                    cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');
                                    break;
                                case numMonths[1] - 1:
                                    calender += ' ui-datepicker-group-last';
                                    cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');
                                    break;
                                default:
                                    calender += ' ui-datepicker-group-middle';
                                    cornerClass = '';
                                    break;
                            }
                        calender += '">';
                    }
                    calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
                        (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
                        (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                        '</div><table class="ui-datepicker-calendar"><thead>' +
                        '<tr>';
                    var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
                    for (var dow = 0; dow < 7; dow++) { // days of the week
                        var day = (dow + firstDay) % 7;
                        thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
                            '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
                    }
                    calender += thead + '</tr></thead><tbody>';
                    var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                    var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows;
                    var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                        calender += '<tr>';
                        var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
                            this._get(inst, 'calculateWeek')(printDate) + '</td>');
                        for (var dow = 0; dow < 7; dow++) { // create date picker days
                            var daySettings = (beforeShowDay ?
                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
                            var otherMonth = (printDate.getMonth() != drawMonth);
                            var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += '<td class="' +
                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
                                ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
                                    (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
                                    // or defaultDate is current printedDate and defaultDate is selectedDate
                                    ' ' + this._dayOverClass : '') + // highlight selected day
                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') + // highlight unselectable days
                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
                                    (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
                                    (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
                                ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
                                (unselectable ? '' : ' onclick="DP_jQuery_' + dpuuid + '.datepicker._selectDay(\'#' +
                                    inst.id + '\',' + printDate.getMonth() + ',' + printDate.getFullYear() + ', this);return false;"') + '>' + // actions
                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
                                    (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
                                        (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
                                        (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
                                        (otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
                                        '" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + '</tr>';
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += '</tbody></table>' + (isMultiMonth ? '</div>' +
                        ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ?
                '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
            inst._keyEvent = false;
            return html;
        },

        /* Generate the month and year header. */
        _generateMonthYearHeader:function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var changeMonth = this._get(inst, 'changeMonth');
            var changeYear = this._get(inst, 'changeYear');
            var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
            var html = '<div class="ui-datepicker-title">';
            var monthHtml = '';
            // month selection
            if (secondary || !changeMonth)
                monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
            else {
                var inMinYear = (minDate && minDate.getFullYear() == drawYear);
                var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
                monthHtml += '<select class="ui-datepicker-month" ' +
                    'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'M\');" ' +
                    '>';
                for (var month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) &&
                        (!inMaxYear || month <= maxDate.getMonth()))
                        monthHtml += '<option value="' + month + '"' +
                            (month == drawMonth ? ' selected="selected"' : '') +
                            '>' + monthNamesShort[month] + '</option>';
                }
                monthHtml += '</select>';
            }
            if (!showMonthAfterYear)
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
            // year selection
            if (!inst.yearshtml) {
                inst.yearshtml = '';
                if (secondary || !changeYear)
                    html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
                else {
                    // determine range of years to display
                    var years = this._get(inst, 'yearRange').split(':');
                    var thisYear = new Date().getFullYear();
                    var determineYear = function (value) {
                        var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                            (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
                                parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year);
                    };
                    var year = determineYear(years[0]);
                    var endYear = Math.max(year, determineYear(years[1] || ''));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += '<select class="ui-datepicker-year" ' +
                        'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'Y\');" ' +
                        '>';
                    for (; year <= endYear; year++) {
                        inst.yearshtml += '<option value="' + year + '"' +
                            (year == drawYear ? ' selected="selected"' : '') +
                            '>' + year + '</option>';
                    }
                    inst.yearshtml += '</select>';

                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
            html += this._get(inst, 'yearSuffix');
            if (showMonthAfterYear)
                html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
            html += '</div>'; // Close datepicker_header
            return html;
        },

        /* Adjust one of the date sub-fields. */
        _adjustInstDate:function (inst, offset, period) {
            var year = inst.drawYear + (period == 'Y' ? offset : 0);
            var month = inst.drawMonth + (period == 'M' ? offset : 0);
            var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
                (period == 'D' ? offset : 0);
            var date = this._restrictMinMax(inst,
                this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period == 'M' || period == 'Y')
                this._notifyChange(inst);
        },

        /* Ensure a date is within any min/max bounds. */
        _restrictMinMax:function (inst, date) {
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            var newDate = (minDate && date < minDate ? minDate : date);
            newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
            return newDate;
        },

        /* Notify change of month/year. */
        _notifyChange:function (inst) {
            var onChange = this._get(inst, 'onChangeMonthYear');
            if (onChange)
                onChange.apply((inst.input ? inst.input[0] : null),
                    [inst.selectedYear, inst.selectedMonth + 1, inst]);
        },

        /* Determine the number of months to show. */
        _getNumberOfMonths:function (inst) {
            var numMonths = this._get(inst, 'numberOfMonths');
            return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
        },

        /* Determine the current maximum date - ensure no time components are set. */
        _getMinMaxDate:function (inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
        },

        /* Find the number of days in a given month. */
        _getDaysInMonth:function (year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },

        /* Find the day of the week of the first of a month. */
        _getFirstDayOfMonth:function (year, month) {
            return new Date(year, month, 1).getDay();
        },

        /* Determines if we should allow a "next/prev" month display change. */
        _canAdjustMonth:function (inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst);
            var date = this._daylightSavingAdjust(new Date(curYear,
                curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0)
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            return this._isInRange(inst, date);
        },

        /* Is the given date in the accepted range? */
        _isInRange:function (inst, date) {
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            return ((!minDate || date.getTime() >= minDate.getTime()) &&
                (!maxDate || date.getTime() <= maxDate.getTime()));
        },

        /* Provide the configuration settings for formatting/parsing. */
        _getFormatConfig:function (inst) {
            var shortYearCutoff = this._get(inst, 'shortYearCutoff');
            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {shortYearCutoff:shortYearCutoff,
                dayNamesShort:this._get(inst, 'dayNamesShort'), dayNames:this._get(inst, 'dayNames'),
                monthNamesShort:this._get(inst, 'monthNamesShort'), monthNames:this._get(inst, 'monthNames')};
        },

        /* Format the given date for display. */
        _formatDate:function (inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = (day ? (typeof day == 'object' ? day :
                this._daylightSavingAdjust(new Date(year, month, day))) :
                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
        }
    });

    /*
     * Bind hover events for datepicker elements.
     * Done via delegate so the binding only occurs once in the lifetime of the parent div.
     * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
     */
    function bindHover(dpDiv) {
        var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
        return dpDiv.bind('mouseout', function (event) {
            var elem = $(event.target).closest(selector);
            if (!elem.length) {
                return;
            }
            elem.removeClass("ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover");
        })
            .bind('mouseover', function (event) {
                var elem = $(event.target).closest(selector);
                if ($.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0]) ||
                    !elem.length) {
                    return;
                }
                elem.parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
                elem.addClass('ui-state-hover');
                if (elem.hasClass('ui-datepicker-prev')) elem.addClass('ui-datepicker-prev-hover');
                if (elem.hasClass('ui-datepicker-next')) elem.addClass('ui-datepicker-next-hover');
            });
    }

    /* jQuery extend now ignores nulls! */
    function extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props)
            if (props[name] == null || props[name] == undefined)
                target[name] = props[name];
        return target;
    }

    ;

    /* Determine whether an object is an array. */
    function isArray(a) {
        return (a && (($.browser.safari && typeof a == 'object' && a.length) ||
            (a.constructor && a.constructor.toString().match(/\Array\(\)/))));
    }

    ;

    /* Invoke the datepicker functionality.
     @param  options  string - a command, optionally followed by additional parameters or
     Object - settings for attaching new datepicker functionality
     @return  jQuery object */
    $.fn.datepicker = function (options) {

        /* Verify an empty collection wasn't passed - Fixes #6976 */
        if (!this.length) {
            return this;
        }

        /* Initialise the date picker. */
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick).
                find('body').append($.datepicker.dpDiv);
            $.datepicker.initialized = true;
        }

        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
            return $.datepicker['_' + options + 'Datepicker'].
                apply($.datepicker, [this[0]].concat(otherArgs));
        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
            return $.datepicker['_' + options + 'Datepicker'].
                apply($.datepicker, [this[0]].concat(otherArgs));
        return this.each(function () {
            typeof options == 'string' ?
                $.datepicker['_' + options + 'Datepicker'].
                    apply($.datepicker, [this].concat(otherArgs)) :
                $.datepicker._attachDatepicker(this, options);
        });
    };

    $.datepicker = new Datepicker(); // singleton instance
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.8.18";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
    window['DP_jQuery_' + dpuuid] = $;

})(jQuery);
/*
 * jQuery UI Dialog 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Dialog
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *  jquery.ui.button.js
 *	jquery.ui.draggable.js
 *	jquery.ui.mouse.js
 *	jquery.ui.position.js
 *	jquery.ui.resizable.js
 */
(function ($, undefined) {

    var uiDialogClasses =
            'ui-dialog ' +
                'ui-widget ' +
                'ui-widget-content ' +
                'ui-corner-all ',
        sizeRelatedOptions = {
            buttons:true,
            height:true,
            maxHeight:true,
            maxWidth:true,
            minHeight:true,
            minWidth:true,
            width:true
        },
        resizableRelatedOptions = {
            maxHeight:true,
            maxWidth:true,
            minHeight:true,
            minWidth:true
        },
    // support for jQuery 1.3.2 - handle common attrFn methods for dialog
        attrFn = $.attrFn || {
            val:true,
            css:true,
            html:true,
            text:true,
            data:true,
            width:true,
            height:true,
            offset:true,
            click:true
        };

    $.widget("ui.dialog", {
        options:{
            autoOpen:true,
            buttons:{},
            closeOnEscape:true,
            closeText:'close',
            dialogClass:'',
            draggable:true,
            hide:null,
            height:'auto',
            maxHeight:false,
            maxWidth:false,
            minHeight:150,
            minWidth:150,
            modal:false,
            position:{
                my:'center',
                at:'center',
                collision:'fit',
                // ensure that the titlebar is never outside the document
                using:function (pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css('top', pos.top - topOffset);
                    }
                }
            },
            resizable:true,
            show:null,
            stack:true,
            title:'',
            width:300,
            zIndex:1000
        },

        _create:function () {
            this.originalTitle = this.element.attr('title');
            // #5742 - .attr() might return a DOMElement
            if (typeof this.originalTitle !== "string") {
                this.originalTitle = "";
            }

            this.options.title = this.options.title || this.originalTitle;
            var self = this,
                options = self.options,

                title = options.title || '&#160;',
                titleId = $.ui.dialog.getTitleId(self.element),

                uiDialog = (self.uiDialog = $('<div></div>'))
                    .appendTo(document.body)
                    .hide()
                    .addClass(uiDialogClasses + options.dialogClass)
                    .css({
                        zIndex:options.zIndex
                    })
                    // setting tabIndex makes the div focusable
                    // setting outline to 0 prevents a border on focus in Mozilla
                    .attr('tabIndex', -1).css('outline', 0).keydown(function (event) {
                        if (options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
                            event.keyCode === $.ui.keyCode.ESCAPE) {

                            self.close(event);
                            event.preventDefault();
                        }
                    })
                    .attr({
                        role:'dialog',
                        'aria-labelledby':titleId
                    })
                    .mousedown(function (event) {
                        self.moveToTop(false, event);
                    }),

                uiDialogContent = self.element
                    .show()
                    .removeAttr('title')
                    .addClass(
                    'ui-dialog-content ' +
                        'ui-widget-content')
                    .appendTo(uiDialog),

                uiDialogTitlebar = (self.uiDialogTitlebar = $('<div></div>'))
                    .addClass(
                    'ui-dialog-titlebar ' +
                        'ui-widget-header ' +
                        'ui-corner-all ' +
                        'ui-helper-clearfix'
                )
                    .prependTo(uiDialog),

                uiDialogTitlebarClose = $('<a href="#"></a>')
                    .addClass(
                    'ui-dialog-titlebar-close ' +
                        'ui-corner-all'
                )
                    .attr('role', 'button')
                    .hover(
                    function () {
                        uiDialogTitlebarClose.addClass('ui-state-hover');
                    },
                    function () {
                        uiDialogTitlebarClose.removeClass('ui-state-hover');
                    }
                )
                    .focus(function () {
                        uiDialogTitlebarClose.addClass('ui-state-focus');
                    })
                    .blur(function () {
                        uiDialogTitlebarClose.removeClass('ui-state-focus');
                    })
                    .click(function (event) {
                        self.close(event);
                        return false;
                    })
                    .appendTo(uiDialogTitlebar),

                uiDialogTitlebarCloseText = (self.uiDialogTitlebarCloseText = $('<span></span>'))
                    .addClass(
                    'ui-icon ' +
                        'ui-icon-closethick'
                )
                    .text(options.closeText)
                    .appendTo(uiDialogTitlebarClose),

                uiDialogTitle = $('<span></span>')
                    .addClass('ui-dialog-title')
                    .attr('id', titleId)
                    .html(title)
                    .prependTo(uiDialogTitlebar);

            //handling of deprecated beforeclose (vs beforeClose) option
            //Ticket #4669 http://dev.jqueryui.com/ticket/4669
            //TODO: remove in 1.9pre
            if ($.isFunction(options.beforeclose) && !$.isFunction(options.beforeClose)) {
                options.beforeClose = options.beforeclose;
            }

            uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();

            if (options.draggable && $.fn.draggable) {
                self._makeDraggable();
            }
            if (options.resizable && $.fn.resizable) {
                self._makeResizable();
            }

            self._createButtons(options.buttons);
            self._isOpen = false;

            if ($.fn.bgiframe) {
                uiDialog.bgiframe();
            }
        },

        _init:function () {
            if (this.options.autoOpen) {
                this.open();
            }
        },

        destroy:function () {
            var self = this;

            if (self.overlay) {
                self.overlay.destroy();
            }
            self.uiDialog.hide();
            self.element
                .unbind('.dialog')
                .removeData('dialog')
                .removeClass('ui-dialog-content ui-widget-content')
                .hide().appendTo('body');
            self.uiDialog.remove();

            if (self.originalTitle) {
                self.element.attr('title', self.originalTitle);
            }

            return self;
        },

        widget:function () {
            return this.uiDialog;
        },

        close:function (event) {
            var self = this,
                maxZ, thisZ;

            if (false === self._trigger('beforeClose', event)) {
                return;
            }

            if (self.overlay) {
                self.overlay.destroy();
            }
            self.uiDialog.unbind('keypress.ui-dialog');

            self._isOpen = false;

            if (self.options.hide) {
                self.uiDialog.hide(self.options.hide, function () {
                    self._trigger('close', event);
                });
            } else {
                self.uiDialog.hide();
                self._trigger('close', event);
            }

            $.ui.dialog.overlay.resize();

            // adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
            if (self.options.modal) {
                maxZ = 0;
                $('.ui-dialog').each(function () {
                    if (this !== self.uiDialog[0]) {
                        thisZ = $(this).css('z-index');
                        if (!isNaN(thisZ)) {
                            maxZ = Math.max(maxZ, thisZ);
                        }
                    }
                });
                $.ui.dialog.maxZ = maxZ;
            }

            return self;
        },

        isOpen:function () {
            return this._isOpen;
        },

        // the force parameter allows us to move modal dialogs to their correct
        // position on open
        moveToTop:function (force, event) {
            var self = this,
                options = self.options,
                saveScroll;

            if ((options.modal && !force) ||
                (!options.stack && !options.modal)) {
                return self._trigger('focus', event);
            }

            if (options.zIndex > $.ui.dialog.maxZ) {
                $.ui.dialog.maxZ = options.zIndex;
            }
            if (self.overlay) {
                $.ui.dialog.maxZ += 1;
                self.overlay.$el.css('z-index', $.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ);
            }

            //Save and then restore scroll since Opera 9.5+ resets when parent z-Index is changed.
            //  http://ui.jquery.com/bugs/ticket/3193
            saveScroll = { scrollTop:self.element.scrollTop(), scrollLeft:self.element.scrollLeft() };
            $.ui.dialog.maxZ += 1;
            self.uiDialog.css('z-index', $.ui.dialog.maxZ);
            self.element.attr(saveScroll);
            self._trigger('focus', event);

            return self;
        },

        open:function () {
            if (this._isOpen) {
                return;
            }

            var self = this,
                options = self.options,
                uiDialog = self.uiDialog;

            self.overlay = options.modal ? new $.ui.dialog.overlay(self) : null;
            self._size();
            self._position(options.position);
            uiDialog.show(options.show);
            self.moveToTop(true);

            // prevent tabbing out of modal dialogs
            if (options.modal) {
                uiDialog.bind("keydown.ui-dialog", function (event) {
                    if (event.keyCode !== $.ui.keyCode.TAB) {
                        return;
                    }

                    var tabbables = $(':tabbable', this),
                        first = tabbables.filter(':first'),
                        last = tabbables.filter(':last');

                    if (event.target === last[0] && !event.shiftKey) {
                        first.focus(1);
                        return false;
                    } else if (event.target === first[0] && event.shiftKey) {
                        last.focus(1);
                        return false;
                    }
                });
            }

            // set focus to the first tabbable element in the content area or the first button
            // if there are no tabbable elements, set focus on the dialog itself
            $(self.element.find(':tabbable').get().concat(
                uiDialog.find('.ui-dialog-buttonpane :tabbable').get().concat(
                    uiDialog.get()))).eq(0).focus();

            self._isOpen = true;
            self._trigger('open');

            return self;
        },

        _createButtons:function (buttons) {
            var self = this,
                hasButtons = false,
                uiDialogButtonPane = $('<div></div>')
                    .addClass(
                    'ui-dialog-buttonpane ' +
                        'ui-widget-content ' +
                        'ui-helper-clearfix'
                ),
                uiButtonSet = $("<div></div>")
                    .addClass("ui-dialog-buttonset")
                    .appendTo(uiDialogButtonPane);

            // if we already have a button pane, remove it
            self.uiDialog.find('.ui-dialog-buttonpane').remove();

            if (typeof buttons === 'object' && buttons !== null) {
                $.each(buttons, function () {
                    return !(hasButtons = true);
                });
            }
            if (hasButtons) {
                $.each(buttons, function (name, props) {
                    props = $.isFunction(props) ?
                    { click:props, text:name } :
                        props;
                    var button = $('<button type="button"></button>')
                        .click(function () {
                            props.click.apply(self.element[0], arguments);
                        })
                        .appendTo(uiButtonSet);
                    // can't use .attr( props, true ) with jQuery 1.3.2.
                    $.each(props, function (key, value) {
                        if (key === "click") {
                            return;
                        }
                        if (key in attrFn) {
                            button[ key ](value);
                        } else {
                            button.attr(key, value);
                        }
                    });
                    if ($.fn.button) {
                        button.button();
                    }
                });
                uiDialogButtonPane.appendTo(self.uiDialog);
            }
        },

        _makeDraggable:function () {
            var self = this,
                options = self.options,
                doc = $(document),
                heightBeforeDrag;

            function filteredUi(ui) {
                return {
                    position:ui.position,
                    offset:ui.offset
                };
            }

            self.uiDialog.draggable({
                cancel:'.ui-dialog-content, .ui-dialog-titlebar-close',
                handle:'.ui-dialog-titlebar',
                containment:'document',
                start:function (event, ui) {
                    heightBeforeDrag = options.height === "auto" ? "auto" : $(this).height();
                    $(this).height($(this).height()).addClass("ui-dialog-dragging");
                    self._trigger('dragStart', event, filteredUi(ui));
                },
                drag:function (event, ui) {
                    self._trigger('drag', event, filteredUi(ui));
                },
                stop:function (event, ui) {
                    options.position = [ui.position.left - doc.scrollLeft(),
                        ui.position.top - doc.scrollTop()];
                    $(this).removeClass("ui-dialog-dragging").height(heightBeforeDrag);
                    self._trigger('dragStop', event, filteredUi(ui));
                    $.ui.dialog.overlay.resize();
                }
            });
        },

        _makeResizable:function (handles) {
            handles = (handles === undefined ? this.options.resizable : handles);
            var self = this,
                options = self.options,
            // .ui-resizable has position: relative defined in the stylesheet
            // but dialogs have to use absolute or fixed positioning
                position = self.uiDialog.css('position'),
                resizeHandles = (typeof handles === 'string' ?
                    handles :
                    'n,e,s,w,se,sw,ne,nw'
                    );

            function filteredUi(ui) {
                return {
                    originalPosition:ui.originalPosition,
                    originalSize:ui.originalSize,
                    position:ui.position,
                    size:ui.size
                };
            }

            self.uiDialog.resizable({
                cancel:'.ui-dialog-content',
                containment:'document',
                alsoResize:self.element,
                maxWidth:options.maxWidth,
                maxHeight:options.maxHeight,
                minWidth:options.minWidth,
                minHeight:self._minHeight(),
                handles:resizeHandles,
                start:function (event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    self._trigger('resizeStart', event, filteredUi(ui));
                },
                resize:function (event, ui) {
                    self._trigger('resize', event, filteredUi(ui));
                },
                stop:function (event, ui) {
                    $(this).removeClass("ui-dialog-resizing");
                    options.height = $(this).height();
                    options.width = $(this).width();
                    self._trigger('resizeStop', event, filteredUi(ui));
                    $.ui.dialog.overlay.resize();
                }
            })
                .css('position', position)
                .find('.ui-resizable-se').addClass('ui-icon ui-icon-grip-diagonal-se');
        },

        _minHeight:function () {
            var options = this.options;

            if (options.height === 'auto') {
                return options.minHeight;
            } else {
                return Math.min(options.minHeight, options.height);
            }
        },

        _position:function (position) {
            var myAt = [],
                offset = [0, 0],
                isVisible;

            if (position) {
                // deep extending converts arrays to objects in jQuery <= 1.3.2 :-(
                //		if (typeof position == 'string' || $.isArray(position)) {
                //			myAt = $.isArray(position) ? position : position.split(' ');

                if (typeof position === 'string' || (typeof position === 'object' && '0' in position)) {
                    myAt = position.split ? position.split(' ') : [position[0], position[1]];
                    if (myAt.length === 1) {
                        myAt[1] = myAt[0];
                    }

                    $.each(['left', 'top'], function (i, offsetPosition) {
                        if (+myAt[i] === myAt[i]) {
                            offset[i] = myAt[i];
                            myAt[i] = offsetPosition;
                        }
                    });

                    position = {
                        my:myAt.join(" "),
                        at:myAt.join(" "),
                        offset:offset.join(" ")
                    };
                }

                position = $.extend({}, $.ui.dialog.prototype.options.position, position);
            } else {
                position = $.ui.dialog.prototype.options.position;
            }

            // need to show the dialog to get the actual offset in the position plugin
            isVisible = this.uiDialog.is(':visible');
            if (!isVisible) {
                this.uiDialog.show();
            }
            this.uiDialog
                // workaround for jQuery bug #5781 http://dev.jquery.com/ticket/5781
                .css({ top:0, left:0 })
                .position($.extend({ of:window }, position));
            if (!isVisible) {
                this.uiDialog.hide();
            }
        },

        _setOptions:function (options) {
            var self = this,
                resizableOptions = {},
                resize = false;

            $.each(options, function (key, value) {
                self._setOption(key, value);

                if (key in sizeRelatedOptions) {
                    resize = true;
                }
                if (key in resizableRelatedOptions) {
                    resizableOptions[ key ] = value;
                }
            });

            if (resize) {
                this._size();
            }
            if (this.uiDialog.is(":data(resizable)")) {
                this.uiDialog.resizable("option", resizableOptions);
            }
        },

        _setOption:function (key, value) {
            var self = this,
                uiDialog = self.uiDialog;

            switch (key) {
                //handling of deprecated beforeclose (vs beforeClose) option
                //Ticket #4669 http://dev.jqueryui.com/ticket/4669
                //TODO: remove in 1.9pre
                case "beforeclose":
                    key = "beforeClose";
                    break;
                case "buttons":
                    self._createButtons(value);
                    break;
                case "closeText":
                    // ensure that we always pass a string
                    self.uiDialogTitlebarCloseText.text("" + value);
                    break;
                case "dialogClass":
                    uiDialog
                        .removeClass(self.options.dialogClass)
                        .addClass(uiDialogClasses + value);
                    break;
                case "disabled":
                    if (value) {
                        uiDialog.addClass('ui-dialog-disabled');
                    } else {
                        uiDialog.removeClass('ui-dialog-disabled');
                    }
                    break;
                case "draggable":
                    var isDraggable = uiDialog.is(":data(draggable)");
                    if (isDraggable && !value) {
                        uiDialog.draggable("destroy");
                    }

                    if (!isDraggable && value) {
                        self._makeDraggable();
                    }
                    break;
                case "position":
                    self._position(value);
                    break;
                case "resizable":
                    // currently resizable, becoming non-resizable
                    var isResizable = uiDialog.is(":data(resizable)");
                    if (isResizable && !value) {
                        uiDialog.resizable('destroy');
                    }

                    // currently resizable, changing handles
                    if (isResizable && typeof value === 'string') {
                        uiDialog.resizable('option', 'handles', value);
                    }

                    // currently non-resizable, becoming resizable
                    if (!isResizable && value !== false) {
                        self._makeResizable(value);
                    }
                    break;
                case "title":
                    // convert whatever was passed in o a string, for html() to not throw up
                    $(".ui-dialog-title", self.uiDialogTitlebar).html("" + (value || '&#160;'));
                    break;
            }

            $.Widget.prototype._setOption.apply(self, arguments);
        },

        _size:function () {
            /* If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
             * divs will both have width and height set, so we need to reset them
             */
            var options = this.options,
                nonContentHeight,
                minContentHeight,
                isVisible = this.uiDialog.is(":visible");

            // reset content sizing
            this.element.show().css({
                width:'auto',
                minHeight:0,
                height:0
            });

            if (options.minWidth > options.width) {
                options.width = options.minWidth;
            }

            // reset wrapper sizing
            // determine the height of all the non-content elements
            nonContentHeight = this.uiDialog.css({
                height:'auto',
                width:options.width
            })
                .height();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);

            if (options.height === "auto") {
                // only needed for IE6 support
                if ($.support.minHeight) {
                    this.element.css({
                        minHeight:minContentHeight,
                        height:"auto"
                    });
                } else {
                    this.uiDialog.show();
                    var autoHeight = this.element.css("height", "auto").height();
                    if (!isVisible) {
                        this.uiDialog.hide();
                    }
                    this.element.height(Math.max(autoHeight, minContentHeight));
                }
            } else {
                this.element.height(Math.max(options.height - nonContentHeight, 0));
            }

            if (this.uiDialog.is(':data(resizable)')) {
                this.uiDialog.resizable('option', 'minHeight', this._minHeight());
            }
        }
    });

    $.extend($.ui.dialog, {
        version:"1.8.18",

        uuid:0,
        maxZ:0,

        getTitleId:function ($el) {
            var id = $el.attr('id');
            if (!id) {
                this.uuid += 1;
                id = this.uuid;
            }
            return 'ui-dialog-title-' + id;
        },

        overlay:function (dialog) {
            this.$el = $.ui.dialog.overlay.create(dialog);
        }
    });

    $.extend($.ui.dialog.overlay, {
        instances:[],
        // reuse old instances due to IE memory leak with alpha transparency (see #5185)
        oldInstances:[],
        maxZ:0,
        events:$.map('focus,mousedown,mouseup,keydown,keypress,click'.split(','),
            function (event) {
                return event + '.dialog-overlay';
            }).join(' '),
        create:function (dialog) {
            if (this.instances.length === 0) {
                // prevent use of anchors and inputs
                // we use a setTimeout in case the overlay is created from an
                // event that we're going to be cancelling (see #2804)
                setTimeout(function () {
                    // handle $(el).dialog().dialog('close') (see #4065)
                    if ($.ui.dialog.overlay.instances.length) {
                        $(document).bind($.ui.dialog.overlay.events, function (event) {
                            // stop events if the z-index of the target is < the z-index of the overlay
                            // we cannot return true when we don't want to cancel the event (#3523)
                            if ($(event.target).zIndex() < $.ui.dialog.overlay.maxZ) {
                                return false;
                            }
                        });
                    }
                }, 1);

                // allow closing by pressing the escape key
                $(document).bind('keydown.dialog-overlay', function (event) {
                    if (dialog.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
                        event.keyCode === $.ui.keyCode.ESCAPE) {

                        dialog.close(event);
                        event.preventDefault();
                    }
                });

                // handle window resize
                $(window).bind('resize.dialog-overlay', $.ui.dialog.overlay.resize);
            }

            var $el = (this.oldInstances.pop() || $('<div></div>').addClass('ui-widget-overlay'))
                .appendTo(document.body)
                .css({
                    width:this.width(),
                    height:this.height()
                });

            if ($.fn.bgiframe) {
                $el.bgiframe();
            }

            this.instances.push($el);
            return $el;
        },

        destroy:function ($el) {
            var indexOf = $.inArray($el, this.instances);
            if (indexOf != -1) {
                this.oldInstances.push(this.instances.splice(indexOf, 1)[0]);
            }

            if (this.instances.length === 0) {
                $([document, window]).unbind('.dialog-overlay');
            }

            $el.remove();

            // adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
            var maxZ = 0;
            $.each(this.instances, function () {
                maxZ = Math.max(maxZ, this.css('z-index'));
            });
            this.maxZ = maxZ;
        },

        height:function () {
            var scrollHeight,
                offsetHeight;
            // handle IE 6
            if ($.browser.msie && $.browser.version < 7) {
                scrollHeight = Math.max(
                    document.documentElement.scrollHeight,
                    document.body.scrollHeight
                );
                offsetHeight = Math.max(
                    document.documentElement.offsetHeight,
                    document.body.offsetHeight
                );

                if (scrollHeight < offsetHeight) {
                    return $(window).height() + 'px';
                } else {
                    return scrollHeight + 'px';
                }
                // handle "good" browsers
            } else {
                return $(document).height() + 'px';
            }
        },

        width:function () {
            var scrollWidth,
                offsetWidth;
            // handle IE
            if ($.browser.msie) {
                scrollWidth = Math.max(
                    document.documentElement.scrollWidth,
                    document.body.scrollWidth
                );
                offsetWidth = Math.max(
                    document.documentElement.offsetWidth,
                    document.body.offsetWidth
                );

                if (scrollWidth < offsetWidth) {
                    return $(window).width() + 'px';
                } else {
                    return scrollWidth + 'px';
                }
                // handle "good" browsers
            } else {
                return $(document).width() + 'px';
            }
        },

        resize:function () {
            /* If the dialog is draggable and the user drags it past the
             * right edge of the window, the document becomes wider so we
             * need to stretch the overlay. If the user then drags the
             * dialog back to the left, the document will become narrower,
             * so we need to shrink the overlay to the appropriate size.
             * This is handled by shrinking the overlay before setting it
             * to the full document size.
             */
            var $overlays = $([]);
            $.each($.ui.dialog.overlay.instances, function () {
                $overlays = $overlays.add(this);
            });

            $overlays.css({
                width:0,
                height:0
            }).css({
                    width:$.ui.dialog.overlay.width(),
                    height:$.ui.dialog.overlay.height()
                });
        }
    });

    $.extend($.ui.dialog.overlay.prototype, {
        destroy:function () {
            $.ui.dialog.overlay.destroy(this.$el);
        }
    });

}(jQuery));
/*
 * jQuery UI Position 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Position
 */
(function ($, undefined) {

    $.ui = $.ui || {};

    var horizontalPositions = /left|center|right/,
        verticalPositions = /top|center|bottom/,
        center = "center",
        support = {},
        _position = $.fn.position,
        _offset = $.fn.offset;

    $.fn.position = function (options) {
        if (!options || !options.of) {
            return _position.apply(this, arguments);
        }

        // make a copy, we don't want to modify arguments
        options = $.extend({}, options);

        var target = $(options.of),
            targetElem = target[0],
            collision = ( options.collision || "flip" ).split(" "),
            offset = options.offset ? options.offset.split(" ") : [ 0, 0 ],
            targetWidth,
            targetHeight,
            basePosition;

        if (targetElem.nodeType === 9) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = { top:0, left:0 };
            // TODO: use $.isWindow() in 1.9
        } else if (targetElem.setTimeout) {
            targetWidth = target.width();
            targetHeight = target.height();
            basePosition = { top:target.scrollTop(), left:target.scrollLeft() };
        } else if (targetElem.preventDefault) {
            // force left top to allow flipping
            options.at = "left top";
            targetWidth = targetHeight = 0;
            basePosition = { top:options.of.pageY, left:options.of.pageX };
        } else {
            targetWidth = target.outerWidth();
            targetHeight = target.outerHeight();
            basePosition = target.offset();
        }

        // force my and at to have valid horizontal and veritcal positions
        // if a value is missing or invalid, it will be converted to center 
        $.each([ "my", "at" ], function () {
            var pos = ( options[this] || "" ).split(" ");
            if (pos.length === 1) {
                pos = horizontalPositions.test(pos[0]) ?
                    pos.concat([center]) :
                    verticalPositions.test(pos[0]) ?
                        [ center ].concat(pos) :
                        [ center, center ];
            }
            pos[ 0 ] = horizontalPositions.test(pos[0]) ? pos[ 0 ] : center;
            pos[ 1 ] = verticalPositions.test(pos[1]) ? pos[ 1 ] : center;
            options[ this ] = pos;
        });

        // normalize collision option
        if (collision.length === 1) {
            collision[ 1 ] = collision[ 0 ];
        }

        // normalize offset option
        offset[ 0 ] = parseInt(offset[0], 10) || 0;
        if (offset.length === 1) {
            offset[ 1 ] = offset[ 0 ];
        }
        offset[ 1 ] = parseInt(offset[1], 10) || 0;

        if (options.at[0] === "right") {
            basePosition.left += targetWidth;
        } else if (options.at[0] === center) {
            basePosition.left += targetWidth / 2;
        }

        if (options.at[1] === "bottom") {
            basePosition.top += targetHeight;
        } else if (options.at[1] === center) {
            basePosition.top += targetHeight / 2;
        }

        basePosition.left += offset[ 0 ];
        basePosition.top += offset[ 1 ];

        return this.each(function () {
            var elem = $(this),
                elemWidth = elem.outerWidth(),
                elemHeight = elem.outerHeight(),
                marginLeft = parseInt($.curCSS(this, "marginLeft", true)) || 0,
                marginTop = parseInt($.curCSS(this, "marginTop", true)) || 0,
                collisionWidth = elemWidth + marginLeft +
                    ( parseInt($.curCSS(this, "marginRight", true)) || 0 ),
                collisionHeight = elemHeight + marginTop +
                    ( parseInt($.curCSS(this, "marginBottom", true)) || 0 ),
                position = $.extend({}, basePosition),
                collisionPosition;

            if (options.my[0] === "right") {
                position.left -= elemWidth;
            } else if (options.my[0] === center) {
                position.left -= elemWidth / 2;
            }

            if (options.my[1] === "bottom") {
                position.top -= elemHeight;
            } else if (options.my[1] === center) {
                position.top -= elemHeight / 2;
            }

            // prevent fractions if jQuery version doesn't support them (see #5280)
            if (!support.fractions) {
                position.left = Math.round(position.left);
                position.top = Math.round(position.top);
            }

            collisionPosition = {
                left:position.left - marginLeft,
                top:position.top - marginTop
            };

            $.each([ "left", "top" ], function (i, dir) {
                if ($.ui.position[ collision[i] ]) {
                    $.ui.position[ collision[i] ][ dir ](position, {
                        targetWidth:targetWidth,
                        targetHeight:targetHeight,
                        elemWidth:elemWidth,
                        elemHeight:elemHeight,
                        collisionPosition:collisionPosition,
                        collisionWidth:collisionWidth,
                        collisionHeight:collisionHeight,
                        offset:offset,
                        my:options.my,
                        at:options.at
                    });
                }
            });

            if ($.fn.bgiframe) {
                elem.bgiframe();
            }
            elem.offset($.extend(position, { using:options.using }));
        });
    };

    $.ui.position = {
        fit:{
            left:function (position, data) {
                var win = $(window),
                    over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
                position.left = over > 0 ? position.left - over : Math.max(position.left - data.collisionPosition.left, position.left);
            },
            top:function (position, data) {
                var win = $(window),
                    over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
                position.top = over > 0 ? position.top - over : Math.max(position.top - data.collisionPosition.top, position.top);
            }
        },

        flip:{
            left:function (position, data) {
                if (data.at[0] === center) {
                    return;
                }
                var win = $(window),
                    over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
                    myOffset = data.my[ 0 ] === "left" ?
                        -data.elemWidth :
                        data.my[ 0 ] === "right" ?
                            data.elemWidth :
                            0,
                    atOffset = data.at[ 0 ] === "left" ?
                        data.targetWidth :
                        -data.targetWidth,
                    offset = -2 * data.offset[ 0 ];
                position.left += data.collisionPosition.left < 0 ?
                    myOffset + atOffset + offset :
                    over > 0 ?
                        myOffset + atOffset + offset :
                        0;
            },
            top:function (position, data) {
                if (data.at[1] === center) {
                    return;
                }
                var win = $(window),
                    over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
                    myOffset = data.my[ 1 ] === "top" ?
                        -data.elemHeight :
                        data.my[ 1 ] === "bottom" ?
                            data.elemHeight :
                            0,
                    atOffset = data.at[ 1 ] === "top" ?
                        data.targetHeight :
                        -data.targetHeight,
                    offset = -2 * data.offset[ 1 ];
                position.top += data.collisionPosition.top < 0 ?
                    myOffset + atOffset + offset :
                    over > 0 ?
                        myOffset + atOffset + offset :
                        0;
            }
        }
    };

// offset setter from jQuery 1.4
    if (!$.offset.setOffset) {
        $.offset.setOffset = function (elem, options) {
            // set position first, in-case top/left are set even on static elem
            if (/static/.test($.curCSS(elem, "position"))) {
                elem.style.position = "relative";
            }
            var curElem = $(elem),
                curOffset = curElem.offset(),
                curTop = parseInt($.curCSS(elem, "top", true), 10) || 0,
                curLeft = parseInt($.curCSS(elem, "left", true), 10) || 0,
                props = {
                    top:(options.top - curOffset.top) + curTop,
                    left:(options.left - curOffset.left) + curLeft
                };

            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        };

        $.fn.offset = function (options) {
            var elem = this[ 0 ];
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (options) {
                return this.each(function () {
                    $.offset.setOffset(this, options);
                });
            }
            return _offset.call(this);
        };
    }

// fraction support test (older versions of jQuery don't support fractions)
    (function () {
        var body = document.getElementsByTagName("body")[ 0 ],
            div = document.createElement("div"),
            testElement, testElementParent, testElementStyle, offset, offsetTotal;

        //Create a "fake body" for testing based on method used in jQuery.support
        testElement = document.createElement(body ? "div" : "body");
        testElementStyle = {
            visibility:"hidden",
            width:0,
            height:0,
            border:0,
            margin:0,
            background:"none"
        };
        if (body) {
            $.extend(testElementStyle, {
                position:"absolute",
                left:"-1000px",
                top:"-1000px"
            });
        }
        for (var i in testElementStyle) {
            testElement.style[ i ] = testElementStyle[ i ];
        }
        testElement.appendChild(div);
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore(testElement, testElementParent.firstChild);

        div.style.cssText = "position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;";

        offset = $(div).offset(function (_, offset) {
            return offset;
        }).offset();

        testElement.innerHTML = "";
        testElementParent.removeChild(testElement);

        offsetTotal = offset.top + offset.left + ( body ? 2000 : 0 );
        support.fractions = offsetTotal > 21 && offsetTotal < 22;
    })();

}(jQuery));
/*
 * jQuery UI Progressbar 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Progressbar
 *
 * Depends:
 *   jquery.ui.core.js
 *   jquery.ui.widget.js
 */
(function ($, undefined) {

    $.widget("ui.progressbar", {
        options:{
            value:0,
            max:100
        },

        min:0,

        _create:function () {
            this.element
                .addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
                .attr({
                    role:"progressbar",
                    "aria-valuemin":this.min,
                    "aria-valuemax":this.options.max,
                    "aria-valuenow":this._value()
                });

            this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>")
                .appendTo(this.element);

            this.oldValue = this._value();
            this._refreshValue();
        },

        destroy:function () {
            this.element
                .removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
                .removeAttr("role")
                .removeAttr("aria-valuemin")
                .removeAttr("aria-valuemax")
                .removeAttr("aria-valuenow");

            this.valueDiv.remove();

            $.Widget.prototype.destroy.apply(this, arguments);
        },

        value:function (newValue) {
            if (newValue === undefined) {
                return this._value();
            }

            this._setOption("value", newValue);
            return this;
        },

        _setOption:function (key, value) {
            if (key === "value") {
                this.options.value = value;
                this._refreshValue();
                if (this._value() === this.options.max) {
                    this._trigger("complete");
                }
            }

            $.Widget.prototype._setOption.apply(this, arguments);
        },

        _value:function () {
            var val = this.options.value;
            // normalize invalid value
            if (typeof val !== "number") {
                val = 0;
            }
            return Math.min(this.options.max, Math.max(this.min, val));
        },

        _percentage:function () {
            return 100 * this._value() / this.options.max;
        },

        _refreshValue:function () {
            var value = this.value();
            var percentage = this._percentage();

            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change");
            }

            this.valueDiv
                .toggle(value > this.min)
                .toggleClass("ui-corner-right", value === this.options.max)
                .width(percentage.toFixed(0) + "%");
            this.element.attr("aria-valuenow", value);
        }
    });

    $.extend($.ui.progressbar, {
        version:"1.8.18"
    });

})(jQuery);
/*
 * jQuery UI Slider 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Slider
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
    var numPages = 5;

    $.widget("ui.slider", $.ui.mouse, {

        widgetEventPrefix:"slide",

        options:{
            animate:false,
            distance:0,
            max:100,
            min:0,
            orientation:"horizontal",
            range:false,
            step:1,
            value:0,
            values:null
        },

        _create:function () {
            var self = this,
                o = this.options,
                existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),
                handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
                handleCount = ( o.values && o.values.length ) || 1,
                handles = [];

            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();

            this.element
                .addClass("ui-slider" +
                " ui-slider-" + this.orientation +
                " ui-widget" +
                " ui-widget-content" +
                " ui-corner-all" +
                ( o.disabled ? " ui-slider-disabled ui-disabled" : "" ));

            this.range = $([]);

            if (o.range) {
                if (o.range === true) {
                    if (!o.values) {
                        o.values = [ this._valueMin(), this._valueMin() ];
                    }
                    if (o.values.length && o.values.length !== 2) {
                        o.values = [ o.values[0], o.values[0] ];
                    }
                }

                this.range = $("<div></div>")
                    .appendTo(this.element)
                    .addClass("ui-slider-range" +
                    // note: this isn't the most fittingly semantic framework class for this element,
                    // but worked best visually with a variety of themes
                    " ui-widget-header" +
                    ( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ));
            }

            for (var i = existingHandles.length; i < handleCount; i += 1) {
                handles.push(handle);
            }

            this.handles = existingHandles.add($(handles.join("")).appendTo(self.element));

            this.handle = this.handles.eq(0);

            this.handles.add(this.range).filter("a")
                .click(function (event) {
                    event.preventDefault();
                })
                .hover(function () {
                    if (!o.disabled) {
                        $(this).addClass("ui-state-hover");
                    }
                }, function () {
                    $(this).removeClass("ui-state-hover");
                })
                .focus(function () {
                    if (!o.disabled) {
                        $(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
                        $(this).addClass("ui-state-focus");
                    } else {
                        $(this).blur();
                    }
                })
                .blur(function () {
                    $(this).removeClass("ui-state-focus");
                });

            this.handles.each(function (i) {
                $(this).data("index.ui-slider-handle", i);
            });

            this.handles
                .keydown(function (event) {
                    var index = $(this).data("index.ui-slider-handle"),
                        allowed,
                        curVal,
                        newVal,
                        step;

                    if (self.options.disabled) {
                        return;
                    }

                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                        case $.ui.keyCode.END:
                        case $.ui.keyCode.PAGE_UP:
                        case $.ui.keyCode.PAGE_DOWN:
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            event.preventDefault();
                            if (!self._keySliding) {
                                self._keySliding = true;
                                $(this).addClass("ui-state-active");
                                allowed = self._start(event, index);
                                if (allowed === false) {
                                    return;
                                }
                            }
                            break;
                    }

                    step = self.options.step;
                    if (self.options.values && self.options.values.length) {
                        curVal = newVal = self.values(index);
                    } else {
                        curVal = newVal = self.value();
                    }

                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                            newVal = self._valueMin();
                            break;
                        case $.ui.keyCode.END:
                            newVal = self._valueMax();
                            break;
                        case $.ui.keyCode.PAGE_UP:
                            newVal = self._trimAlignValue(curVal + ( (self._valueMax() - self._valueMin()) / numPages ));
                            break;
                        case $.ui.keyCode.PAGE_DOWN:
                            newVal = self._trimAlignValue(curVal - ( (self._valueMax() - self._valueMin()) / numPages ));
                            break;
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                            if (curVal === self._valueMax()) {
                                return;
                            }
                            newVal = self._trimAlignValue(curVal + step);
                            break;
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            if (curVal === self._valueMin()) {
                                return;
                            }
                            newVal = self._trimAlignValue(curVal - step);
                            break;
                    }

                    self._slide(event, index, newVal);
                })
                .keyup(function (event) {
                    var index = $(this).data("index.ui-slider-handle");

                    if (self._keySliding) {
                        self._keySliding = false;
                        self._stop(event, index);
                        self._change(event, index);
                        $(this).removeClass("ui-state-active");
                    }

                });

            this._refreshValue();

            this._animateOff = false;
        },

        destroy:function () {
            this.handles.remove();
            this.range.remove();

            this.element
                .removeClass("ui-slider" +
                " ui-slider-horizontal" +
                " ui-slider-vertical" +
                " ui-slider-disabled" +
                " ui-widget" +
                " ui-widget-content" +
                " ui-corner-all")
                .removeData("slider")
                .unbind(".slider");

            this._mouseDestroy();

            return this;
        },

        _mouseCapture:function (event) {
            var o = this.options,
                position,
                normValue,
                distance,
                closestHandle,
                self,
                index,
                allowed,
                offset,
                mouseOverHandle;

            if (o.disabled) {
                return false;
            }

            this.elementSize = {
                width:this.element.outerWidth(),
                height:this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();

            position = { x:event.pageX, y:event.pageY };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            self = this;
            this.handles.each(function (i) {
                var thisDistance = Math.abs(normValue - self.values(i));
                if (distance > thisDistance) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });

            // workaround for bug #3736 (if both handles of a range are at 0,
            // the first is always used as the one with least distance,
            // and moving it is obviously prevented by preventing negative ranges)
            if (o.range === true && this.values(1) === o.min) {
                index += 1;
                closestHandle = $(this.handles[index]);
            }

            allowed = this._start(event, index);
            if (allowed === false) {
                return false;
            }
            this._mouseSliding = true;

            self._handleIndex = index;

            closestHandle
                .addClass("ui-state-active")
                .focus();

            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().andSelf().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? { left:0, top:0 } : {
                left:event.pageX - offset.left - ( closestHandle.width() / 2 ),
                top:event.pageY - offset.top -
                    ( closestHandle.height() / 2 ) -
                    ( parseInt(closestHandle.css("borderTopWidth"), 10) || 0 ) -
                    ( parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) +
                    ( parseInt(closestHandle.css("marginTop"), 10) || 0)
            };

            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue);
            }
            this._animateOff = true;
            return true;
        },

        _mouseStart:function (event) {
            return true;
        },

        _mouseDrag:function (event) {
            var position = { x:event.pageX, y:event.pageY },
                normValue = this._normValueFromMouse(position);

            this._slide(event, this._handleIndex, normValue);

            return false;
        },

        _mouseStop:function (event) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;

            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);

            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;

            return false;
        },

        _detectOrientation:function () {
            this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
        },

        _normValueFromMouse:function (position) {
            var pixelTotal,
                pixelMouse,
                percentMouse,
                valueTotal,
                valueMouse;

            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
            }

            percentMouse = ( pixelMouse / pixelTotal );
            if (percentMouse > 1) {
                percentMouse = 1;
            }
            if (percentMouse < 0) {
                percentMouse = 0;
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse;
            }

            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;

            return this._trimAlignValue(valueMouse);
        },

        _start:function (event, index) {
            var uiHash = {
                handle:this.handles[ index ],
                value:this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger("start", event, uiHash);
        },

        _slide:function (event, index, newVal) {
            var otherVal,
                newValues,
                allowed;

            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);

                if (( this.options.values.length === 2 && this.options.range === true ) &&
                    ( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
                    ) {
                    newVal = otherVal;
                }

                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[ index ] = newVal;
                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger("slide", event, {
                        handle:this.handles[ index ],
                        value:newVal,
                        values:newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    if (allowed !== false) {
                        this.values(index, newVal, true);
                    }
                }
            } else {
                if (newVal !== this.value()) {
                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger("slide", event, {
                        handle:this.handles[ index ],
                        value:newVal
                    });
                    if (allowed !== false) {
                        this.value(newVal);
                    }
                }
            }
        },

        _stop:function (event, index) {
            var uiHash = {
                handle:this.handles[ index ],
                value:this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }

            this._trigger("stop", event, uiHash);
        },

        _change:function (event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle:this.handles[ index ],
                    value:this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }

                this._trigger("change", event, uiHash);
            }
        },

        value:function (newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return;
            }

            return this._value();
        },

        values:function (index, newValue) {
            var vals,
                newValues,
                i;

            if (arguments.length > 1) {
                this.options.values[ index ] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return;
            }

            if (arguments.length) {
                if ($.isArray(arguments[ 0 ])) {
                    vals = this.options.values;
                    newValues = arguments[ 0 ];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[ i ] = this._trimAlignValue(newValues[ i ]);
                        this._change(null, i);
                    }
                    this._refreshValue();
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(index);
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },

        _setOption:function (key, value) {
            var i,
                valsLength = 0;

            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length;
            }

            $.Widget.prototype._setOption.apply(this, arguments);

            switch (key) {
                case "disabled":
                    if (value) {
                        this.handles.filter(".ui-state-focus").blur();
                        this.handles.removeClass("ui-state-hover");
                        this.handles.propAttr("disabled", true);
                        this.element.addClass("ui-disabled");
                    } else {
                        this.handles.propAttr("disabled", false);
                        this.element.removeClass("ui-disabled");
                    }
                    break;
                case "orientation":
                    this._detectOrientation();
                    this.element
                        .removeClass("ui-slider-horizontal ui-slider-vertical")
                        .addClass("ui-slider-" + this.orientation);
                    this._refreshValue();
                    break;
                case "value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change(null, 0);
                    this._animateOff = false;
                    break;
                case "values":
                    this._animateOff = true;
                    this._refreshValue();
                    for (i = 0; i < valsLength; i += 1) {
                        this._change(null, i);
                    }
                    this._animateOff = false;
                    break;
            }
        },

        //internal value getter
        // _value() returns value trimmed by min and max, aligned by step
        _value:function () {
            var val = this.options.value;
            val = this._trimAlignValue(val);

            return val;
        },

        //internal values getter
        // _values() returns array of values trimmed by min and max, aligned by step
        // _values( index ) returns single value trimmed by min and max, aligned by step
        _values:function (index) {
            var val,
                vals,
                i;

            if (arguments.length) {
                val = this.options.values[ index ];
                val = this._trimAlignValue(val);

                return val;
            } else {
                // .slice() creates a copy of the array
                // this copy gets trimmed by min and max and then returned
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[ i ] = this._trimAlignValue(vals[ i ]);
                }

                return vals;
            }
        },

        // returns the step-aligned value that val is closest to, between (inclusive) min and max
        _trimAlignValue:function (val) {
            if (val <= this._valueMin()) {
                return this._valueMin();
            }
            if (val >= this._valueMax()) {
                return this._valueMax();
            }
            var step = ( this.options.step > 0 ) ? this.options.step : 1,
                valModStep = (val - this._valueMin()) % step,
                alignValue = val - valModStep;

            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += ( valModStep > 0 ) ? step : ( -step );
            }

            // Since JavaScript has problems with large floats, round
            // the final value to 5 digits after the decimal point (see #4124)
            return parseFloat(alignValue.toFixed(5));
        },

        _valueMin:function () {
            return this.options.min;
        },

        _valueMax:function () {
            return this.options.max;
        },

        _refreshValue:function () {
            var oRange = this.options.range,
                o = this.options,
                self = this,
                animate = ( !this._animateOff ) ? o.animate : false,
                valPercent,
                _set = {},
                lastValPercent,
                value,
                valueMin,
                valueMax;

            if (this.options.values && this.options.values.length) {
                this.handles.each(function (i, j) {
                    valPercent = ( self.values(i) - self._valueMin() ) / ( self._valueMax() - self._valueMin() ) * 100;
                    _set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
                    $(this).stop(1, 1)[ animate ? "animate" : "css" ](_set, o.animate);
                    if (self.options.range === true) {
                        if (self.orientation === "horizontal") {
                            if (i === 0) {
                                self.range.stop(1, 1)[ animate ? "animate" : "css" ]({ left:valPercent + "%" }, o.animate);
                            }
                            if (i === 1) {
                                self.range[ animate ? "animate" : "css" ]({ width:( valPercent - lastValPercent ) + "%" }, { queue:false, duration:o.animate });
                            }
                        } else {
                            if (i === 0) {
                                self.range.stop(1, 1)[ animate ? "animate" : "css" ]({ bottom:( valPercent ) + "%" }, o.animate);
                            }
                            if (i === 1) {
                                self.range[ animate ? "animate" : "css" ]({ height:( valPercent - lastValPercent ) + "%" }, { queue:false, duration:o.animate });
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = ( valueMax !== valueMin ) ?
                    ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
                    0;
                _set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
                this.handle.stop(1, 1)[ animate ? "animate" : "css" ](_set, o.animate);

                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[ animate ? "animate" : "css" ]({ width:valPercent + "%" }, o.animate);
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range[ animate ? "animate" : "css" ]({ width:( 100 - valPercent ) + "%" }, { queue:false, duration:o.animate });
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[ animate ? "animate" : "css" ]({ height:valPercent + "%" }, o.animate);
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range[ animate ? "animate" : "css" ]({ height:( 100 - valPercent ) + "%" }, { queue:false, duration:o.animate });
                }
            }
        }

    });

    $.extend($.ui.slider, {
        version:"1.8.18"
    });

}(jQuery));
/*
 * jQuery UI Tabs 1.8.18
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Tabs
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function ($, undefined) {

    var tabId = 0,
        listId = 0;

    function getNextTabId() {
        return ++tabId;
    }

    function getNextListId() {
        return ++listId;
    }

    $.widget("ui.tabs", {
        options:{
            add:null,
            ajaxOptions:null,
            cache:false,
            cookie:null, // e.g. { expires: 7, path: '/', domain: 'jquery.com', secure: true }
            collapsible:false,
            disable:null,
            disabled:[],
            enable:null,
            event:"click",
            fx:null, // e.g. { height: 'toggle', opacity: 'toggle', duration: 200 }
            idPrefix:"ui-tabs-",
            load:null,
            panelTemplate:"<div></div>",
            remove:null,
            select:null,
            show:null,
            spinner:"<em>Loading&#8230;</em>",
            tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"
        },

        _create:function () {
            this._tabify(true);
        },

        _setOption:function (key, value) {
            if (key == "selected") {
                if (this.options.collapsible && value == this.options.selected) {
                    return;
                }
                this.select(value);
            } else {
                this.options[ key ] = value;
                this._tabify();
            }
        },

        _tabId:function (a) {
            return a.title && a.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF-]/g, "") ||
                this.options.idPrefix + getNextTabId();
        },

        _sanitizeSelector:function (hash) {
            // we need this because an id may contain a ":"
            return hash.replace(/:/g, "\\:");
        },

        _cookie:function () {
            var cookie = this.cookie ||
                ( this.cookie = this.options.cookie.name || "ui-tabs-" + getNextListId() );
            return $.cookie.apply(null, [ cookie ].concat($.makeArray(arguments)));
        },

        _ui:function (tab, panel) {
            return {
                tab:tab,
                panel:panel,
                index:this.anchors.index(tab)
            };
        },

        _cleanup:function () {
            // restore all former loading tabs labels
            this.lis.filter(".ui-state-processing")
                .removeClass("ui-state-processing")
                .find("span:data(label.tabs)")
                .each(function () {
                    var el = $(this);
                    el.html(el.data("label.tabs")).removeData("label.tabs");
                });
        },

        _tabify:function (init) {
            var self = this,
                o = this.options,
                fragmentId = /^#.+/; // Safari 2 reports '#' for an empty hash

            this.list = this.element.find("ol,ul").eq(0);
            this.lis = $(" > li:has(a[href])", this.list);
            this.anchors = this.lis.map(function () {
                return $("a", this)[ 0 ];
            });
            this.panels = $([]);

            this.anchors.each(function (i, a) {
                var href = $(a).attr("href");
                // For dynamically created HTML that contains a hash as href IE < 8 expands
                // such href to the full page url with hash and then misinterprets tab as ajax.
                // Same consideration applies for an added tab with a fragment identifier
                // since a[href=#fragment-identifier] does unexpectedly not match.
                // Thus normalize href attribute...
                var hrefBase = href.split("#")[ 0 ],
                    baseEl;
                if (hrefBase && ( hrefBase === location.toString().split("#")[ 0 ] ||
                    ( baseEl = $("base")[ 0 ]) && hrefBase === baseEl.href )) {
                    href = a.hash;
                    a.href = href;
                }

                // inline tab
                if (fragmentId.test(href)) {
                    self.panels = self.panels.add(self.element.find(self._sanitizeSelector(href)));
                    // remote tab
                    // prevent loading the page itself if href is just "#"
                } else if (href && href !== "#") {
                    // required for restore on destroy
                    $.data(a, "href.tabs", href);

                    // TODO until #3808 is fixed strip fragment identifier from url
                    // (IE fails to load from such url)
                    $.data(a, "load.tabs", href.replace(/#.*$/, ""));

                    var id = self._tabId(a);
                    a.href = "#" + id;
                    var $panel = self.element.find("#" + id);
                    if (!$panel.length) {
                        $panel = $(o.panelTemplate)
                            .attr("id", id)
                            .addClass("ui-tabs-panel ui-widget-content ui-corner-bottom")
                            .insertAfter(self.panels[ i - 1 ] || self.list);
                        $panel.data("destroy.tabs", true);
                    }
                    self.panels = self.panels.add($panel);
                    // invalid tab href
                } else {
                    o.disabled.push(i);
                }
            });

            // initialization from scratch
            if (init) {
                // attach necessary classes for styling
                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
                this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
                this.lis.addClass("ui-state-default ui-corner-top");
                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");

                // Selected tab
                // use "selected" option or try to retrieve:
                // 1. from fragment identifier in url
                // 2. from cookie
                // 3. from selected class attribute on <li>
                if (o.selected === undefined) {
                    if (location.hash) {
                        this.anchors.each(function (i, a) {
                            if (a.hash == location.hash) {
                                o.selected = i;
                                return false;
                            }
                        });
                    }
                    if (typeof o.selected !== "number" && o.cookie) {
                        o.selected = parseInt(self._cookie(), 10);
                    }
                    if (typeof o.selected !== "number" && this.lis.filter(".ui-tabs-selected").length) {
                        o.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"));
                    }
                    o.selected = o.selected || ( this.lis.length ? 0 : -1 );
                } else if (o.selected === null) { // usage of null is deprecated, TODO remove in next release
                    o.selected = -1;
                }

                // sanity check - default to first tab...
                o.selected = ( ( o.selected >= 0 && this.anchors[ o.selected ] ) || o.selected < 0 )
                    ? o.selected
                    : 0;

                // Take disabling tabs via class attribute from HTML
                // into account and update option properly.
                // A selected tab cannot become disabled.
                o.disabled = $.unique(o.disabled.concat(
                    $.map(this.lis.filter(".ui-state-disabled"), function (n, i) {
                        return self.lis.index(n);
                    })
                )).sort();

                if ($.inArray(o.selected, o.disabled) != -1) {
                    o.disabled.splice($.inArray(o.selected, o.disabled), 1);
                }

                // highlight selected tab
                this.panels.addClass("ui-tabs-hide");
                this.lis.removeClass("ui-tabs-selected ui-state-active");
                // check for length avoids error when initializing empty list
                if (o.selected >= 0 && this.anchors.length) {
                    self.element.find(self._sanitizeSelector(self.anchors[ o.selected ].hash)).removeClass("ui-tabs-hide");
                    this.lis.eq(o.selected).addClass("ui-tabs-selected ui-state-active");

                    // seems to be expected behavior that the show callback is fired
                    self.element.queue("tabs", function () {
                        self._trigger("show", null,
                            self._ui(self.anchors[ o.selected ], self.element.find(self._sanitizeSelector(self.anchors[ o.selected ].hash))[ 0 ]));
                    });

                    this.load(o.selected);
                }

                // clean up to avoid memory leaks in certain versions of IE 6
                // TODO: namespace this event
                $(window).bind("unload", function () {
                    self.lis.add(self.anchors).unbind(".tabs");
                    self.lis = self.anchors = self.panels = null;
                });
                // update selected after add/remove
            } else {
                o.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"));
            }

            // update collapsible
            // TODO: use .toggleClass()
            this.element[ o.collapsible ? "addClass" : "removeClass" ]("ui-tabs-collapsible");

            // set or update cookie after init and add/remove respectively
            if (o.cookie) {
                this._cookie(o.selected, o.cookie);
            }

            // disable tabs
            for (var i = 0, li; ( li = this.lis[ i ] ); i++) {
                $(li)[ $.inArray(i, o.disabled) != -1 &&
                    // TODO: use .toggleClass()
                    !$(li).hasClass("ui-tabs-selected") ? "addClass" : "removeClass" ]("ui-state-disabled");
            }

            // reset cache if switching from cached to not cached
            if (o.cache === false) {
                this.anchors.removeData("cache.tabs");
            }

            // remove all handlers before, tabify may run on existing tabs after add or option change
            this.lis.add(this.anchors).unbind(".tabs");

            if (o.event !== "mouseover") {
                var addState = function (state, el) {
                    if (el.is(":not(.ui-state-disabled)")) {
                        el.addClass("ui-state-" + state);
                    }
                };
                var removeState = function (state, el) {
                    el.removeClass("ui-state-" + state);
                };
                this.lis.bind("mouseover.tabs", function () {
                    addState("hover", $(this));
                });
                this.lis.bind("mouseout.tabs", function () {
                    removeState("hover", $(this));
                });
                this.anchors.bind("focus.tabs", function () {
                    addState("focus", $(this).closest("li"));
                });
                this.anchors.bind("blur.tabs", function () {
                    removeState("focus", $(this).closest("li"));
                });
            }

            // set up animations
            var hideFx, showFx;
            if (o.fx) {
                if ($.isArray(o.fx)) {
                    hideFx = o.fx[ 0 ];
                    showFx = o.fx[ 1 ];
                } else {
                    hideFx = showFx = o.fx;
                }
            }

            // Reset certain styles left over from animation
            // and prevent IE's ClearType bug...
            function resetStyle($el, fx) {
                $el.css("display", "");
                if (!$.support.opacity && fx.opacity) {
                    $el[ 0 ].style.removeAttribute("filter");
                }
            }

            // Show a tab...
            var showTab = showFx
                ? function (clicked, $show) {
                $(clicked).closest("li").addClass("ui-tabs-selected ui-state-active");
                $show.hide().removeClass("ui-tabs-hide")// avoid flicker that way
                    .animate(showFx, showFx.duration || "normal", function () {
                        resetStyle($show, showFx);
                        self._trigger("show", null, self._ui(clicked, $show[ 0 ]));
                    });
            }
                : function (clicked, $show) {
                $(clicked).closest("li").addClass("ui-tabs-selected ui-state-active");
                $show.removeClass("ui-tabs-hide");
                self._trigger("show", null, self._ui(clicked, $show[ 0 ]));
            };

            // Hide a tab, $show is optional...
            var hideTab = hideFx
                ? function (clicked, $hide) {
                $hide.animate(hideFx, hideFx.duration || "normal", function () {
                    self.lis.removeClass("ui-tabs-selected ui-state-active");
                    $hide.addClass("ui-tabs-hide");
                    resetStyle($hide, hideFx);
                    self.element.dequeue("tabs");
                });
            }
                : function (clicked, $hide, $show) {
                self.lis.removeClass("ui-tabs-selected ui-state-active");
                $hide.addClass("ui-tabs-hide");
                self.element.dequeue("tabs");
            };

            // attach tab event handler, unbind to avoid duplicates from former tabifying...
            this.anchors.bind(o.event + ".tabs", function () {
                var el = this,
                    $li = $(el).closest("li"),
                    $hide = self.panels.filter(":not(.ui-tabs-hide)"),
                    $show = self.element.find(self._sanitizeSelector(el.hash));

                // If tab is already selected and not collapsible or tab disabled or
                // or is already loading or click callback returns false stop here.
                // Check if click handler returns false last so that it is not executed
                // for a disabled or loading tab!
                if (( $li.hasClass("ui-tabs-selected") && !o.collapsible) ||
                    $li.hasClass("ui-state-disabled") ||
                    $li.hasClass("ui-state-processing") ||
                    self.panels.filter(":animated").length ||
                    self._trigger("select", null, self._ui(this, $show[ 0 ])) === false) {
                    this.blur();
                    return false;
                }

                o.selected = self.anchors.index(this);

                self.abort();

                // if tab may be closed
                if (o.collapsible) {
                    if ($li.hasClass("ui-tabs-selected")) {
                        o.selected = -1;

                        if (o.cookie) {
                            self._cookie(o.selected, o.cookie);
                        }

                        self.element.queue("tabs",function () {
                            hideTab(el, $hide);
                        }).dequeue("tabs");

                        this.blur();
                        return false;
                    } else if (!$hide.length) {
                        if (o.cookie) {
                            self._cookie(o.selected, o.cookie);
                        }

                        self.element.queue("tabs", function () {
                            showTab(el, $show);
                        });

                        // TODO make passing in node possible, see also http://dev.jqueryui.com/ticket/3171
                        self.load(self.anchors.index(this));

                        this.blur();
                        return false;
                    }
                }

                if (o.cookie) {
                    self._cookie(o.selected, o.cookie);
                }

                // show new tab
                if ($show.length) {
                    if ($hide.length) {
                        self.element.queue("tabs", function () {
                            hideTab(el, $hide);
                        });
                    }
                    self.element.queue("tabs", function () {
                        showTab(el, $show);
                    });

                    self.load(self.anchors.index(this));
                } else {
                    throw "jQuery UI Tabs: Mismatching fragment identifier.";
                }

                // Prevent IE from keeping other link focussed when using the back button
                // and remove dotted border from clicked link. This is controlled via CSS
                // in modern browsers; blur() removes focus from address bar in Firefox
                // which can become a usability and annoying problem with tabs('rotate').
                if ($.browser.msie) {
                    this.blur();
                }
            });

            // disable click in any case
            this.anchors.bind("click.tabs", function () {
                return false;
            });
        },

        _getIndex:function (index) {
            // meta-function to give users option to provide a href string instead of a numerical index.
            // also sanitizes numerical indexes to valid values.
            if (typeof index == "string") {
                index = this.anchors.index(this.anchors.filter("[href$=" + index + "]"));
            }

            return index;
        },

        destroy:function () {
            var o = this.options;

            this.abort();

            this.element
                .unbind(".tabs")
                .removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible")
                .removeData("tabs");

            this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");

            this.anchors.each(function () {
                var href = $.data(this, "href.tabs");
                if (href) {
                    this.href = href;
                }
                var $this = $(this).unbind(".tabs");
                $.each([ "href", "load", "cache" ], function (i, prefix) {
                    $this.removeData(prefix + ".tabs");
                });
            });

            this.lis.unbind(".tabs").add(this.panels).each(function () {
                if ($.data(this, "destroy.tabs")) {
                    $(this).remove();
                } else {
                    $(this).removeClass([
                        "ui-state-default",
                        "ui-corner-top",
                        "ui-tabs-selected",
                        "ui-state-active",
                        "ui-state-hover",
                        "ui-state-focus",
                        "ui-state-disabled",
                        "ui-tabs-panel",
                        "ui-widget-content",
                        "ui-corner-bottom",
                        "ui-tabs-hide"
                    ].join(" "));
                }
            });

            if (o.cookie) {
                this._cookie(null, o.cookie);
            }

            return this;
        },

        add:function (url, label, index) {
            if (index === undefined) {
                index = this.anchors.length;
            }

            var self = this,
                o = this.options,
                $li = $(o.tabTemplate.replace(/#\{href\}/g, url).replace(/#\{label\}/g, label)),
                id = !url.indexOf("#") ? url.replace("#", "") : this._tabId($("a", $li)[ 0 ]);

            $li.addClass("ui-state-default ui-corner-top").data("destroy.tabs", true);

            // try to find an existing element before creating a new one
            var $panel = self.element.find("#" + id);
            if (!$panel.length) {
                $panel = $(o.panelTemplate)
                    .attr("id", id)
                    .data("destroy.tabs", true);
            }
            $panel.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");

            if (index >= this.lis.length) {
                $li.appendTo(this.list);
                $panel.appendTo(this.list[ 0 ].parentNode);
            } else {
                $li.insertBefore(this.lis[ index ]);
                $panel.insertBefore(this.panels[ index ]);
            }

            o.disabled = $.map(o.disabled, function (n, i) {
                return n >= index ? ++n : n;
            });

            this._tabify();

            if (this.anchors.length == 1) {
                o.selected = 0;
                $li.addClass("ui-tabs-selected ui-state-active");
                $panel.removeClass("ui-tabs-hide");
                this.element.queue("tabs", function () {
                    self._trigger("show", null, self._ui(self.anchors[ 0 ], self.panels[ 0 ]));
                });

                this.load(0);
            }

            this._trigger("add", null, this._ui(this.anchors[ index ], this.panels[ index ]));
            return this;
        },

        remove:function (index) {
            index = this._getIndex(index);
            var o = this.options,
                $li = this.lis.eq(index).remove(),
                $panel = this.panels.eq(index).remove();

            // If selected tab was removed focus tab to the right or
            // in case the last tab was removed the tab to the left.
            if ($li.hasClass("ui-tabs-selected") && this.anchors.length > 1) {
                this.select(index + ( index + 1 < this.anchors.length ? 1 : -1 ));
            }

            o.disabled = $.map(
                $.grep(o.disabled, function (n, i) {
                    return n != index;
                }),
                function (n, i) {
                    return n >= index ? --n : n;
                });

            this._tabify();

            this._trigger("remove", null, this._ui($li.find("a")[ 0 ], $panel[ 0 ]));
            return this;
        },

        enable:function (index) {
            index = this._getIndex(index);
            var o = this.options;
            if ($.inArray(index, o.disabled) == -1) {
                return;
            }

            this.lis.eq(index).removeClass("ui-state-disabled");
            o.disabled = $.grep(o.disabled, function (n, i) {
                return n != index;
            });

            this._trigger("enable", null, this._ui(this.anchors[ index ], this.panels[ index ]));
            return this;
        },

        disable:function (index) {
            index = this._getIndex(index);
            var self = this, o = this.options;
            // cannot disable already selected tab
            if (index != o.selected) {
                this.lis.eq(index).addClass("ui-state-disabled");

                o.disabled.push(index);
                o.disabled.sort();

                this._trigger("disable", null, this._ui(this.anchors[ index ], this.panels[ index ]));
            }

            return this;
        },

        select:function (index) {
            index = this._getIndex(index);
            if (index == -1) {
                if (this.options.collapsible && this.options.selected != -1) {
                    index = this.options.selected;
                } else {
                    return this;
                }
            }
            this.anchors.eq(index).trigger(this.options.event + ".tabs");
            return this;
        },

        load:function (index) {
            index = this._getIndex(index);
            var self = this,
                o = this.options,
                a = this.anchors.eq(index)[ 0 ],
                url = $.data(a, "load.tabs");

            this.abort();

            // not remote or from cache
            if (!url || this.element.queue("tabs").length !== 0 && $.data(a, "cache.tabs")) {
                this.element.dequeue("tabs");
                return;
            }

            // load remote from here on
            this.lis.eq(index).addClass("ui-state-processing");

            if (o.spinner) {
                var span = $("span", a);
                span.data("label.tabs", span.html()).html(o.spinner);
            }

            this.xhr = $.ajax($.extend({}, o.ajaxOptions, {
                url:url,
                success:function (r, s) {
                    self.element.find(self._sanitizeSelector(a.hash)).html(r);

                    // take care of tab labels
                    self._cleanup();

                    if (o.cache) {
                        $.data(a, "cache.tabs", true);
                    }

                    self._trigger("load", null, self._ui(self.anchors[ index ], self.panels[ index ]));
                    try {
                        o.ajaxOptions.success(r, s);
                    }
                    catch (e) {
                    }
                },
                error:function (xhr, s, e) {
                    // take care of tab labels
                    self._cleanup();

                    self._trigger("load", null, self._ui(self.anchors[ index ], self.panels[ index ]));
                    try {
                        // Passing index avoid a race condition when this method is
                        // called after the user has selected another tab.
                        // Pass the anchor that initiated this request allows
                        // loadError to manipulate the tab content panel via $(a.hash)
                        o.ajaxOptions.error(xhr, s, index, a);
                    }
                    catch (e) {
                    }
                }
            }));

            // last, so that load event is fired before show...
            self.element.dequeue("tabs");

            return this;
        },

        abort:function () {
            // stop possibly running animations
            this.element.queue([]);
            this.panels.stop(false, true);

            // "tabs" queue must not contain more than two elements,
            // which are the callbacks for the latest clicked tab...
            this.element.queue("tabs", this.element.queue("tabs").splice(-2, 2));

            // terminate pending requests from other tabs
            if (this.xhr) {
                this.xhr.abort();
                delete this.xhr;
            }

            // take care of tab labels
            this._cleanup();
            return this;
        },

        url:function (index, url) {
            this.anchors.eq(index).removeData("cache.tabs").data("load.tabs", url);
            return this;
        },

        length:function () {
            return this.anchors.length;
        }
    });

    $.extend($.ui.tabs, {
        version:"1.8.18"
    });

    /*
     * Tabs Extensions
     */

    /*
     * Rotate
     */
    $.extend($.ui.tabs.prototype, {
        rotation:null,
        rotate:function (ms, continuing) {
            var self = this,
                o = this.options;

            var rotate = self._rotate || ( self._rotate = function (e) {
                clearTimeout(self.rotation);
                self.rotation = setTimeout(function () {
                    var t = o.selected;
                    self.select(++t < self.anchors.length ? t : 0);
                }, ms);

                if (e) {
                    e.stopPropagation();
                }
            });

            var stop = self._unrotate || ( self._unrotate = !continuing
                ? function (e) {
                if (e.clientX) { // in case of a true click
                    self.rotate(null);
                }
            }
                : function (e) {
                t = o.selected;
                rotate();
            });

            // start rotation
            if (ms) {
                this.element.bind("tabsshow", rotate);
                this.anchors.bind(o.event + ".tabs", stop);
                rotate();
                // stop rotation
            } else {
                clearTimeout(self.rotation);
                this.element.unbind("tabsshow", rotate);
                this.anchors.unbind(o.event + ".tabs", stop);
                delete this._rotate;
                delete this._unrotate;
            }

            return this;
        }
    });

})(jQuery);
/**
 * jQuery Cookie plugin
 *
 * Copyright (c) 2010 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

jQuery.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = jQuery.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) {
        return s;
    } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};
/*
 * jQuery Plugin: Tokenizing Autocomplete Text Entry
 * Version 1.6.0
 *
 * Copyright (c) 2009 James Smith (http://loopj.com)
 * Licensed jointly under the GPL and MIT licenses,
 * choose which one suits your project best!
 *
 */


(function ($) {
// Default settings
    var DEFAULT_SETTINGS = {
        // Search settings
        method:"GET",
        contentType:"json",
        queryParam:"q",
        searchDelay:300,
        minChars:1,
        propertyToSearch:"name",
        jsonContainer:null,

        // Display settings
        hintText:"Type in a search term",
        noResultsText:"No results",
        searchingText:"Searching...",
        deleteText:"&times;",
        animateDropdown:true,

        // Tokenization settings
        tokenLimit:null,
        tokenDelimiter:",",
        preventDuplicates:false,

        // Output settings
        tokenValue:"id",

        // Prepopulation settings
        prePopulate:null,
        processPrePopulate:false,

        // Manipulation settings
        idPrefix:"token-input-",

        // Formatters
        resultsFormatter:function (item) {
            return "<li>" + item[this.propertyToSearch] + "</li>"
        },
        tokenFormatter:function (item) {
            return "<li><p>" + item[this.propertyToSearch] + "</p></li>"
        },

        // Callbacks
        onResult:null,
        onAdd:null,
        onDelete:null,
        onReady:null
    };

// Default classes to use when theming
    var DEFAULT_CLASSES = {
        tokenList:"token-input-list",
        token:"token-input-token",
        tokenDelete:"token-input-delete-token",
        selectedToken:"token-input-selected-token",
        highlightedToken:"token-input-highlighted-token",
        dropdown:"token-input-dropdown",
        dropdownItem:"token-input-dropdown-item",
        dropdownItem2:"token-input-dropdown-item2",
        selectedDropdownItem:"token-input-selected-dropdown-item",
        inputToken:"token-input-input-token"
    };

// Input box position "enum"
    var POSITION = {
        BEFORE:0,
        AFTER:1,
        END:2
    };

// Keys "enum"
    var KEY = {
        BACKSPACE:8,
        TAB:9,
        ENTER:13,
        ESCAPE:27,
        SPACE:32,
        PAGE_UP:33,
        PAGE_DOWN:34,
        END:35,
        HOME:36,
        LEFT:37,
        UP:38,
        RIGHT:39,
        DOWN:40,
        NUMPAD_ENTER:108,
        COMMA:188
    };

// Additional public (exposed) methods
    var methods = {
        init:function (url_or_data_or_function, options) {
            var settings = $.extend({}, DEFAULT_SETTINGS, options || {});

            return this.each(function () {
                $(this).data("tokenInputObject", new $.TokenList(this, url_or_data_or_function, settings));
            });
        },
        clear:function () {
            this.data("tokenInputObject").clear();
            return this;
        },
        add:function (item) {
            this.data("tokenInputObject").add(item);
            return this;
        },
        remove:function (item) {
            this.data("tokenInputObject").remove(item);
            return this;
        },
        get:function () {
            return this.data("tokenInputObject").getTokens();
        }
    }

// Expose the .tokenInput function to jQuery as a plugin
    $.fn.tokenInput = function (method) {
        // Method calling and initialization logic
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else {
            return methods.init.apply(this, arguments);
        }
    };

// TokenList class for each input
    $.TokenList = function (input, url_or_data, settings) {
        //
        // Initialization
        //

        // Configure the data source
        if ($.type(url_or_data) === "string" || $.type(url_or_data) === "function") {
            // Set the url to query against
            settings.url = url_or_data;

            // If the URL is a function, evaluate it here to do our initalization work
            var url = computeURL();

            // Make a smart guess about cross-domain if it wasn't explicitly specified
            if (settings.crossDomain === undefined) {
                if (url.indexOf("://") === -1) {
                    settings.crossDomain = false;
                } else {
                    settings.crossDomain = (location.href.split(/\/+/g)[1] !== url.split(/\/+/g)[1]);
                }
            }
        } else if (typeof(url_or_data) === "object") {
            // Set the local data to search through
            settings.local_data = url_or_data;
        }

        // Build class names
        if (settings.classes) {
            // Use custom class names
            settings.classes = $.extend({}, DEFAULT_CLASSES, settings.classes);
        } else if (settings.theme) {
            // Use theme-suffixed default class names
            settings.classes = {};
            $.each(DEFAULT_CLASSES, function (key, value) {
                settings.classes[key] = value + "-" + settings.theme;
            });
        } else {
            settings.classes = DEFAULT_CLASSES;
        }


        // Save the tokens
        var saved_tokens = [];

        // Keep track of the number of tokens in the list
        var token_count = 0;

        // Basic cache to save on db hits
        var cache = new $.TokenList.Cache();

        // Keep track of the timeout, old vals
        var timeout;
        var input_val;

        // Create a new text input an attach keyup events
        var input_box = $("<input type=\"text\"  autocomplete=\"off\">")
            .css({
                outline:"none"
            })
            .attr("id", settings.idPrefix + input.id)
            .focus(function () {
                if (settings.tokenLimit === null || settings.tokenLimit !== token_count) {
                    show_dropdown_hint();
                }
            })
            .blur(function () {
                hide_dropdown();
                $(this).val("");
            })
            .bind("keyup keydown blur update", resize_input)
            .keydown(function (event) {
                var previous_token;
                var next_token;

                switch (event.keyCode) {
                    case KEY.LEFT:
                    case KEY.RIGHT:
                    case KEY.UP:
                    case KEY.DOWN:
                        if (!$(this).val()) {
                            previous_token = input_token.prev();
                            next_token = input_token.next();

                            if ((previous_token.length && previous_token.get(0) === selected_token) || (next_token.length && next_token.get(0) === selected_token)) {
                                // Check if there is a previous/next token and it is selected
                                if (event.keyCode === KEY.LEFT || event.keyCode === KEY.UP) {
                                    deselect_token($(selected_token), POSITION.BEFORE);
                                } else {
                                    deselect_token($(selected_token), POSITION.AFTER);
                                }
                            } else if ((event.keyCode === KEY.LEFT || event.keyCode === KEY.UP) && previous_token.length) {
                                // We are moving left, select the previous token if it exists
                                select_token($(previous_token.get(0)));
                            } else if ((event.keyCode === KEY.RIGHT || event.keyCode === KEY.DOWN) && next_token.length) {
                                // We are moving right, select the next token if it exists
                                select_token($(next_token.get(0)));
                            }
                        } else {
                            var dropdown_item = null;

                            if (event.keyCode === KEY.DOWN || event.keyCode === KEY.RIGHT) {
                                dropdown_item = $(selected_dropdown_item).next();
                            } else {
                                dropdown_item = $(selected_dropdown_item).prev();
                            }

                            if (dropdown_item.length) {
                                select_dropdown_item(dropdown_item);
                            }
                            return false;
                        }
                        break;

                    case KEY.BACKSPACE:
                        previous_token = input_token.prev();

                        if (!$(this).val().length) {
                            if (selected_token) {
                                delete_token($(selected_token));
                                hidden_input.change();
                            } else if (previous_token.length) {
                                select_token($(previous_token.get(0)));
                            }

                            return false;
                        } else if ($(this).val().length === 1) {
                            hide_dropdown();
                        } else {
                            // set a timeout just long enough to let this function finish.
                            setTimeout(function () {
                                do_search();
                            }, 5);
                        }
                        break;

                    case KEY.TAB:
                    case KEY.ENTER:
                    case KEY.NUMPAD_ENTER:
                    case KEY.COMMA:
                        if (selected_dropdown_item) {
                            add_token($(selected_dropdown_item).data("tokeninput"));
                            hidden_input.change();
                            return false;
                        }
                        break;

                    case KEY.ESCAPE:
                        hide_dropdown();
                        return true;

                    default:
                        if (String.fromCharCode(event.which)) {
                            // set a timeout just long enough to let this function finish.
                            setTimeout(function () {
                                do_search();
                            }, 5);
                        }
                        break;
                }
            });

        // Keep a reference to the original input box
        var hidden_input = $(input)
            .hide()
            .val("")
            .focus(function () {
                input_box.focus();
            })
            .blur(function () {
                input_box.blur();
            });

        // Keep a reference to the selected token and dropdown item
        var selected_token = null;
        var selected_token_index = 0;
        var selected_dropdown_item = null;

        // The list to store the token items in
        var token_list = $("<ul />")
            .addClass(settings.classes.tokenList)
            .click(function (event) {
                var li = $(event.target).closest("li");
                if (li && li.get(0) && $.data(li.get(0), "tokeninput")) {
                    toggle_select_token(li);
                } else {
                    // Deselect selected token
                    if (selected_token) {
                        deselect_token($(selected_token), POSITION.END);
                    }

                    // Focus input box
                    input_box.focus();
                }
            })
            .mouseover(function (event) {
                var li = $(event.target).closest("li");
                if (li && selected_token !== this) {
                    li.addClass(settings.classes.highlightedToken);
                }
            })
            .mouseout(function (event) {
                var li = $(event.target).closest("li");
                if (li && selected_token !== this) {
                    li.removeClass(settings.classes.highlightedToken);
                }
            })
            .insertBefore(hidden_input);

        // The token holding the input box
        var input_token = $("<li />")
            .addClass(settings.classes.inputToken)
            .appendTo(token_list)
            .append(input_box);

        // The list to store the dropdown items in
        var dropdown = $("<div>")
            .addClass(settings.classes.dropdown)
            .appendTo("body")
            .hide();

        // Magic element to help us resize the text input
        var input_resizer = $("<tester/>")
            .insertAfter(input_box)
            .css({
                position:"absolute",
                top:-9999,
                left:-9999,
                width:"auto",
                fontSize:input_box.css("fontSize"),
                fontFamily:input_box.css("fontFamily"),
                fontWeight:input_box.css("fontWeight"),
                letterSpacing:input_box.css("letterSpacing"),
                whiteSpace:"nowrap"
            });

        // Pre-populate list if items exist
        hidden_input.val("");
        var li_data = settings.prePopulate || hidden_input.data("pre");
        if (settings.processPrePopulate && $.isFunction(settings.onResult)) {
            li_data = settings.onResult.call(hidden_input, li_data);
        }
        if (li_data && li_data.length) {
            $.each(li_data, function (index, value) {
                insert_token(value);
                checkTokenLimit();
            });
        }

        // Initialization is done
        if ($.isFunction(settings.onReady)) {
            settings.onReady.call();
        }

        //
        // Public functions
        //

        this.clear = function () {
            token_list.children("li").each(function () {
                if ($(this).children("input").length === 0) {
                    delete_token($(this));
                }
            });
        }

        this.add = function (item) {
            add_token(item);
        }

        this.remove = function (item) {
            token_list.children("li").each(function () {
                if ($(this).children("input").length === 0) {
                    var currToken = $(this).data("tokeninput");
                    var match = true;
                    for (var prop in item) {
                        if (item[prop] !== currToken[prop]) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        delete_token($(this));
                    }
                }
            });
        }

        this.getTokens = function () {
            return saved_tokens;
        }

        //
        // Private functions
        //

        function checkTokenLimit() {
            if (settings.tokenLimit !== null && token_count >= settings.tokenLimit) {
                input_box.hide();
                hide_dropdown();
                return;
            }
        }

        function resize_input() {
            if (input_val === (input_val = input_box.val())) {
                return;
            }

            // Enter new content into resizer and resize input accordingly
            var escaped = input_val.replace(/&/g, '&amp;').replace(/\s/g, ' ').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            input_resizer.html(escaped);
            input_box.width(input_resizer.width() + 30);
        }

        function is_printable_character(keycode) {
            return ((keycode >= 48 && keycode <= 90) || // 0-1a-z
                (keycode >= 96 && keycode <= 111) || // numpad 0-9 + - / * .
                (keycode >= 186 && keycode <= 192) || // ; = , - . / ^
                (keycode >= 219 && keycode <= 222));    // ( \ ) '
        }

        // Inner function to a token to the list
        function insert_token(item) {
            var this_token = settings.tokenFormatter(item);
            this_token = $(this_token)
                .addClass(settings.classes.token)
                .insertBefore(input_token);

            // The 'delete token' button
            $("<span>" + settings.deleteText + "</span>")
                .addClass(settings.classes.tokenDelete)
                .appendTo(this_token)
                .click(function () {
                    delete_token($(this).parent());
                    hidden_input.change();
                    return false;
                });

            // Store data on the token
            var token_data = {"id":item.id};
            token_data[settings.propertyToSearch] = item[settings.propertyToSearch];
            $.data(this_token.get(0), "tokeninput", item);

            // Save this token for duplicate checking
            saved_tokens = saved_tokens.slice(0, selected_token_index).concat([token_data]).concat(saved_tokens.slice(selected_token_index));
            selected_token_index++;

            // Update the hidden input
            update_hidden_input(saved_tokens, hidden_input);

            token_count += 1;

            // Check the token limit
            if (settings.tokenLimit !== null && token_count >= settings.tokenLimit) {
                input_box.hide();
                hide_dropdown();
            }

            return this_token;
        }

        // Add a token to the token list based on user input
        function add_token(item) {
            var callback = settings.onAdd;

            // See if the token already exists and select it if we don't want duplicates
            if (token_count > 0 && settings.preventDuplicates) {
                var found_existing_token = null;
                token_list.children().each(function () {
                    var existing_token = $(this);
                    var existing_data = $.data(existing_token.get(0), "tokeninput");
                    if (existing_data && existing_data.id === item.id) {
                        found_existing_token = existing_token;
                        return false;
                    }
                });

                if (found_existing_token) {
                    select_token(found_existing_token);
                    input_token.insertAfter(found_existing_token);
                    input_box.focus();
                    return;
                }
            }

            // Insert the new tokens
            if (settings.tokenLimit == null || token_count < settings.tokenLimit) {
                insert_token(item);
                checkTokenLimit();
            }

            // Clear input box
            input_box.val("");

            // Don't show the help dropdown, they've got the idea
            hide_dropdown();

            // Execute the onAdd callback if defined
            if ($.isFunction(callback)) {
                callback.call(hidden_input, item);
            }
        }

        // Select a token in the token list
        function select_token(token) {
            token.addClass(settings.classes.selectedToken);
            selected_token = token.get(0);

            // Hide input box
            input_box.val("");

            // Hide dropdown if it is visible (eg if we clicked to select token)
            hide_dropdown();
        }

        // Deselect a token in the token list
        function deselect_token(token, position) {
            token.removeClass(settings.classes.selectedToken);
            selected_token = null;

            if (position === POSITION.BEFORE) {
                input_token.insertBefore(token);
                selected_token_index--;
            } else if (position === POSITION.AFTER) {
                input_token.insertAfter(token);
                selected_token_index++;
            } else {
                input_token.appendTo(token_list);
                selected_token_index = token_count;
            }

            // Show the input box and give it focus again
            input_box.focus();
        }

        // Toggle selection of a token in the token list
        function toggle_select_token(token) {
            var previous_selected_token = selected_token;

            if (selected_token) {
                deselect_token($(selected_token), POSITION.END);
            }

            if (previous_selected_token === token.get(0)) {
                deselect_token(token, POSITION.END);
            } else {
                select_token(token);
            }
        }

        // Delete a token from the token list
        function delete_token(token) {
            // Remove the id from the saved list
            var token_data = $.data(token.get(0), "tokeninput");
            var callback = settings.onDelete;

            var index = token.prevAll().length;
            if (index > selected_token_index) index--;

            // Delete the token
            token.remove();
            selected_token = null;

            // Show the input box and give it focus again
            input_box.focus();

            // Remove this token from the saved list
            saved_tokens = saved_tokens.slice(0, index).concat(saved_tokens.slice(index + 1));
            if (index < selected_token_index) selected_token_index--;

            // Update the hidden input
            update_hidden_input(saved_tokens, hidden_input);

            token_count -= 1;

            if (settings.tokenLimit !== null) {
                input_box
                    .show()
                    .val("")
                    .focus();
            }

            // Execute the onDelete callback if defined
            if ($.isFunction(callback)) {
                callback.call(hidden_input, token_data);
            }
        }

        // Update the hidden input box value
        function update_hidden_input(saved_tokens, hidden_input) {
            var token_values = $.map(saved_tokens, function (el) {
                return el[settings.tokenValue];
            });
            hidden_input.val(token_values.join(settings.tokenDelimiter));

        }

        // Hide and clear the results dropdown
        function hide_dropdown() {
            dropdown.hide().empty();
            selected_dropdown_item = null;
        }

        function show_dropdown() {
            dropdown
                .css({
                    position:"absolute",
                    top:$(token_list).offset().top + $(token_list).outerHeight(),
                    left:$(token_list).offset().left,
                    zindex:999
                })
                .show();
        }

        function show_dropdown_searching() {
            if (settings.searchingText) {
                dropdown.html("<p>" + settings.searchingText + "</p>");
                show_dropdown();
            }
        }

        function show_dropdown_hint() {
            if (settings.hintText) {
                dropdown.html("<p>" + settings.hintText + "</p>");
                show_dropdown();
            }
        }

        // Highlight the query part of the search term
        function highlight_term(value, term) {
            return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<b>$1</b>");
        }

        function find_value_and_highlight_term(template, value, term) {
            return template.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + value + ")(?![^<>]*>)(?![^&;]+;)", "g"), highlight_term(value, term));
        }

        // Populate the results dropdown with some results
        function populate_dropdown(query, results) {
            if (results && results.length) {
                dropdown.empty();
                var dropdown_ul = $("<ul>")
                    .appendTo(dropdown)
                    .mouseover(function (event) {
                        select_dropdown_item($(event.target).closest("li"));
                    })
                    .mousedown(function (event) {
                        add_token($(event.target).closest("li").data("tokeninput"));
                        hidden_input.change();
                        return false;
                    })
                    .hide();

                $.each(results, function (index, value) {
                    var this_li = settings.resultsFormatter(value);

                    this_li = find_value_and_highlight_term(this_li, value[settings.propertyToSearch], query);

                    this_li = $(this_li).appendTo(dropdown_ul);

                    if (index % 2) {
                        this_li.addClass(settings.classes.dropdownItem);
                    } else {
                        this_li.addClass(settings.classes.dropdownItem2);
                    }

                    if (index === 0) {
                        select_dropdown_item(this_li);
                    }

                    $.data(this_li.get(0), "tokeninput", value);
                });

                show_dropdown();

                if (settings.animateDropdown) {
                    dropdown_ul.slideDown("fast");
                } else {
                    dropdown_ul.show();
                }
            } else {
                if (settings.noResultsText) {
                    dropdown.html("<p>" + settings.noResultsText + "</p>");
                    show_dropdown();
                }
            }
        }

        // Highlight an item in the results dropdown
        function select_dropdown_item(item) {
            if (item) {
                if (selected_dropdown_item) {
                    deselect_dropdown_item($(selected_dropdown_item));
                }

                item.addClass(settings.classes.selectedDropdownItem);
                selected_dropdown_item = item.get(0);
            }
        }

        // Remove highlighting from an item in the results dropdown
        function deselect_dropdown_item(item) {
            item.removeClass(settings.classes.selectedDropdownItem);
            selected_dropdown_item = null;
        }

        // Do a search and show the "searching" dropdown if the input is longer
        // than settings.minChars
        function do_search() {
            var query = input_box.val().toLowerCase();

            if (query && query.length) {
                if (selected_token) {
                    deselect_token($(selected_token), POSITION.AFTER);
                }

                if (query.length >= settings.minChars) {
                    show_dropdown_searching();
                    clearTimeout(timeout);

                    timeout = setTimeout(function () {
                        run_search(query);
                    }, settings.searchDelay);
                } else {
                    hide_dropdown();
                }
            }
        }

        // Do the actual search
        function run_search(query) {
            var cache_key = query + computeURL();
            var cached_results = cache.get(cache_key);
            if (cached_results) {
                populate_dropdown(query, cached_results);
            } else {
                // Are we doing an ajax search or local data search?
                if (settings.url) {
                    var url = computeURL();
                    // Extract exisiting get params
                    var ajax_params = {};
                    ajax_params.data = {};
                    if (url.indexOf("?") > -1) {
                        var parts = url.split("?");
                        ajax_params.url = parts[0];

                        var param_array = parts[1].split("&");
                        $.each(param_array, function (index, value) {
                            var kv = value.split("=");
                            ajax_params.data[kv[0]] = kv[1];
                        });
                    } else {
                        ajax_params.url = url;
                    }

                    // Prepare the request
                    ajax_params.data[settings.queryParam] = query;
                    ajax_params.type = settings.method;
                    ajax_params.dataType = settings.contentType;
                    if (settings.crossDomain) {
                        ajax_params.dataType = "jsonp";
                    }

                    // Attach the success callback
                    ajax_params.success = function (results) {
                        if ($.isFunction(settings.onResult)) {
                            results = settings.onResult.call(hidden_input, results);
                        }
                        cache.add(cache_key, settings.jsonContainer ? results[settings.jsonContainer] : results);

                        // only populate the dropdown if the results are associated with the active search query
                        if (input_box.val().toLowerCase() === query) {
                            populate_dropdown(query, settings.jsonContainer ? results[settings.jsonContainer] : results);
                        }
                    };

                    // Make the request
                    $.ajax(ajax_params);
                } else if (settings.local_data) {
                    // Do the search through local data
                    var results = $.grep(settings.local_data, function (row) {
                        return row[settings.propertyToSearch].toLowerCase().indexOf(query.toLowerCase()) > -1;
                    });

                    if ($.isFunction(settings.onResult)) {
                        results = settings.onResult.call(hidden_input, results);
                    }
                    cache.add(cache_key, results);
                    populate_dropdown(query, results);
                }
            }
        }

        // compute the dynamic URL
        function computeURL() {
            var url = settings.url;
            if (typeof settings.url == 'function') {
                url = settings.url.call();
            }
            return url;
        }
    };

// Really basic cache for the results
    $.TokenList.Cache = function (options) {
        var settings = $.extend({
            max_size:500
        }, options);

        var data = {};
        var size = 0;

        var flush = function () {
            data = {};
            size = 0;
        };

        this.add = function (query, results) {
            if (size > settings.max_size) {
                flush();
            }

            if (!data[query]) {
                size += 1;
            }

            data[query] = results;
        };

        this.get = function (query) {
            return data[query];
        };
    };
}(jQuery));
/*
 jQuery delayed observer - 0.8
 http://code.google.com/p/jquery-utils/

 (c) Maxime Haineault <haineault@gmail.com>
 http://haineault.com

 MIT License (http://www.opensource.org/licenses/mit-license.php)

 */


(function ($) {
    $.extend($.fn, {
        delayedObserver:function (callback, delay, options) {
            return this.each(function () {
                var el = $(this);
                var op = options || {};
                el.data('oldval', el.val())
                    .data('delay', delay || 0.5)
                    .data('condition', op.condition || function () {
                    return ($(this).data('oldval') == $(this).val());
                })
                    .data('callback', callback)
                    [(op.event || 'keyup')](function () {
                    if (el.data('condition').apply(el)) {
                        return;
                    }
                    else {
                        if (el.data('timer')) {
                            clearTimeout(el.data('timer'));
                        }
                        el.data('timer', setTimeout(function () {
                            el.data('callback').apply(el);
                        }, el.data('delay') * 1000));
                        el.data('oldval', el.val());
                    }
                });
            });
        }
    });
})(jQuery);
/*
 * jsTree 1.0-rc3
 * http://jstree.com/
 *
 * Copyright (c) 2010 Ivan Bozhanov (vakata.com)
 *
 * Licensed same as jquery - under the terms of either the MIT License or the GPL Version 2 License
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * $Date: 2011-02-09 01:17:14 +0200 (ср, 09 февр 2011) $
 * $Revision: 236 $
 */

/*jslint browser: true, onevar: true, undef: true, bitwise: true, strict: true */
/*global window : false, clearInterval: false, clearTimeout: false, document: false, setInterval: false, setTimeout: false, jQuery: false, navigator: false, XSLTProcessor: false, DOMParser: false, XMLSerializer: false*/


"use strict";

// top wrapper to prevent multiple inclusion (is this OK?)
(function () {
    if (jQuery && jQuery.jstree) {
        return;
    }
    var is_ie6 = false, is_ie7 = false, is_ff2 = false;

    /* 
     * jsTree core
     */
    (function ($) {
        // Common functions not related to jsTree 
        // decided to move them to a `vakata` "namespace"
        $.vakata = {};
        // CSS related functions
        $.vakata.css = {
            get_css:function (rule_name, delete_flag, sheet) {
                rule_name = rule_name.toLowerCase();
                var css_rules = sheet.cssRules || sheet.rules,
                    j = 0;
                do {
                    if (css_rules.length && j > css_rules.length + 5) {
                        return false;
                    }
                    if (css_rules[j].selectorText && css_rules[j].selectorText.toLowerCase() == rule_name) {
                        if (delete_flag === true) {
                            if (sheet.removeRule) {
                                sheet.removeRule(j);
                            }
                            if (sheet.deleteRule) {
                                sheet.deleteRule(j);
                            }
                            return true;
                        }
                        else {
                            return css_rules[j];
                        }
                    }
                }
                while (css_rules[++j]);
                return false;
            },
            add_css:function (rule_name, sheet) {
                if ($.jstree.css.get_css(rule_name, false, sheet)) {
                    return false;
                }
                if (sheet.insertRule) {
                    sheet.insertRule(rule_name + ' { }', 0);
                } else {
                    sheet.addRule(rule_name, null, 0);
                }
                return $.vakata.css.get_css(rule_name);
            },
            remove_css:function (rule_name, sheet) {
                return $.vakata.css.get_css(rule_name, true, sheet);
            },
            add_sheet:function (opts) {
                var tmp = false, is_new = true;
                if (opts.str) {
                    if (opts.title) {
                        tmp = $("style[id='" + opts.title + "-stylesheet']")[0];
                    }
                    if (tmp) {
                        is_new = false;
                    }
                    else {
                        tmp = document.createElement("style");
                        tmp.setAttribute('type', "text/css");
                        if (opts.title) {
                            tmp.setAttribute("id", opts.title + "-stylesheet");
                        }
                    }
                    if (tmp.styleSheet) {
                        if (is_new) {
                            document.getElementsByTagName("head")[0].appendChild(tmp);
                            tmp.styleSheet.cssText = opts.str;
                        }
                        else {
                            tmp.styleSheet.cssText = tmp.styleSheet.cssText + " " + opts.str;
                        }
                    }
                    else {
                        tmp.appendChild(document.createTextNode(opts.str));
                        document.getElementsByTagName("head")[0].appendChild(tmp);
                    }
                    return tmp.sheet || tmp.styleSheet;
                }
                if (opts.url) {
                    if (document.createStyleSheet) {
                        try {
                            tmp = document.createStyleSheet(opts.url);
                        } catch (e) {
                        }
                    }
                    else {
                        tmp = document.createElement('link');
                        tmp.rel = 'stylesheet';
                        tmp.type = 'text/css';
                        tmp.media = "all";
                        tmp.href = opts.url;
                        document.getElementsByTagName("head")[0].appendChild(tmp);
                        return tmp.styleSheet;
                    }
                }
            }
        };

        // private variables 
        var instances = [], // instance array (used by $.jstree.reference/create/focused)
            focused_instance = -1, // the index in the instance array of the currently focused instance
            plugins = {}, // list of included plugins
            prepared_move = {};		// for the move_node function

        // jQuery plugin wrapper (thanks to jquery UI widget function)
        $.fn.jstree = function (settings) {
            var isMethodCall = (typeof settings == 'string'), // is this a method call like $().jstree("open_node")
                args = Array.prototype.slice.call(arguments, 1),
                returnValue = this;

            // if a method call execute the method on all selected instances
            if (isMethodCall) {
                if (settings.substring(0, 1) == '_') {
                    return returnValue;
                }
                this.each(function () {
                    var instance = instances[$.data(this, "jstree-instance-id")],
                        methodValue = (instance && $.isFunction(instance[settings])) ? instance[settings].apply(instance, args) : instance;
                    if (typeof methodValue !== "undefined" && (settings.indexOf("is_") === 0 || (methodValue !== true && methodValue !== false))) {
                        returnValue = methodValue;
                        return false;
                    }
                });
            }
            else {
                this.each(function () {
                    // extend settings and allow for multiple hashes and $.data
                    var instance_id = $.data(this, "jstree-instance-id"),
                        a = [],
                        b = settings ? $.extend({}, true, settings) : {},
                        c = $(this),
                        s = false,
                        t = [];
                    a = a.concat(args);
                    if (c.data("jstree")) {
                        a.push(c.data("jstree"));
                    }
                    b = a.length ? $.extend.apply(null, [true, b].concat(a)) : b;

                    // if an instance already exists, destroy it first
                    if (typeof instance_id !== "undefined" && instances[instance_id]) {
                        instances[instance_id].destroy();
                    }
                    // push a new empty object to the instances array
                    instance_id = parseInt(instances.push({}), 10) - 1;
                    // store the jstree instance id to the container element
                    $.data(this, "jstree-instance-id", instance_id);
                    // clean up all plugins
                    b.plugins = $.isArray(b.plugins) ? b.plugins : $.jstree.defaults.plugins.slice();
                    b.plugins.unshift("core");
                    // only unique plugins
                    b.plugins = b.plugins.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",");

                    // extend defaults with passed data
                    s = $.extend(true, {}, $.jstree.defaults, b);
                    s.plugins = b.plugins;
                    $.each(plugins, function (i, val) {
                        if ($.inArray(i, s.plugins) === -1) {
                            s[i] = null;
                            delete s[i];
                        }
                        else {
                            t.push(i);
                        }
                    });
                    s.plugins = t;

                    // push the new object to the instances array (at the same time set the default classes to the container) and init
                    instances[instance_id] = new $.jstree._instance(instance_id, $(this).addClass("jstree jstree-" + instance_id), s);
                    // init all activated plugins for this instance
                    $.each(instances[instance_id]._get_settings().plugins, function (i, val) {
                        instances[instance_id].data[val] = {};
                    });
                    $.each(instances[instance_id]._get_settings().plugins, function (i, val) {
                        if (plugins[val]) {
                            plugins[val].__init.apply(instances[instance_id]);
                        }
                    });
                    // initialize the instance
                    setTimeout(function () {
                        instances[instance_id].init();
                    }, 0);
                });
            }
            // return the jquery selection (or if it was a method call that returned a value - the returned value)
            return returnValue;
        };
        // object to store exposed functions and objects
        $.jstree = {
            defaults:{
                plugins:[]
            },
            _focused:function () {
                return instances[focused_instance] || null;
            },
            _reference:function (needle) {
                // get by instance id
                if (instances[needle]) {
                    return instances[needle];
                }
                // get by DOM (if still no luck - return null
                var o = $(needle);
                if (!o.length && typeof needle === "string") {
                    o = $("#" + needle);
                }
                if (!o.length) {
                    return null;
                }
                return instances[o.closest(".jstree").data("jstree-instance-id")] || null;
            },
            _instance:function (index, container, settings) {
                // for plugins to store data in
                this.data = { core:{} };
                this.get_settings = function () {
                    return $.extend(true, {}, settings);
                };
                this._get_settings = function () {
                    return settings;
                };
                this.get_index = function () {
                    return index;
                };
                this.get_container = function () {
                    return container;
                };
                this.get_container_ul = function () {
                    return container.children("ul:eq(0)");
                };
                this._set_settings = function (s) {
                    settings = $.extend(true, {}, settings, s);
                };
            },
            _fn:{ },
            plugin:function (pname, pdata) {
                pdata = $.extend({}, {
                    __init:$.noop,
                    __destroy:$.noop,
                    _fn:{},
                    defaults:false
                }, pdata);
                plugins[pname] = pdata;

                $.jstree.defaults[pname] = pdata.defaults;
                $.each(pdata._fn, function (i, val) {
                    val.plugin = pname;
                    val.old = $.jstree._fn[i];
                    $.jstree._fn[i] = function () {
                        var rslt,
                            func = val,
                            args = Array.prototype.slice.call(arguments),
                            evnt = new $.Event("before.jstree"),
                            rlbk = false;

                        if (this.data.core.locked === true && i !== "unlock" && i !== "is_locked") {
                            return;
                        }

                        // Check if function belongs to the included plugins of this instance
                        do {
                            if (func && func.plugin && $.inArray(func.plugin, this._get_settings().plugins) !== -1) {
                                break;
                            }
                            func = func.old;
                        } while (func);
                        if (!func) {
                            return;
                        }

                        // context and function to trigger events, then finally call the function
                        if (i.indexOf("_") === 0) {
                            rslt = func.apply(this, args);
                        }
                        else {
                            rslt = this.get_container().triggerHandler(evnt, { "func":i, "inst":this, "args":args, "plugin":func.plugin });
                            if (rslt === false) {
                                return;
                            }
                            if (typeof rslt !== "undefined") {
                                args = rslt;
                            }

                            rslt = func.apply(
                                $.extend({}, this, {
                                    __callback:function (data) {
                                        this.get_container().triggerHandler(i + '.jstree', { "inst":this, "args":args, "rslt":data, "rlbk":rlbk });
                                    },
                                    __rollback:function () {
                                        rlbk = this.get_rollback();
                                        return rlbk;
                                    },
                                    __call_old:function (replace_arguments) {
                                        return func.old.apply(this, (replace_arguments ? Array.prototype.slice.call(arguments, 1) : args ));
                                    }
                                }), args);
                        }

                        // return the result
                        return rslt;
                    };
                    $.jstree._fn[i].old = val.old;
                    $.jstree._fn[i].plugin = pname;
                });
            },
            rollback:function (rb) {
                if (rb) {
                    if (!$.isArray(rb)) {
                        rb = [ rb ];
                    }
                    $.each(rb, function (i, val) {
                        instances[val.i].set_rollback(val.h, val.d);
                    });
                }
            }
        };
        // set the prototype for all instances
        $.jstree._fn = $.jstree._instance.prototype = {};

        // load the css when DOM is ready
        $(function () {
            // code is copied from jQuery ($.browser is deprecated + there is a bug in IE)
            var u = navigator.userAgent.toLowerCase(),
                v = (u.match(/.+?(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0, '0'])[1],
                css_string = '' +
                    '.jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } ' +
                    '.jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; min-width:18px; } ' +
                    '.jstree-rtl li { margin-left:0; margin-right:18px; } ' +
                    '.jstree > ul > li { margin-left:0px; } ' +
                    '.jstree-rtl > ul > li { margin-right:0px; } ' +
                    '.jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } ' +
                    '.jstree a { display:inline-block; line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } ' +
                    '.jstree a:focus { outline: none; } ' +
                    '.jstree a > ins { height:16px; width:16px; } ' +
                    '.jstree a > .jstree-icon { margin-right:3px; } ' +
                    '.jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } ' +
                    'li.jstree-open > ul { display:block; } ' +
                    'li.jstree-closed > ul { display:none; } ';
            // Correct IE 6 (does not support the > CSS selector)
            if (/msie/.test(u) && parseInt(v, 10) == 6) {
                is_ie6 = true;

                // fix image flicker and lack of caching
                try {
                    document.execCommand("BackgroundImageCache", false, true);
                } catch (err) {
                }

                css_string += '' +
                    '.jstree li { height:18px; margin-left:0; margin-right:0; } ' +
                    '.jstree li li { margin-left:18px; } ' +
                    '.jstree-rtl li li { margin-left:0px; margin-right:18px; } ' +
                    'li.jstree-open ul { display:block; } ' +
                    'li.jstree-closed ul { display:none !important; } ' +
                    '.jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } ' +
                    '.jstree li a ins { height:16px; width:16px; margin-right:3px; } ' +
                    '.jstree-rtl li a ins { margin-right:0px; margin-left:3px; } ';
            }
            // Correct IE 7 (shifts anchor nodes onhover)
            if (/msie/.test(u) && parseInt(v, 10) == 7) {
                is_ie7 = true;
                css_string += '.jstree li a { border-width:0 !important; padding:0px 2px !important; } ';
            }
            // correct ff2 lack of display:inline-block
            if (!/compatible/.test(u) && /mozilla/.test(u) && parseFloat(v, 10) < 1.9) {
                is_ff2 = true;
                css_string += '' +
                    '.jstree ins { display:-moz-inline-box; } ' +
                    '.jstree li { line-height:12px; } ' + // WHY??
                    '.jstree a { display:-moz-inline-box; } ' +
                    '.jstree .jstree-no-icons .jstree-checkbox { display:-moz-inline-stack !important; } ';
                /* this shouldn't be here as it is theme specific */
            }
            // the default stylesheet
            $.vakata.css.add_sheet({ str:css_string, title:"jstree" });
        });

        // core functions (open, close, create, update, delete)
        $.jstree.plugin("core", {
            __init:function () {
                this.data.core.locked = false;
                this.data.core.to_open = this.get_settings().core.initially_open;
                this.data.core.to_load = this.get_settings().core.initially_load;
            },
            defaults:{
                html_titles:false,
                animation:500,
                initially_open:[],
                initially_load:[],
                open_parents:true,
                notify_plugins:true,
                rtl:false,
                load_open:false,
                strings:{
                    loading:"Loading ...",
                    new_node:"New node",
                    multiple_selection:"Multiple selection"
                }
            },
            _fn:{
                init:function () {
                    this.set_focus();
                    if (this._get_settings().core.rtl) {
                        this.get_container().addClass("jstree-rtl").css("direction", "rtl");
                    }
                    this.get_container().html("<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>" + this._get_string("loading") + "</a></li></ul>");
                    this.data.core.li_height = this.get_container_ul().find("li.jstree-closed, li.jstree-leaf").eq(0).height() || 18;

                    this.get_container()
                        .delegate("li > ins", "click.jstree", $.proxy(function (event) {
                        var trgt = $(event.target);
                        if (trgt.is("ins") && event.pageY - trgt.offset().top < this.data.core.li_height) {
                            this.toggle_node(trgt);
                        }
                    }, this))
                        .bind("mousedown.jstree", $.proxy(function () {
                        this.set_focus(); // This used to be setTimeout(set_focus,0) - why?
                    }, this))
                        .bind("dblclick.jstree", function (event) {
                            var sel;
                            if (document.selection && document.selection.empty) {
                                document.selection.empty();
                            }
                            else {
                                if (window.getSelection) {
                                    sel = window.getSelection();
                                    try {
                                        sel.removeAllRanges();
                                        sel.collapse();
                                    } catch (err) {
                                    }
                                }
                            }
                        });
                    if (this._get_settings().core.notify_plugins) {
                        this.get_container()
                            .bind("load_node.jstree", $.proxy(function (e, data) {
                            var o = this._get_node(data.rslt.obj),
                                t = this;
                            if (o === -1) {
                                o = this.get_container_ul();
                            }
                            if (!o.length) {
                                return;
                            }
                            o.find("li").each(function () {
                                var th = $(this);
                                if (th.data("jstree")) {
                                    $.each(th.data("jstree"), function (plugin, values) {
                                        if (t.data[plugin] && $.isFunction(t["_" + plugin + "_notify"])) {
                                            t["_" + plugin + "_notify"].call(t, th, values);
                                        }
                                    });
                                }
                            });
                        }, this));
                    }
                    if (this._get_settings().core.load_open) {
                        this.get_container()
                            .bind("load_node.jstree", $.proxy(function (e, data) {
                            var o = this._get_node(data.rslt.obj),
                                t = this;
                            if (o === -1) {
                                o = this.get_container_ul();
                            }
                            if (!o.length) {
                                return;
                            }
                            o.find("li.jstree-open:not(:has(ul))").each(function () {
                                t.load_node(this, $.noop, $.noop);
                            });
                        }, this));
                    }
                    this.__callback();
                    this.load_node(-1, function () {
                        this.loaded();
                        this.reload_nodes();
                    });
                },
                destroy:function () {
                    var i,
                        n = this.get_index(),
                        s = this._get_settings(),
                        _this = this;

                    $.each(s.plugins, function (i, val) {
                        try {
                            plugins[val].__destroy.apply(_this);
                        } catch (err) {
                        }
                    });
                    this.__callback();
                    // set focus to another instance if this one is focused
                    if (this.is_focused()) {
                        for (i in instances) {
                            if (instances.hasOwnProperty(i) && i != n) {
                                instances[i].set_focus();
                                break;
                            }
                        }
                    }
                    // if no other instance found
                    if (n === focused_instance) {
                        focused_instance = -1;
                    }
                    // remove all traces of jstree in the DOM (only the ones set using jstree*) and cleans all events
                    this.get_container()
                        .unbind(".jstree")
                        .undelegate(".jstree")
                        .removeData("jstree-instance-id")
                        .find("[class^='jstree']")
                        .andSelf()
                        .attr("class", function () {
                            return this.className.replace(/jstree[^ ]*|$/ig, '');
                        });
                    $(document)
                        .unbind(".jstree-" + n)
                        .undelegate(".jstree-" + n);
                    // remove the actual data
                    instances[n] = null;
                    delete instances[n];
                },

                _core_notify:function (n, data) {
                    if (data.opened) {
                        this.open_node(n, false, true);
                    }
                },

                lock:function () {
                    this.data.core.locked = true;
                    this.get_container().children("ul").addClass("jstree-locked").css("opacity", "0.7");
                    this.__callback({});
                },
                unlock:function () {
                    this.data.core.locked = false;
                    this.get_container().children("ul").removeClass("jstree-locked").css("opacity", "1");
                    this.__callback({});
                },
                is_locked:function () {
                    return this.data.core.locked;
                },
                save_opened:function () {
                    var _this = this;
                    this.data.core.to_open = [];
                    this.get_container_ul().find("li.jstree-open").each(function () {
                        if (this.id) {
                            _this.data.core.to_open.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:"));
                        }
                    });
                    this.__callback(_this.data.core.to_open);
                },
                save_loaded:function () {
                },
                reload_nodes:function (is_callback) {
                    var _this = this,
                        done = true,
                        current = [],
                        remaining = [];
                    if (!is_callback) {
                        this.data.core.reopen = false;
                        this.data.core.refreshing = true;
                        this.data.core.to_open = $.map($.makeArray(this.data.core.to_open), function (n) {
                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
                        });
                        this.data.core.to_load = $.map($.makeArray(this.data.core.to_load), function (n) {
                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
                        });
                        if (this.data.core.to_open.length) {
                            this.data.core.to_load = this.data.core.to_load.concat(this.data.core.to_open);
                        }
                    }
                    if (this.data.core.to_load.length) {
                        $.each(this.data.core.to_load, function (i, val) {
                            if (val == "#") {
                                return true;
                            }
                            if ($(val).length) {
                                current.push(val);
                            }
                            else {
                                remaining.push(val);
                            }
                        });
                        if (current.length) {
                            this.data.core.to_load = remaining;
                            $.each(current, function (i, val) {
                                if (!_this._is_loaded(val)) {
                                    _this.load_node(val, function () {
                                        _this.reload_nodes(true);
                                    }, function () {
                                        _this.reload_nodes(true);
                                    });
                                    done = false;
                                }
                            });
                        }
                    }
                    if (this.data.core.to_open.length) {
                        $.each(this.data.core.to_open, function (i, val) {
                            _this.open_node(val, false, true);
                        });
                    }
                    if (done) {
                        // TODO: find a more elegant approach to syncronizing returning requests
                        if (this.data.core.reopen) {
                            clearTimeout(this.data.core.reopen);
                        }
                        this.data.core.reopen = setTimeout(function () {
                            _this.__callback({}, _this);
                        }, 50);
                        this.data.core.refreshing = false;
                        this.reopen();
                    }
                },
                reopen:function () {
                    var _this = this;
                    if (this.data.core.to_open.length) {
                        $.each(this.data.core.to_open, function (i, val) {
                            _this.open_node(val, false, true);
                        });
                    }
                    this.__callback({});
                },
                refresh:function (obj) {
                    var _this = this;
                    this.save_opened();
                    if (!obj) {
                        obj = -1;
                    }
                    obj = this._get_node(obj);
                    if (!obj) {
                        obj = -1;
                    }
                    if (obj !== -1) {
                        obj.children("UL").remove();
                    }
                    else {
                        this.get_container_ul().empty();
                    }
                    this.load_node(obj, function () {
                        _this.__callback({ "obj":obj});
                        _this.reload_nodes();
                    });
                },
                // Dummy function to fire after the first load (so that there is a jstree.loaded event)
                loaded:function () {
                    this.__callback();
                },
                // deal with focus
                set_focus:function () {
                    if (this.is_focused()) {
                        return;
                    }
                    var f = $.jstree._focused();
                    if (f) {
                        f.unset_focus();
                    }

                    this.get_container().addClass("jstree-focused");
                    focused_instance = this.get_index();
                    this.__callback();
                },
                is_focused:function () {
                    return focused_instance == this.get_index();
                },
                unset_focus:function () {
                    if (this.is_focused()) {
                        this.get_container().removeClass("jstree-focused");
                        focused_instance = -1;
                    }
                    this.__callback();
                },

                // traverse
                _get_node:function (obj) {
                    var $obj = $(obj, this.get_container());
                    if ($obj.is(".jstree") || obj == -1) {
                        return -1;
                    }
                    $obj = $obj.closest("li", this.get_container());
                    return $obj.length ? $obj : false;
                },
                _get_next:function (obj, strict) {
                    obj = this._get_node(obj);
                    if (obj === -1) {
                        return this.get_container().find("> ul > li:first-child");
                    }
                    if (!obj.length) {
                        return false;
                    }
                    if (strict) {
                        return (obj.nextAll("li").size() > 0) ? obj.nextAll("li:eq(0)") : false;
                    }

                    if (obj.hasClass("jstree-open")) {
                        return obj.find("li:eq(0)");
                    }
                    else if (obj.nextAll("li").size() > 0) {
                        return obj.nextAll("li:eq(0)");
                    }
                    else {
                        return obj.parentsUntil(".jstree", "li").next("li").eq(0);
                    }
                },
                _get_prev:function (obj, strict) {
                    obj = this._get_node(obj);
                    if (obj === -1) {
                        return this.get_container().find("> ul > li:last-child");
                    }
                    if (!obj.length) {
                        return false;
                    }
                    if (strict) {
                        return (obj.prevAll("li").length > 0) ? obj.prevAll("li:eq(0)") : false;
                    }

                    if (obj.prev("li").length) {
                        obj = obj.prev("li").eq(0);
                        while (obj.hasClass("jstree-open")) {
                            obj = obj.children("ul:eq(0)").children("li:last");
                        }
                        return obj;
                    }
                    else {
                        var o = obj.parentsUntil(".jstree", "li:eq(0)");
                        return o.length ? o : false;
                    }
                },
                _get_parent:function (obj) {
                    obj = this._get_node(obj);
                    if (obj == -1 || !obj.length) {
                        return false;
                    }
                    var o = obj.parentsUntil(".jstree", "li:eq(0)");
                    return o.length ? o : -1;
                },
                _get_children:function (obj) {
                    obj = this._get_node(obj);
                    if (obj === -1) {
                        return this.get_container().children("ul:eq(0)").children("li");
                    }
                    if (!obj.length) {
                        return false;
                    }
                    return obj.children("ul:eq(0)").children("li");
                },
                get_path:function (obj, id_mode) {
                    var p = [],
                        _this = this;
                    obj = this._get_node(obj);
                    if (obj === -1 || !obj || !obj.length) {
                        return false;
                    }
                    obj.parentsUntil(".jstree", "li").each(function () {
                        p.push(id_mode ? this.id : _this.get_text(this));
                    });
                    p.reverse();
                    p.push(id_mode ? obj.attr("id") : this.get_text(obj));
                    return p;
                },

                // string functions
                _get_string:function (key) {
                    return this._get_settings().core.strings[key] || key;
                },

                is_open:function (obj) {
                    obj = this._get_node(obj);
                    return obj && obj !== -1 && obj.hasClass("jstree-open");
                },
                is_closed:function (obj) {
                    obj = this._get_node(obj);
                    return obj && obj !== -1 && obj.hasClass("jstree-closed");
                },
                is_leaf:function (obj) {
                    obj = this._get_node(obj);
                    return obj && obj !== -1 && obj.hasClass("jstree-leaf");
                },
                correct_state:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj || obj === -1) {
                        return false;
                    }
                    obj.removeClass("jstree-closed jstree-open").addClass("jstree-leaf").children("ul").remove();
                    this.__callback({ "obj":obj });
                },
                // open/close
                open_node:function (obj, callback, skip_animation) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    if (!obj.hasClass("jstree-closed")) {
                        if (callback) {
                            callback.call();
                        }
                        return false;
                    }
                    var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
                        t = this;
                    if (!this._is_loaded(obj)) {
                        obj.children("a").addClass("jstree-loading");
                        this.load_node(obj, function () {
                            t.open_node(obj, callback, skip_animation);
                        }, callback);
                    }
                    else {
                        if (this._get_settings().core.open_parents) {
                            obj.parentsUntil(".jstree", ".jstree-closed").each(function () {
                                t.open_node(this, false, true);
                            });
                        }
                        if (s) {
                            obj.children("ul").css("display", "none");
                        }
                        obj.removeClass("jstree-closed").addClass("jstree-open").children("a").removeClass("jstree-loading");
                        if (s) {
                            obj.children("ul").stop(true, true).slideDown(s, function () {
                                this.style.display = "";
                                t.after_open(obj);
                            });
                        }
                        else {
                            t.after_open(obj);
                        }
                        this.__callback({ "obj":obj });
                        if (callback) {
                            callback.call();
                        }
                    }
                },
                after_open:function (obj) {
                    this.__callback({ "obj":obj });
                },
                close_node:function (obj, skip_animation) {
                    obj = this._get_node(obj);
                    var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
                        t = this;
                    if (!obj.length || !obj.hasClass("jstree-open")) {
                        return false;
                    }
                    if (s) {
                        obj.children("ul").attr("style", "display:block !important");
                    }
                    obj.removeClass("jstree-open").addClass("jstree-closed");
                    if (s) {
                        obj.children("ul").stop(true, true).slideUp(s, function () {
                            this.style.display = "";
                            t.after_close(obj);
                        });
                    }
                    else {
                        t.after_close(obj);
                    }
                    this.__callback({ "obj":obj });
                },
                after_close:function (obj) {
                    this.__callback({ "obj":obj });
                },
                toggle_node:function (obj) {
                    obj = this._get_node(obj);
                    if (obj.hasClass("jstree-closed")) {
                        return this.open_node(obj);
                    }
                    if (obj.hasClass("jstree-open")) {
                        return this.close_node(obj);
                    }
                },
                open_all:function (obj, do_animation, original_obj) {
                    obj = obj ? this._get_node(obj) : -1;
                    if (!obj || obj === -1) {
                        obj = this.get_container_ul();
                    }
                    if (original_obj) {
                        obj = obj.find("li.jstree-closed");
                    }
                    else {
                        original_obj = obj;
                        if (obj.is(".jstree-closed")) {
                            obj = obj.find("li.jstree-closed").andSelf();
                        }
                        else {
                            obj = obj.find("li.jstree-closed");
                        }
                    }
                    var _this = this;
                    obj.each(function () {
                        var __this = this;
                        if (!_this._is_loaded(this)) {
                            _this.open_node(this, function () {
                                _this.open_all(__this, do_animation, original_obj);
                            }, !do_animation);
                        }
                        else {
                            _this.open_node(this, false, !do_animation);
                        }
                    });
                    // so that callback is fired AFTER all nodes are open
                    if (original_obj.find('li.jstree-closed').length === 0) {
                        this.__callback({ "obj":original_obj });
                    }
                },
                close_all:function (obj, do_animation) {
                    var _this = this;
                    obj = obj ? this._get_node(obj) : this.get_container();
                    if (!obj || obj === -1) {
                        obj = this.get_container_ul();
                    }
                    obj.find("li.jstree-open").andSelf().each(function () {
                        _this.close_node(this, !do_animation);
                    });
                    this.__callback({ "obj":obj });
                },
                clean_node:function (obj) {
                    obj = obj && obj != -1 ? $(obj) : this.get_container_ul();
                    obj = obj.is("li") ? obj.find("li").andSelf() : obj.find("li");
                    obj.removeClass("jstree-last")
                        .filter("li:last-child").addClass("jstree-last").end()
                        .filter(":has(li)")
                        .not(".jstree-open").removeClass("jstree-leaf").addClass("jstree-closed");
                    obj.not(".jstree-open, .jstree-closed").addClass("jstree-leaf").children("ul").remove();
                    this.__callback({ "obj":obj });
                },
                // rollback
                get_rollback:function () {
                    this.__callback();
                    return { i:this.get_index(), h:this.get_container().children("ul").clone(true), d:this.data };
                },
                set_rollback:function (html, data) {
                    this.get_container().empty().append(html);
                    this.data = data;
                    this.__callback();
                },
                // Dummy functions to be overwritten by any datastore plugin included
                load_node:function (obj, s_call, e_call) {
                    this.__callback({ "obj":obj });
                },
                _is_loaded:function (obj) {
                    return true;
                },

                // Basic operations: create
                create_node:function (obj, position, js, callback, is_loaded) {
                    obj = this._get_node(obj);
                    position = typeof position === "undefined" ? "last" : position;
                    var d = $("<li />"),
                        s = this._get_settings().core,
                        tmp;

                    if (obj !== -1 && !obj.length) {
                        return false;
                    }
                    if (!is_loaded && !this._is_loaded(obj)) {
                        this.load_node(obj, function () {
                            this.create_node(obj, position, js, callback, true);
                        });
                        return false;
                    }

                    this.__rollback();

                    if (typeof js === "string") {
                        js = { "data":js };
                    }
                    if (!js) {
                        js = {};
                    }
                    if (js.attr) {
                        d.attr(js.attr);
                    }
                    if (js.metadata) {
                        d.data(js.metadata);
                    }
                    if (js.state) {
                        d.addClass("jstree-" + js.state);
                    }
                    if (!js.data) {
                        js.data = this._get_string("new_node");
                    }
                    if (!$.isArray(js.data)) {
                        tmp = js.data;
                        js.data = [];
                        js.data.push(tmp);
                    }
                    $.each(js.data, function (i, m) {
                        tmp = $("<a />");
                        if ($.isFunction(m)) {
                            m = m.call(this, js);
                        }
                        if (typeof m == "string") {
                            tmp.attr('href', '#')[ s.html_titles ? "html" : "text" ](m);
                        }
                        else {
                            if (!m.attr) {
                                m.attr = {};
                            }
                            if (!m.attr.href) {
                                m.attr.href = '#';
                            }
                            tmp.attr(m.attr)[ s.html_titles ? "html" : "text" ](m.title);
                            if (m.language) {
                                tmp.addClass(m.language);
                            }
                        }
                        tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
                        if (m.icon) {
                            if (m.icon.indexOf("/") === -1) {
                                tmp.children("ins").addClass(m.icon);
                            }
                            else {
                                tmp.children("ins").css("background", "url('" + m.icon + "') center center no-repeat");
                            }
                        }
                        d.append(tmp);
                    });
                    d.prepend("<ins class='jstree-icon'>&#160;</ins>");
                    if (obj === -1) {
                        obj = this.get_container();
                        if (position === "before") {
                            position = "first";
                        }
                        if (position === "after") {
                            position = "last";
                        }
                    }
                    switch (position) {
                        case "before":
                            obj.before(d);
                            tmp = this._get_parent(obj);
                            break;
                        case "after" :
                            obj.after(d);
                            tmp = this._get_parent(obj);
                            break;
                        case "inside":
                        case "first" :
                            if (!obj.children("ul").length) {
                                obj.append("<ul />");
                            }
                            obj.children("ul").prepend(d);
                            tmp = obj;
                            break;
                        case "last":
                            if (!obj.children("ul").length) {
                                obj.append("<ul />");
                            }
                            obj.children("ul").append(d);
                            tmp = obj;
                            break;
                        default:
                            if (!obj.children("ul").length) {
                                obj.append("<ul />");
                            }
                            if (!position) {
                                position = 0;
                            }
                            tmp = obj.children("ul").children("li").eq(position);
                            if (tmp.length) {
                                tmp.before(d);
                            }
                            else {
                                obj.children("ul").append(d);
                            }
                            tmp = obj;
                            break;
                    }
                    if (tmp === -1 || tmp.get(0) === this.get_container().get(0)) {
                        tmp = -1;
                    }
                    this.clean_node(tmp);
                    this.__callback({ "obj":d, "parent":tmp });
                    if (callback) {
                        callback.call(this, d);
                    }
                    return d;
                },
                // Basic operations: rename (deal with text)
                get_text:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    var s = this._get_settings().core.html_titles;
                    obj = obj.children("a:eq(0)");
                    if (s) {
                        obj = obj.clone();
                        obj.children("INS").remove();
                        return obj.html();
                    }
                    else {
                        obj = obj.contents().filter(function () {
                            return this.nodeType == 3;
                        })[0];
                        return obj.nodeValue;
                    }
                },
                set_text:function (obj, val) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    obj = obj.children("a:eq(0)");
                    if (this._get_settings().core.html_titles) {
                        var tmp = obj.children("INS").clone();
                        obj.html(val).prepend(tmp);
                        this.__callback({ "obj":obj, "name":val });
                        return true;
                    }
                    else {
                        obj = obj.contents().filter(function () {
                            return this.nodeType == 3;
                        })[0];
                        this.__callback({ "obj":obj, "name":val });
                        return (obj.nodeValue = val);
                    }
                },
                rename_node:function (obj, val) {
                    obj = this._get_node(obj);
                    this.__rollback();
                    if (obj && obj.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) {
                        this.__callback({ "obj":obj, "name":val });
                    }
                },
                // Basic operations: deleting nodes
                delete_node:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    this.__rollback();
                    var p = this._get_parent(obj), prev = $([]), t = this;
                    obj.each(function () {
                        prev = prev.add(t._get_prev(this));
                    });
                    obj = obj.detach();
                    if (p !== -1 && p.find("> ul > li").length === 0) {
                        p.removeClass("jstree-open jstree-closed").addClass("jstree-leaf");
                    }
                    this.clean_node(p);
                    this.__callback({ "obj":obj, "prev":prev, "parent":p });
                    return obj;
                },
                prepare_move:function (o, r, pos, cb, is_cb) {
                    var p = {};

                    p.ot = $.jstree._reference(o) || this;
                    p.o = p.ot._get_node(o);
                    p.r = r === -1 ? -1 : this._get_node(r);
                    p.p = (typeof pos === "undefined" || pos === false) ? "last" : pos; // TODO: move to a setting
                    if (!is_cb && prepared_move.o && prepared_move.o[0] === p.o[0] && prepared_move.r[0] === p.r[0] && prepared_move.p === p.p) {
                        this.__callback(prepared_move);
                        if (cb) {
                            cb.call(this, prepared_move);
                        }
                        return;
                    }
                    p.ot = $.jstree._reference(p.o) || this;
                    p.rt = $.jstree._reference(p.r) || this; // r === -1 ? p.ot : $.jstree._reference(p.r) || this
                    if (p.r === -1 || !p.r) {
                        p.cr = -1;
                        switch (p.p) {
                            case "first":
                            case "before":
                            case "inside":
                                p.cp = 0;
                                break;
                            case "after":
                            case "last":
                                p.cp = p.rt.get_container().find(" > ul > li").length;
                                break;
                            default:
                                p.cp = p.p;
                                break;
                        }
                    }
                    else {
                        if (!/^(before|after)$/.test(p.p) && !this._is_loaded(p.r)) {
                            return this.load_node(p.r, function () {
                                this.prepare_move(o, r, pos, cb, true);
                            });
                        }
                        switch (p.p) {
                            case "before":
                                p.cp = p.r.index();
                                p.cr = p.rt._get_parent(p.r);
                                break;
                            case "after":
                                p.cp = p.r.index() + 1;
                                p.cr = p.rt._get_parent(p.r);
                                break;
                            case "inside":
                            case "first":
                                p.cp = 0;
                                p.cr = p.r;
                                break;
                            case "last":
                                p.cp = p.r.find(" > ul > li").length;
                                p.cr = p.r;
                                break;
                            default:
                                p.cp = p.p;
                                p.cr = p.r;
                                break;
                        }
                    }
                    p.np = p.cr == -1 ? p.rt.get_container() : p.cr;
                    p.op = p.ot._get_parent(p.o);
                    p.cop = p.o.index();
                    if (p.op === -1) {
                        p.op = p.ot ? p.ot.get_container() : this.get_container();
                    }
                    if (!/^(before|after)$/.test(p.p) && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) {
                        p.cp++;
                    }
                    //if(p.p === "before" && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) { p.cp--; }
                    p.or = p.np.find(" > ul > li:nth-child(" + (p.cp + 1) + ")");
                    prepared_move = p;
                    this.__callback(prepared_move);
                    if (cb) {
                        cb.call(this, prepared_move);
                    }
                },
                check_move:function () {
                    var obj = prepared_move, ret = true, r = obj.r === -1 ? this.get_container() : obj.r;
                    if (!obj || !obj.o || obj.or[0] === obj.o[0]) {
                        return false;
                    }
                    if (obj.op && obj.np && obj.op[0] === obj.np[0] && obj.cp - 1 === obj.o.index()) {
                        return false;
                    }
                    obj.o.each(function () {
                        if (r.parentsUntil(".jstree", "li").andSelf().index(this) !== -1) {
                            ret = false;
                            return false;
                        }
                    });
                    return ret;
                },
                move_node:function (obj, ref, position, is_copy, is_prepared, skip_check) {
                    if (!is_prepared) {
                        return this.prepare_move(obj, ref, position, function (p) {
                            this.move_node(p, false, false, is_copy, true, skip_check);
                        });
                    }
                    if (is_copy) {
                        prepared_move.cy = true;
                    }
                    if (!skip_check && !this.check_move()) {
                        return false;
                    }

                    this.__rollback();
                    var o = false;
                    if (is_copy) {
                        o = obj.o.clone(true);
                        o.find("*[id]").andSelf().each(function () {
                            if (this.id) {
                                this.id = "copy_" + this.id;
                            }
                        });
                    }
                    else {
                        o = obj.o;
                    }

                    if (obj.or.length) {
                        obj.or.before(o);
                    }
                    else {
                        if (!obj.np.children("ul").length) {
                            $("<ul />").appendTo(obj.np);
                        }
                        obj.np.children("ul:eq(0)").append(o);
                    }

                    try {
                        obj.ot.clean_node(obj.op);
                        obj.rt.clean_node(obj.np);
                        if (!obj.op.find("> ul > li").length) {
                            obj.op.removeClass("jstree-open jstree-closed").addClass("jstree-leaf").children("ul").remove();
                        }
                    } catch (e) {
                    }

                    if (is_copy) {
                        prepared_move.cy = true;
                        prepared_move.oc = o;
                    }
                    this.__callback(prepared_move);
                    return prepared_move;
                },
                _get_move:function () {
                    return prepared_move;
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree ui plugin
     * This plugins handles selecting/deselecting/hovering/dehovering nodes
     */
    (function ($) {
        var scrollbar_width, e1, e2;
        $(function () {
            if (/msie/.test(navigator.userAgent.toLowerCase())) {
                e1 = $('<textarea cols="10" rows="2"></textarea>').css({ position:'absolute', top:-1000, left:0 }).appendTo('body');
                e2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({ position:'absolute', top:-1000, left:0 }).appendTo('body');
                scrollbar_width = e1.width() - e2.width();
                e1.add(e2).remove();
            }
            else {
                e1 = $('<div />').css({ width:100, height:100, overflow:'auto', position:'absolute', top:-1000, left:0 })
                    .prependTo('body').append('<div />').find('div').css({ width:'100%', height:200 });
                scrollbar_width = 100 - e1.width();
                e1.parent().remove();
            }
        });
        $.jstree.plugin("ui", {
            __init:function () {
                this.data.ui.selected = $();
                this.data.ui.last_selected = false;
                this.data.ui.hovered = null;
                this.data.ui.to_select = this.get_settings().ui.initially_select;

                this.get_container()
                    .delegate("a", "click.jstree", $.proxy(function (event) {
                    event.preventDefault();
                    event.currentTarget.blur();
                    if (!$(event.currentTarget).hasClass("jstree-loading")) {
                        this.select_node(event.currentTarget, true, event);
                    }
                }, this))
                    .delegate("a", "mouseenter.jstree", $.proxy(function (event) {
                    if (!$(event.currentTarget).hasClass("jstree-loading")) {
                        this.hover_node(event.target);
                    }
                }, this))
                    .delegate("a", "mouseleave.jstree", $.proxy(function (event) {
                    if (!$(event.currentTarget).hasClass("jstree-loading")) {
                        this.dehover_node(event.target);
                    }
                }, this))
                    .bind("reopen.jstree", $.proxy(function () {
                    this.reselect();
                }, this))
                    .bind("get_rollback.jstree", $.proxy(function () {
                    this.dehover_node();
                    this.save_selected();
                }, this))
                    .bind("set_rollback.jstree", $.proxy(function () {
                    this.reselect();
                }, this))
                    .bind("close_node.jstree", $.proxy(function (event, data) {
                    var s = this._get_settings().ui,
                        obj = this._get_node(data.rslt.obj),
                        clk = (obj && obj.length) ? obj.children("ul").find("a.jstree-clicked") : $(),
                        _this = this;
                    if (s.selected_parent_close === false || !clk.length) {
                        return;
                    }
                    clk.each(function () {
                        _this.deselect_node(this);
                        if (s.selected_parent_close === "select_parent") {
                            _this.select_node(obj);
                        }
                    });
                }, this))
                    .bind("delete_node.jstree", $.proxy(function (event, data) {
                    var s = this._get_settings().ui.select_prev_on_delete,
                        obj = this._get_node(data.rslt.obj),
                        clk = (obj && obj.length) ? obj.find("a.jstree-clicked") : [],
                        _this = this;
                    clk.each(function () {
                        _this.deselect_node(this);
                    });
                    if (s && clk.length) {
                        data.rslt.prev.each(function () {
                            if (this.parentNode) {
                                _this.select_node(this);
                                return false;
                                /* if return false is removed all prev nodes will be selected */
                            }
                        });
                    }
                }, this))
                    .bind("move_node.jstree", $.proxy(function (event, data) {
                    if (data.rslt.cy) {
                        data.rslt.oc.find("a.jstree-clicked").removeClass("jstree-clicked");
                    }
                }, this));
            },
            defaults:{
                select_limit:-1, // 0, 1, 2 ... or -1 for unlimited
                select_multiple_modifier:"ctrl", // on, or ctrl, shift, alt
                select_range_modifier:"shift",
                selected_parent_close:"select_parent", // false, "deselect", "select_parent"
                selected_parent_open:true,
                select_prev_on_delete:true,
                disable_selecting_children:false,
                initially_select:[]
            },
            _fn:{
                _get_node:function (obj, allow_multiple) {
                    if (typeof obj === "undefined" || obj === null) {
                        return allow_multiple ? this.data.ui.selected : this.data.ui.last_selected;
                    }
                    var $obj = $(obj, this.get_container());
                    if ($obj.is(".jstree") || obj == -1) {
                        return -1;
                    }
                    $obj = $obj.closest("li", this.get_container());
                    return $obj.length ? $obj : false;
                },
                _ui_notify:function (n, data) {
                    if (data.selected) {
                        this.select_node(n, false);
                    }
                },
                save_selected:function () {
                    var _this = this;
                    this.data.ui.to_select = [];
                    this.data.ui.selected.each(function () {
                        if (this.id) {
                            _this.data.ui.to_select.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:"));
                        }
                    });
                    this.__callback(this.data.ui.to_select);
                },
                reselect:function () {
                    var _this = this,
                        s = this.data.ui.to_select;
                    s = $.map($.makeArray(s), function (n) {
                        return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
                    });
                    // this.deselect_all(); WHY deselect, breaks plugin state notifier?
                    $.each(s, function (i, val) {
                        if (val && val !== "#") {
                            _this.select_node(val);
                        }
                    });
                    this.data.ui.selected = this.data.ui.selected.filter(function () {
                        return this.parentNode;
                    });
                    this.__callback();
                },
                refresh:function (obj) {
                    this.save_selected();
                    return this.__call_old();
                },
                hover_node:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    //if(this.data.ui.hovered && obj.get(0) === this.data.ui.hovered.get(0)) { return; }
                    if (!obj.hasClass("jstree-hovered")) {
                        this.dehover_node();
                    }
                    this.data.ui.hovered = obj.children("a").addClass("jstree-hovered").parent();
                    this._fix_scroll(obj);
                    this.__callback({ "obj":obj });
                },
                dehover_node:function () {
                    var obj = this.data.ui.hovered, p;
                    if (!obj || !obj.length) {
                        return false;
                    }
                    p = obj.children("a").removeClass("jstree-hovered").parent();
                    if (this.data.ui.hovered[0] === p[0]) {
                        this.data.ui.hovered = null;
                    }
                    this.__callback({ "obj":obj });
                },
                select_node:function (obj, check, e) {
                    obj = this._get_node(obj);
                    if (obj == -1 || !obj || !obj.length) {
                        return false;
                    }
                    var s = this._get_settings().ui,
                        is_multiple = (s.select_multiple_modifier == "on" || (s.select_multiple_modifier !== false && e && e[s.select_multiple_modifier + "Key"])),
                        is_range = (s.select_range_modifier !== false && e && e[s.select_range_modifier + "Key"] && this.data.ui.last_selected && this.data.ui.last_selected[0] !== obj[0] && this.data.ui.last_selected.parent()[0] === obj.parent()[0]),
                        is_selected = this.is_selected(obj),
                        proceed = true,
                        t = this;
                    if (check) {
                        if (s.disable_selecting_children && is_multiple &&
                            (
                                (obj.parentsUntil(".jstree", "li").children("a.jstree-clicked").length) ||
                                    (obj.children("ul").find("a.jstree-clicked:eq(0)").length)
                                )
                            ) {
                            return false;
                        }
                        proceed = false;
                        switch (!0) {
                            case (is_range):
                                this.data.ui.last_selected.addClass("jstree-last-selected");
                                obj = obj[ obj.index() < this.data.ui.last_selected.index() ? "nextUntil" : "prevUntil" ](".jstree-last-selected").andSelf();
                                if (s.select_limit == -1 || obj.length < s.select_limit) {
                                    this.data.ui.last_selected.removeClass("jstree-last-selected");
                                    this.data.ui.selected.each(function () {
                                        if (this !== t.data.ui.last_selected[0]) {
                                            t.deselect_node(this);
                                        }
                                    });
                                    is_selected = false;
                                    proceed = true;
                                }
                                else {
                                    proceed = false;
                                }
                                break;
                            case (is_selected && !is_multiple):
                                this.deselect_all();
                                is_selected = false;
                                proceed = true;
                                break;
                            case (!is_selected && !is_multiple):
                                if (s.select_limit == -1 || s.select_limit > 0) {
                                    this.deselect_all();
                                    proceed = true;
                                }
                                break;
                            case (is_selected && is_multiple):
                                this.deselect_node(obj);
                                break;
                            case (!is_selected && is_multiple):
                                if (s.select_limit == -1 || this.data.ui.selected.length + 1 <= s.select_limit) {
                                    proceed = true;
                                }
                                break;
                        }
                    }
                    if (proceed && !is_selected) {
                        if (!is_range) {
                            this.data.ui.last_selected = obj;
                        }
                        obj.children("a").addClass("jstree-clicked");
                        if (s.selected_parent_open) {
                            obj.parents(".jstree-closed").each(function () {
                                t.open_node(this, false, true);
                            });
                        }
                        this.data.ui.selected = this.data.ui.selected.add(obj);
                        this._fix_scroll(obj.eq(0));
                        this.__callback({ "obj":obj, "e":e });
                    }
                },
                _fix_scroll:function (obj) {
                    var c = this.get_container()[0], t;
                    if (c.scrollHeight > c.offsetHeight) {
                        obj = this._get_node(obj);
                        if (!obj || obj === -1 || !obj.length || !obj.is(":visible")) {
                            return;
                        }
                        t = obj.offset().top - this.get_container().offset().top;
                        if (t < 0) {
                            c.scrollTop = c.scrollTop + t - 1;
                        }
                        if (t + this.data.core.li_height + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0) > c.offsetHeight) {
                            c.scrollTop = c.scrollTop + (t - c.offsetHeight + this.data.core.li_height + 1 + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0));
                        }
                    }
                },
                deselect_node:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    if (this.is_selected(obj)) {
                        obj.children("a").removeClass("jstree-clicked");
                        this.data.ui.selected = this.data.ui.selected.not(obj);
                        if (this.data.ui.last_selected.get(0) === obj.get(0)) {
                            this.data.ui.last_selected = this.data.ui.selected.eq(0);
                        }
                        this.__callback({ "obj":obj });
                    }
                },
                toggle_select:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return false;
                    }
                    if (this.is_selected(obj)) {
                        this.deselect_node(obj);
                    }
                    else {
                        this.select_node(obj);
                    }
                },
                is_selected:function (obj) {
                    return this.data.ui.selected.index(this._get_node(obj)) >= 0;
                },
                get_selected:function (context) {
                    return context ? $(context).find("a.jstree-clicked").parent() : this.data.ui.selected;
                },
                deselect_all:function (context) {
                    var ret = context ? $(context).find("a.jstree-clicked").parent() : this.get_container().find("a.jstree-clicked").parent();
                    ret.children("a.jstree-clicked").removeClass("jstree-clicked");
                    this.data.ui.selected = $([]);
                    this.data.ui.last_selected = false;
                    this.__callback({ "obj":ret });
                }
            }
        });
        // include the selection plugin by default
        $.jstree.defaults.plugins.push("ui");
    })(jQuery);
//*/

    /* 
     * jsTree CRRM plugin
     * Handles creating/renaming/removing/moving nodes by user interaction.
     */
    (function ($) {
        $.jstree.plugin("crrm", {
            __init:function () {
                this.get_container()
                    .bind("move_node.jstree", $.proxy(function (e, data) {
                    if (this._get_settings().crrm.move.open_onmove) {
                        var t = this;
                        data.rslt.np.parentsUntil(".jstree").andSelf().filter(".jstree-closed").each(function () {
                            t.open_node(this, false, true);
                        });
                    }
                }, this));
            },
            defaults:{
                input_width_limit:200,
                move:{
                    always_copy:false, // false, true or "multitree"
                    open_onmove:true,
                    default_position:"last",
                    check_move:function (m) {
                        return true;
                    }
                }
            },
            _fn:{
                _show_input:function (obj, callback) {
                    obj = this._get_node(obj);
                    var rtl = this._get_settings().core.rtl,
                        w = this._get_settings().crrm.input_width_limit,
                        w1 = obj.children("ins").width(),
                        w2 = obj.find("> a:visible > ins").width() * obj.find("> a:visible > ins").length,
                        t = this.get_text(obj),
                        h1 = $("<div />", { css:{ "position":"absolute", "top":"-200px", "left":(rtl ? "0px" : "-1000px"), "visibility":"hidden" } }).appendTo("body"),
                        h2 = obj.css("position", "relative").append(
                            $("<input />", {
                                "value":t,
                                "class":"jstree-rename-input",
                                // "size" : t.length,
                                "css":{
                                    "padding":"0",
                                    "border":"1px solid silver",
                                    "position":"absolute",
                                    "left":(rtl ? "auto" : (w1 + w2 + 4) + "px"),
                                    "right":(rtl ? (w1 + w2 + 4) + "px" : "auto"),
                                    "top":"0px",
                                    "height":(this.data.core.li_height - 2) + "px",
                                    "lineHeight":(this.data.core.li_height - 2) + "px",
                                    "width":"150px" // will be set a bit further down
                                },
                                "blur":$.proxy(function () {
                                    var i = obj.children(".jstree-rename-input"),
                                        v = i.val();
                                    if (v === "") {
                                        v = t;
                                    }
                                    h1.remove();
                                    i.remove(); // rollback purposes
                                    this.set_text(obj, t); // rollback purposes
                                    this.rename_node(obj, v);
                                    callback.call(this, obj, v, t);
                                    obj.css("position", "");
                                }, this),
                                "keyup":function (event) {
                                    var key = event.keyCode || event.which;
                                    if (key == 27) {
                                        this.value = t;
                                        this.blur();
                                        return;
                                    }
                                    else if (key == 13) {
                                        this.blur();
                                        return;
                                    }
                                    else {
                                        h2.width(Math.min(h1.text("pW" + this.value).width(), w));
                                    }
                                },
                                "keypress":function (event) {
                                    var key = event.keyCode || event.which;
                                    if (key == 13) {
                                        return false;
                                    }
                                }
                            })
                        ).children(".jstree-rename-input");
                    this.set_text(obj, "");
                    h1.css({
                        fontFamily:h2.css('fontFamily') || '',
                        fontSize:h2.css('fontSize') || '',
                        fontWeight:h2.css('fontWeight') || '',
                        fontStyle:h2.css('fontStyle') || '',
                        fontStretch:h2.css('fontStretch') || '',
                        fontVariant:h2.css('fontVariant') || '',
                        letterSpacing:h2.css('letterSpacing') || '',
                        wordSpacing:h2.css('wordSpacing') || ''
                    });
                    h2.width(Math.min(h1.text("pW" + h2[0].value).width(), w))[0].select();
                },
                rename:function (obj) {
                    obj = this._get_node(obj);
                    this.__rollback();
                    var f = this.__callback;
                    this._show_input(obj, function (obj, new_name, old_name) {
                        f.call(this, { "obj":obj, "new_name":new_name, "old_name":old_name });
                    });
                },
                create:function (obj, position, js, callback, skip_rename) {
                    var t, _this = this;
                    obj = this._get_node(obj);
                    if (!obj) {
                        obj = -1;
                    }
                    this.__rollback();
                    t = this.create_node(obj, position, js, function (t) {
                        var p = this._get_parent(t),
                            pos = $(t).index();
                        if (callback) {
                            callback.call(this, t);
                        }
                        if (p.length && p.hasClass("jstree-closed")) {
                            this.open_node(p, false, true);
                        }
                        if (!skip_rename) {
                            this._show_input(t, function (obj, new_name, old_name) {
                                _this.__callback({ "obj":obj, "name":new_name, "parent":p, "position":pos });
                            });
                        }
                        else {
                            _this.__callback({ "obj":t, "name":this.get_text(t), "parent":p, "position":pos });
                        }
                    });
                    return t;
                },
                remove:function (obj) {
                    obj = this._get_node(obj, true);
                    var p = this._get_parent(obj), prev = this._get_prev(obj);
                    this.__rollback();
                    obj = this.delete_node(obj);
                    if (obj !== false) {
                        this.__callback({ "obj":obj, "prev":prev, "parent":p });
                    }
                },
                check_move:function () {
                    if (!this.__call_old()) {
                        return false;
                    }
                    var s = this._get_settings().crrm.move;
                    if (!s.check_move.call(this, this._get_move())) {
                        return false;
                    }
                    return true;
                },
                move_node:function (obj, ref, position, is_copy, is_prepared, skip_check) {
                    var s = this._get_settings().crrm.move;
                    if (!is_prepared) {
                        if (typeof position === "undefined") {
                            position = s.default_position;
                        }
                        if (position === "inside" && !s.default_position.match(/^(before|after)$/)) {
                            position = s.default_position;
                        }
                        return this.__call_old(true, obj, ref, position, is_copy, false, skip_check);
                    }
                    // if the move is already prepared
                    if (s.always_copy === true || (s.always_copy === "multitree" && obj.rt.get_index() !== obj.ot.get_index() )) {
                        is_copy = true;
                    }
                    this.__call_old(true, obj, ref, position, is_copy, true, skip_check);
                },

                cut:function (obj) {
                    obj = this._get_node(obj, true);
                    if (!obj || !obj.length) {
                        return false;
                    }
                    this.data.crrm.cp_nodes = false;
                    this.data.crrm.ct_nodes = obj;
                    this.__callback({ "obj":obj });
                },
                copy:function (obj) {
                    obj = this._get_node(obj, true);
                    if (!obj || !obj.length) {
                        return false;
                    }
                    this.data.crrm.ct_nodes = false;
                    this.data.crrm.cp_nodes = obj;
                    this.__callback({ "obj":obj });
                },
                paste:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj || !obj.length) {
                        return false;
                    }
                    var nodes = this.data.crrm.ct_nodes ? this.data.crrm.ct_nodes : this.data.crrm.cp_nodes;
                    if (!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) {
                        return false;
                    }
                    if (this.data.crrm.ct_nodes) {
                        this.move_node(this.data.crrm.ct_nodes, obj);
                        this.data.crrm.ct_nodes = false;
                    }
                    if (this.data.crrm.cp_nodes) {
                        this.move_node(this.data.crrm.cp_nodes, obj, false, true);
                    }
                    this.__callback({ "obj":obj, "nodes":nodes });
                }
            }
        });
        // include the crr plugin by default
        // $.jstree.defaults.plugins.push("crrm");
    })(jQuery);
//*/

    /* 
     * jsTree themes plugin
     * Handles loading and setting themes, as well as detecting path to themes, etc.
     */
    (function ($) {
        var themes_loaded = [];
        // this variable stores the path to the themes folder - if left as false - it will be autodetected
        $.jstree._themes = false;
        $.jstree.plugin("themes", {
            __init:function () {
                this.get_container()
                    .bind("init.jstree", $.proxy(function () {
                    var s = this._get_settings().themes;
                    this.data.themes.dots = s.dots;
                    this.data.themes.icons = s.icons;
                    this.set_theme(s.theme, s.url);
                }, this))
                    .bind("loaded.jstree", $.proxy(function () {
                    // bound here too, as simple HTML tree's won't honor dots & icons otherwise
                    if (!this.data.themes.dots) {
                        this.hide_dots();
                    }
                    else {
                        this.show_dots();
                    }
                    if (!this.data.themes.icons) {
                        this.hide_icons();
                    }
                    else {
                        this.show_icons();
                    }
                }, this));
            },
            defaults:{
                theme:"default",
                url:false,
                dots:true,
                icons:true
            },
            _fn:{
                set_theme:function (theme_name, theme_url) {
                    if (!theme_name) {
                        return false;
                    }
                    if (!theme_url) {
                        theme_url = $.jstree._themes + theme_name + '/style.css';
                    }
                    if ($.inArray(theme_url, themes_loaded) == -1) {
                        $.vakata.css.add_sheet({ "url":theme_url });
                        themes_loaded.push(theme_url);
                    }
                    if (this.data.themes.theme != theme_name) {
                        this.get_container().removeClass('jstree-' + this.data.themes.theme);
                        this.data.themes.theme = theme_name;
                    }
                    this.get_container().addClass('jstree-' + theme_name);
                    if (!this.data.themes.dots) {
                        this.hide_dots();
                    }
                    else {
                        this.show_dots();
                    }
                    if (!this.data.themes.icons) {
                        this.hide_icons();
                    }
                    else {
                        this.show_icons();
                    }
                    this.__callback();
                },
                get_theme:function () {
                    return this.data.themes.theme;
                },

                show_dots:function () {
                    this.data.themes.dots = true;
                    this.get_container().children("ul").removeClass("jstree-no-dots");
                },
                hide_dots:function () {
                    this.data.themes.dots = false;
                    this.get_container().children("ul").addClass("jstree-no-dots");
                },
                toggle_dots:function () {
                    if (this.data.themes.dots) {
                        this.hide_dots();
                    } else {
                        this.show_dots();
                    }
                },

                show_icons:function () {
                    this.data.themes.icons = true;
                    this.get_container().children("ul").removeClass("jstree-no-icons");
                },
                hide_icons:function () {
                    this.data.themes.icons = false;
                    this.get_container().children("ul").addClass("jstree-no-icons");
                },
                toggle_icons:function () {
                    if (this.data.themes.icons) {
                        this.hide_icons();
                    } else {
                        this.show_icons();
                    }
                }
            }
        });
        // autodetect themes path
        $(function () {
            if ($.jstree._themes === false) {
                $("script").each(function () {
                    if (this.src.toString().match(/jquery\.jstree[^\/]*?\.js(\?.*)?$/)) {
                        $.jstree._themes = this.src.toString().replace(/jquery\.jstree[^\/]*?\.js(\?.*)?$/, "") + 'themes/';
                        return false;
                    }
                });
            }
            if ($.jstree._themes === false) {
                $.jstree._themes = "themes/";
            }
        });
        // include the themes plugin by default
        $.jstree.defaults.plugins.push("themes");
    })(jQuery);
//*/

    /*
     * jsTree hotkeys plugin
     * Enables keyboard navigation for all tree instances
     * Depends on the jstree ui & jquery hotkeys plugins
     */
    (function ($) {
        var bound = [];

        function exec(i, event) {
            var f = $.jstree._focused(), tmp;
            if (f && f.data && f.data.hotkeys && f.data.hotkeys.enabled) {
                tmp = f._get_settings().hotkeys[i];
                if (tmp) {
                    return tmp.call(f, event);
                }
            }
        }

        $.jstree.plugin("hotkeys", {
            __init:function () {
                if (typeof $.hotkeys === "undefined") {
                    throw "jsTree hotkeys: jQuery hotkeys plugin not included.";
                }
                if (!this.data.ui) {
                    throw "jsTree hotkeys: jsTree UI plugin not included.";
                }
                $.each(this._get_settings().hotkeys, function (i, v) {
                    if (v !== false && $.inArray(i, bound) == -1) {
                        $(document).bind("keydown", i, function (event) {
                            return exec(i, event);
                        });
                        bound.push(i);
                    }
                });
                this.get_container()
                    .bind("lock.jstree", $.proxy(function () {
                    if (this.data.hotkeys.enabled) {
                        this.data.hotkeys.enabled = false;
                        this.data.hotkeys.revert = true;
                    }
                }, this))
                    .bind("unlock.jstree", $.proxy(function () {
                    if (this.data.hotkeys.revert) {
                        this.data.hotkeys.enabled = true;
                    }
                }, this));
                this.enable_hotkeys();
            },
            defaults:{
                "up":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_prev(o));
                    return false;
                },
                "ctrl+up":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_prev(o));
                    return false;
                },
                "shift+up":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_prev(o));
                    return false;
                },
                "down":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_next(o));
                    return false;
                },
                "ctrl+down":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_next(o));
                    return false;
                },
                "shift+down":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
                    this.hover_node(this._get_next(o));
                    return false;
                },
                "left":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o) {
                        if (o.hasClass("jstree-open")) {
                            this.close_node(o);
                        }
                        else {
                            this.hover_node(this._get_prev(o));
                        }
                    }
                    return false;
                },
                "ctrl+left":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o) {
                        if (o.hasClass("jstree-open")) {
                            this.close_node(o);
                        }
                        else {
                            this.hover_node(this._get_prev(o));
                        }
                    }
                    return false;
                },
                "shift+left":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o) {
                        if (o.hasClass("jstree-open")) {
                            this.close_node(o);
                        }
                        else {
                            this.hover_node(this._get_prev(o));
                        }
                    }
                    return false;
                },
                "right":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o && o.length) {
                        if (o.hasClass("jstree-closed")) {
                            this.open_node(o);
                        }
                        else {
                            this.hover_node(this._get_next(o));
                        }
                    }
                    return false;
                },
                "ctrl+right":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o && o.length) {
                        if (o.hasClass("jstree-closed")) {
                            this.open_node(o);
                        }
                        else {
                            this.hover_node(this._get_next(o));
                        }
                    }
                    return false;
                },
                "shift+right":function () {
                    var o = this.data.ui.hovered || this.data.ui.last_selected;
                    if (o && o.length) {
                        if (o.hasClass("jstree-closed")) {
                            this.open_node(o);
                        }
                        else {
                            this.hover_node(this._get_next(o));
                        }
                    }
                    return false;
                },
                "space":function () {
                    if (this.data.ui.hovered) {
                        this.data.ui.hovered.children("a:eq(0)").click();
                    }
                    return false;
                },
                "ctrl+space":function (event) {
                    event.type = "click";
                    if (this.data.ui.hovered) {
                        this.data.ui.hovered.children("a:eq(0)").trigger(event);
                    }
                    return false;
                },
                "shift+space":function (event) {
                    event.type = "click";
                    if (this.data.ui.hovered) {
                        this.data.ui.hovered.children("a:eq(0)").trigger(event);
                    }
                    return false;
                },
                "f2":function () {
                    this.rename(this.data.ui.hovered || this.data.ui.last_selected);
                },
                "del":function () {
                    this.remove(this.data.ui.hovered || this._get_node(null));
                }
            },
            _fn:{
                enable_hotkeys:function () {
                    this.data.hotkeys.enabled = true;
                },
                disable_hotkeys:function () {
                    this.data.hotkeys.enabled = false;
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree JSON plugin
     * The JSON data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
     */
    (function ($) {
        $.jstree.plugin("json_data", {
            __init:function () {
                var s = this._get_settings().json_data;
                if (s.progressive_unload) {
                    this.get_container().bind("after_close.jstree", function (e, data) {
                        data.rslt.obj.children("ul").remove();
                    });
                }
            },
            defaults:{
                // `data` can be a function:
                //  * accepts two arguments - node being loaded and a callback to pass the result to
                //  * will be executed in the current tree's scope & ajax won't be supported
                data:false,
                ajax:false,
                correct_state:true,
                progressive_render:false,
                progressive_unload:false
            },
            _fn:{
                load_node:function (obj, s_call, e_call) {
                    var _this = this;
                    this.load_node_json(obj, function () {
                        _this.__callback({ "obj":_this._get_node(obj) });
                        s_call.call(this);
                    }, e_call);
                },
                _is_loaded:function (obj) {
                    var s = this._get_settings().json_data;
                    obj = this._get_node(obj);
                    return obj == -1 || !obj || (!s.ajax && !s.progressive_render && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").length > 0;
                },
                refresh:function (obj) {
                    obj = this._get_node(obj);
                    var s = this._get_settings().json_data;
                    if (obj && obj !== -1 && s.progressive_unload && ($.isFunction(s.data) || !!s.ajax)) {
                        obj.removeData("jstree-children");
                    }
                    return this.__call_old();
                },
                load_node_json:function (obj, s_call, e_call) {
                    var s = this.get_settings().json_data, d,
                        error_func = function () {
                        },
                        success_func = function () {
                        };
                    obj = this._get_node(obj);

                    if (obj && obj !== -1 && (s.progressive_render || s.progressive_unload) && !obj.is(".jstree-open, .jstree-leaf") && obj.children("ul").children("li").length === 0 && obj.data("jstree-children")) {
                        d = this._parse_json(obj.data("jstree-children"), obj);
                        if (d) {
                            obj.append(d);
                            if (!s.progressive_unload) {
                                obj.removeData("jstree-children");
                            }
                        }
                        this.clean_node(obj);
                        if (s_call) {
                            s_call.call(this);
                        }
                        return;
                    }

                    if (obj && obj !== -1) {
                        if (obj.data("jstree-is-loading")) {
                            return;
                        }
                        else {
                            obj.data("jstree-is-loading", true);
                        }
                    }
                    switch (!0) {
                        case (!s.data && !s.ajax):
                            throw "Neither data nor ajax settings supplied.";
                        // function option added here for easier model integration (also supporting async - see callback)
                        case ($.isFunction(s.data)):
                            s.data.call(this, obj, $.proxy(function (d) {
                                d = this._parse_json(d, obj);
                                if (!d) {
                                    if (obj === -1 || !obj) {
                                        if (s.correct_state) {
                                            this.get_container().children("ul").empty();
                                        }
                                    }
                                    else {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                        if (s.correct_state) {
                                            this.correct_state(obj);
                                        }
                                    }
                                    if (e_call) {
                                        e_call.call(this);
                                    }
                                }
                                else {
                                    if (obj === -1 || !obj) {
                                        this.get_container().children("ul").empty().append(d.children());
                                    }
                                    else {
                                        obj.append(d).children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                    }
                                    this.clean_node(obj);
                                    if (s_call) {
                                        s_call.call(this);
                                    }
                                }
                            }, this));
                            break;
                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
                            if (!obj || obj == -1) {
                                d = this._parse_json(s.data, obj);
                                if (d) {
                                    this.get_container().children("ul").empty().append(d.children());
                                    this.clean_node();
                                }
                                else {
                                    if (s.correct_state) {
                                        this.get_container().children("ul").empty();
                                    }
                                }
                            }
                            if (s_call) {
                                s_call.call(this);
                            }
                            break;
                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
                            error_func = function (x, t, e) {
                                var ef = this.get_settings().json_data.ajax.error;
                                if (ef) {
                                    ef.call(this, x, t, e);
                                }
                                if (obj != -1 && obj.length) {
                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
                                    obj.removeData("jstree-is-loading");
                                    if (t === "success" && s.correct_state) {
                                        this.correct_state(obj);
                                    }
                                }
                                else {
                                    if (t === "success" && s.correct_state) {
                                        this.get_container().children("ul").empty();
                                    }
                                }
                                if (e_call) {
                                    e_call.call(this);
                                }
                            };
                            success_func = function (d, t, x) {
                                var sf = this.get_settings().json_data.ajax.success;
                                if (sf) {
                                    d = sf.call(this, d, t, x) || d;
                                }
                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "") || (!$.isArray(d) && !$.isPlainObject(d))) {
                                    return error_func.call(this, x, t, "");
                                }
                                d = this._parse_json(d, obj);
                                if (d) {
                                    if (obj === -1 || !obj) {
                                        this.get_container().children("ul").empty().append(d.children());
                                    }
                                    else {
                                        obj.append(d).children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                    }
                                    this.clean_node(obj);
                                    if (s_call) {
                                        s_call.call(this);
                                    }
                                }
                                else {
                                    if (obj === -1 || !obj) {
                                        if (s.correct_state) {
                                            this.get_container().children("ul").empty();
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                    else {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                        if (s.correct_state) {
                                            this.correct_state(obj);
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                }
                            };
                            s.ajax.context = this;
                            s.ajax.error = error_func;
                            s.ajax.success = success_func;
                            if (!s.ajax.dataType) {
                                s.ajax.dataType = "json";
                            }
                            if ($.isFunction(s.ajax.url)) {
                                s.ajax.url = s.ajax.url.call(this, obj);
                            }
                            if ($.isFunction(s.ajax.data)) {
                                s.ajax.data = s.ajax.data.call(this, obj);
                            }
                            $.ajax(s.ajax);
                            break;
                    }
                },
                _parse_json:function (js, obj, is_callback) {
                    var d = false,
                        p = this._get_settings(),
                        s = p.json_data,
                        t = p.core.html_titles,
                        tmp, i, j, ul1, ul2;

                    if (!js) {
                        return d;
                    }
                    if (s.progressive_unload && obj && obj !== -1) {
                        obj.data("jstree-children", d);
                    }
                    if ($.isArray(js)) {
                        d = $();
                        if (!js.length) {
                            return false;
                        }
                        for (i = 0, j = js.length; i < j; i++) {
                            tmp = this._parse_json(js[i], obj, true);
                            if (tmp.length) {
                                d = d.add(tmp);
                            }
                        }
                    }
                    else {
                        if (typeof js == "string") {
                            js = { data:js };
                        }
                        if (!js.data && js.data !== "") {
                            return d;
                        }
                        d = $("<li />");
                        if (js.attr) {
                            d.attr(js.attr);
                        }
                        if (js.metadata) {
                            d.data(js.metadata);
                        }
                        if (js.state) {
                            d.addClass("jstree-" + js.state);
                        }
                        if (!$.isArray(js.data)) {
                            tmp = js.data;
                            js.data = [];
                            js.data.push(tmp);
                        }
                        $.each(js.data, function (i, m) {
                            tmp = $("<a />");
                            if ($.isFunction(m)) {
                                m = m.call(this, js);
                            }
                            if (typeof m == "string") {
                                tmp.attr('href', '#')[ t ? "html" : "text" ](m);
                            }
                            else {
                                if (!m.attr) {
                                    m.attr = {};
                                }
                                if (!m.attr.href) {
                                    m.attr.href = '#';
                                }
                                tmp.attr(m.attr)[ t ? "html" : "text" ](m.title);
                                if (m.language) {
                                    tmp.addClass(m.language);
                                }
                            }
                            tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
                            if (!m.icon && js.icon) {
                                m.icon = js.icon;
                            }
                            if (m.icon) {
                                if (m.icon.indexOf("/") === -1) {
                                    tmp.children("ins").addClass(m.icon);
                                }
                                else {
                                    tmp.children("ins").css("background", "url('" + m.icon + "') center center no-repeat");
                                }
                            }
                            d.append(tmp);
                        });
                        d.prepend("<ins class='jstree-icon'>&#160;</ins>");
                        if (js.children) {
                            if (s.progressive_render && js.state !== "open") {
                                d.addClass("jstree-closed").data("jstree-children", js.children);
                            }
                            else {
                                if (s.progressive_unload) {
                                    d.data("jstree-children", js.children);
                                }
                                if ($.isArray(js.children) && js.children.length) {
                                    tmp = this._parse_json(js.children, obj, true);
                                    if (tmp.length) {
                                        ul2 = $("<ul />");
                                        ul2.append(tmp);
                                        d.append(ul2);
                                    }
                                }
                            }
                        }
                    }
                    if (!is_callback) {
                        ul1 = $("<ul />");
                        ul1.append(d);
                        d = ul1;
                    }
                    return d;
                },
                get_json:function (obj, li_attr, a_attr, is_callback) {
                    var result = [],
                        s = this._get_settings(),
                        _this = this,
                        tmp1, tmp2, li, a, t, lang;
                    obj = this._get_node(obj);
                    if (!obj || obj === -1) {
                        obj = this.get_container().find("> ul > li");
                    }
                    li_attr = $.isArray(li_attr) ? li_attr : [ "id", "class" ];
                    if (!is_callback && this.data.types) {
                        li_attr.push(s.types.type_attr);
                    }
                    a_attr = $.isArray(a_attr) ? a_attr : [ ];

                    obj.each(function () {
                        li = $(this);
                        tmp1 = { data:[] };
                        if (li_attr.length) {
                            tmp1.attr = { };
                        }
                        $.each(li_attr, function (i, v) {
                            tmp2 = li.attr(v);
                            if (tmp2 && tmp2.length && tmp2.replace(/jstree[^ ]*/ig, '').length) {
                                tmp1.attr[v] = (" " + tmp2).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
                            }
                        });
                        if (li.hasClass("jstree-open")) {
                            tmp1.state = "open";
                        }
                        if (li.hasClass("jstree-closed")) {
                            tmp1.state = "closed";
                        }
                        if (li.data()) {
                            tmp1.metadata = li.data();
                        }
                        a = li.children("a");
                        a.each(function () {
                            t = $(this);
                            if (
                                a_attr.length ||
                                    $.inArray("languages", s.plugins) !== -1 ||
                                    t.children("ins").get(0).style.backgroundImage.length ||
                                    (t.children("ins").get(0).className && t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').length)
                                ) {
                                lang = false;
                                if ($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
                                    $.each(s.languages, function (l, lv) {
                                        if (t.hasClass(lv)) {
                                            lang = lv;
                                            return false;
                                        }
                                    });
                                }
                                tmp2 = { attr:{ }, title:_this.get_text(t, lang) };
                                $.each(a_attr, function (k, z) {
                                    tmp2.attr[z] = (" " + (t.attr(z) || "")).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
                                });
                                if ($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
                                    $.each(s.languages, function (k, z) {
                                        if (t.hasClass(z)) {
                                            tmp2.language = z;
                                            return true;
                                        }
                                    });
                                }
                                if (t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\s+$/ig, "").length) {
                                    tmp2.icon = t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
                                }
                                if (t.children("ins").get(0).style.backgroundImage.length) {
                                    tmp2.icon = t.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "");
                                }
                            }
                            else {
                                tmp2 = _this.get_text(t);
                            }
                            if (a.length > 1) {
                                tmp1.data.push(tmp2);
                            }
                            else {
                                tmp1.data = tmp2;
                            }
                        });
                        li = li.find("> ul > li");
                        if (li.length) {
                            tmp1.children = _this.get_json(li, li_attr, a_attr, true);
                        }
                        result.push(tmp1);
                    });
                    return result;
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree languages plugin
     * Adds support for multiple language versions in one tree
     * This basically allows for many titles coexisting in one node, but only one of them being visible at any given time
     * This is useful for maintaining the same structure in many languages (hence the name of the plugin)
     */
    (function ($) {
        $.jstree.plugin("languages", {
            __init:function () {
                this._load_css();
            },
            defaults:[],
            _fn:{
                set_lang:function (i) {
                    var langs = this._get_settings().languages,
                        st = false,
                        selector = ".jstree-" + this.get_index() + ' a';
                    if (!$.isArray(langs) || langs.length === 0) {
                        return false;
                    }
                    if ($.inArray(i, langs) == -1) {
                        if (!!langs[i]) {
                            i = langs[i];
                        }
                        else {
                            return false;
                        }
                    }
                    if (i == this.data.languages.current_language) {
                        return true;
                    }
                    st = $.vakata.css.get_css(selector + "." + this.data.languages.current_language, false, this.data.languages.language_css);
                    if (st !== false) {
                        st.style.display = "none";
                    }
                    st = $.vakata.css.get_css(selector + "." + i, false, this.data.languages.language_css);
                    if (st !== false) {
                        st.style.display = "";
                    }
                    this.data.languages.current_language = i;
                    this.__callback(i);
                    return true;
                },
                get_lang:function () {
                    return this.data.languages.current_language;
                },
                _get_string:function (key, lang) {
                    var langs = this._get_settings().languages,
                        s = this._get_settings().core.strings;
                    if ($.isArray(langs) && langs.length) {
                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
                    }
                    if (s[lang] && s[lang][key]) {
                        return s[lang][key];
                    }
                    if (s[key]) {
                        return s[key];
                    }
                    return key;
                },
                get_text:function (obj, lang) {
                    obj = this._get_node(obj) || this.data.ui.last_selected;
                    if (!obj.size()) {
                        return false;
                    }
                    var langs = this._get_settings().languages,
                        s = this._get_settings().core.html_titles;
                    if ($.isArray(langs) && langs.length) {
                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
                        obj = obj.children("a." + lang);
                    }
                    else {
                        obj = obj.children("a:eq(0)");
                    }
                    if (s) {
                        obj = obj.clone();
                        obj.children("INS").remove();
                        return obj.html();
                    }
                    else {
                        obj = obj.contents().filter(function () {
                            return this.nodeType == 3;
                        })[0];
                        return obj.nodeValue;
                    }
                },
                set_text:function (obj, val, lang) {
                    obj = this._get_node(obj) || this.data.ui.last_selected;
                    if (!obj.size()) {
                        return false;
                    }
                    var langs = this._get_settings().languages,
                        s = this._get_settings().core.html_titles,
                        tmp;
                    if ($.isArray(langs) && langs.length) {
                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
                        obj = obj.children("a." + lang);
                    }
                    else {
                        obj = obj.children("a:eq(0)");
                    }
                    if (s) {
                        tmp = obj.children("INS").clone();
                        obj.html(val).prepend(tmp);
                        this.__callback({ "obj":obj, "name":val, "lang":lang });
                        return true;
                    }
                    else {
                        obj = obj.contents().filter(function () {
                            return this.nodeType == 3;
                        })[0];
                        this.__callback({ "obj":obj, "name":val, "lang":lang });
                        return (obj.nodeValue = val);
                    }
                },
                _load_css:function () {
                    var langs = this._get_settings().languages,
                        str = "/* languages css */",
                        selector = ".jstree-" + this.get_index() + ' a',
                        ln;
                    if ($.isArray(langs) && langs.length) {
                        this.data.languages.current_language = langs[0];
                        for (ln = 0; ln < langs.length; ln++) {
                            str += selector + "." + langs[ln] + " {";
                            if (langs[ln] != this.data.languages.current_language) {
                                str += " display:none; ";
                            }
                            str += " } ";
                        }
                        this.data.languages.language_css = $.vakata.css.add_sheet({ 'str':str, 'title':"jstree-languages" });
                    }
                },
                create_node:function (obj, position, js, callback) {
                    var t = this.__call_old(true, obj, position, js, function (t) {
                        var langs = this._get_settings().languages,
                            a = t.children("a"),
                            ln;
                        if ($.isArray(langs) && langs.length) {
                            for (ln = 0; ln < langs.length; ln++) {
                                if (!a.is("." + langs[ln])) {
                                    t.append(a.eq(0).clone().removeClass(langs.join(" ")).addClass(langs[ln]));
                                }
                            }
                            a.not("." + langs.join(", .")).remove();
                        }
                        if (callback) {
                            callback.call(this, t);
                        }
                    });
                    return t;
                }
            }
        });
    })(jQuery);
//*/

    /*
     * jsTree cookies plugin
     * Stores the currently opened/selected nodes in a cookie and then restores them
     * Depends on the jquery.cookie plugin
     */
    (function ($) {
        $.jstree.plugin("cookies", {
            __init:function () {
                if (typeof $.cookie === "undefined") {
                    throw "jsTree cookie: jQuery cookie plugin not included.";
                }

                var s = this._get_settings().cookies,
                    tmp;
                if (!!s.save_loaded) {
                    tmp = $.cookie(s.save_loaded);
                    if (tmp && tmp.length) {
                        this.data.core.to_load = tmp.split(",");
                    }
                }
                if (!!s.save_opened) {
                    tmp = $.cookie(s.save_opened);
                    if (tmp && tmp.length) {
                        this.data.core.to_open = tmp.split(",");
                    }
                }
                if (!!s.save_selected) {
                    tmp = $.cookie(s.save_selected);
                    if (tmp && tmp.length && this.data.ui) {
                        this.data.ui.to_select = tmp.split(",");
                    }
                }
                this.get_container()
                    .one(( this.data.ui ? "reselect" : "reopen" ) + ".jstree", $.proxy(function () {
                    this.get_container()
                        .bind("open_node.jstree close_node.jstree select_node.jstree deselect_node.jstree", $.proxy(function (e) {
                        if (this._get_settings().cookies.auto_save) {
                            this.save_cookie((e.handleObj.namespace + e.handleObj.type).replace("jstree", ""));
                        }
                    }, this));
                }, this));
            },
            defaults:{
                save_loaded:"jstree_load",
                save_opened:"jstree_open",
                save_selected:"jstree_select",
                auto_save:true,
                cookie_options:{}
            },
            _fn:{
                save_cookie:function (c) {
                    if (this.data.core.refreshing) {
                        return;
                    }
                    var s = this._get_settings().cookies;
                    if (!c) { // if called manually and not by event
                        if (s.save_loaded) {
                            this.save_loaded();
                            $.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options);
                        }
                        if (s.save_opened) {
                            this.save_opened();
                            $.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options);
                        }
                        if (s.save_selected && this.data.ui) {
                            this.save_selected();
                            $.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options);
                        }
                        return;
                    }
                    switch (c) {
                        case "open_node":
                        case "close_node":
                            if (!!s.save_opened) {
                                this.save_opened();
                                $.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options);
                            }
                            if (!!s.save_loaded) {
                                this.save_loaded();
                                $.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options);
                            }
                            break;
                        case "select_node":
                        case "deselect_node":
                            if (!!s.save_selected && this.data.ui) {
                                this.save_selected();
                                $.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options);
                            }
                            break;
                    }
                }
            }
        });
        // include cookies by default
        // $.jstree.defaults.plugins.push("cookies");
    })(jQuery);
//*/

    /*
     * jsTree sort plugin
     * Sorts items alphabetically (or using any other function)
     */
    (function ($) {
        $.jstree.plugin("sort", {
            __init:function () {
                this.get_container()
                    .bind("load_node.jstree", $.proxy(function (e, data) {
                    var obj = this._get_node(data.rslt.obj);
                    obj = obj === -1 ? this.get_container().children("ul") : obj.children("ul");
                    this.sort(obj);
                }, this))
                    .bind("rename_node.jstree create_node.jstree create.jstree", $.proxy(function (e, data) {
                    this.sort(data.rslt.obj.parent());
                }, this))
                    .bind("move_node.jstree", $.proxy(function (e, data) {
                    var m = data.rslt.np == -1 ? this.get_container() : data.rslt.np;
                    this.sort(m.children("ul"));
                }, this));
            },
            defaults:function (a, b) {
                return this.get_text(a) > this.get_text(b) ? 1 : -1;
            },
            _fn:{
                sort:function (obj) {
                    var s = this._get_settings().sort,
                        t = this;
                    obj.append($.makeArray(obj.children("li")).sort($.proxy(s, t)));
                    obj.find("> li > ul").each(function () {
                        t.sort($(this));
                    });
                    this.clean_node(obj);
                }
            }
        });
    })(jQuery);
//*/

    /*
     * jsTree DND plugin
     * Drag and drop plugin for moving/copying nodes
     */
    (function ($) {
        var o = false,
            r = false,
            m = false,
            ml = false,
            sli = false,
            sti = false,
            dir1 = false,
            dir2 = false,
            last_pos = false;
        $.vakata.dnd = {
            is_down:false,
            is_drag:false,
            helper:false,
            scroll_spd:10,
            init_x:0,
            init_y:0,
            threshold:5,
            helper_left:5,
            helper_top:10,
            user_data:{},

            drag_start:function (e, data, html) {
                if ($.vakata.dnd.is_drag) {
                    $.vakata.drag_stop({});
                }
                try {
                    e.currentTarget.unselectable = "on";
                    e.currentTarget.onselectstart = function () {
                        return false;
                    };
                    if (e.currentTarget.style) {
                        e.currentTarget.style.MozUserSelect = "none";
                    }
                } catch (err) {
                }
                $.vakata.dnd.init_x = e.pageX;
                $.vakata.dnd.init_y = e.pageY;
                $.vakata.dnd.user_data = data;
                $.vakata.dnd.is_down = true;
                $.vakata.dnd.helper = $("<div id='vakata-dragged' />").html(html); //.fadeTo(10,0.25);
                $(document).bind("mousemove", $.vakata.dnd.drag);
                $(document).bind("mouseup", $.vakata.dnd.drag_stop);
                return false;
            },
            drag:function (e) {
                if (!$.vakata.dnd.is_down) {
                    return;
                }
                if (!$.vakata.dnd.is_drag) {
                    if (Math.abs(e.pageX - $.vakata.dnd.init_x) > 5 || Math.abs(e.pageY - $.vakata.dnd.init_y) > 5) {
                        $.vakata.dnd.helper.appendTo("body");
                        $.vakata.dnd.is_drag = true;
                        $(document).triggerHandler("drag_start.vakata", { "event":e, "data":$.vakata.dnd.user_data });
                    }
                    else {
                        return;
                    }
                }

                // maybe use a scrolling parent element instead of document?
                if (e.type === "mousemove") { // thought of adding scroll in order to move the helper, but mouse poisition is n/a
                    var d = $(document), t = d.scrollTop(), l = d.scrollLeft();
                    if (e.pageY - t < 20) {
                        if (sti && dir1 === "down") {
                            clearInterval(sti);
                            sti = false;
                        }
                        if (!sti) {
                            dir1 = "up";
                            sti = setInterval(function () {
                                $(document).scrollTop($(document).scrollTop() - $.vakata.dnd.scroll_spd);
                            }, 150);
                        }
                    }
                    else {
                        if (sti && dir1 === "up") {
                            clearInterval(sti);
                            sti = false;
                        }
                    }
                    if ($(window).height() - (e.pageY - t) < 20) {
                        if (sti && dir1 === "up") {
                            clearInterval(sti);
                            sti = false;
                        }
                        if (!sti) {
                            dir1 = "down";
                            sti = setInterval(function () {
                                $(document).scrollTop($(document).scrollTop() + $.vakata.dnd.scroll_spd);
                            }, 150);
                        }
                    }
                    else {
                        if (sti && dir1 === "down") {
                            clearInterval(sti);
                            sti = false;
                        }
                    }

                    if (e.pageX - l < 20) {
                        if (sli && dir2 === "right") {
                            clearInterval(sli);
                            sli = false;
                        }
                        if (!sli) {
                            dir2 = "left";
                            sli = setInterval(function () {
                                $(document).scrollLeft($(document).scrollLeft() - $.vakata.dnd.scroll_spd);
                            }, 150);
                        }
                    }
                    else {
                        if (sli && dir2 === "left") {
                            clearInterval(sli);
                            sli = false;
                        }
                    }
                    if ($(window).width() - (e.pageX - l) < 20) {
                        if (sli && dir2 === "left") {
                            clearInterval(sli);
                            sli = false;
                        }
                        if (!sli) {
                            dir2 = "right";
                            sli = setInterval(function () {
                                $(document).scrollLeft($(document).scrollLeft() + $.vakata.dnd.scroll_spd);
                            }, 150);
                        }
                    }
                    else {
                        if (sli && dir2 === "right") {
                            clearInterval(sli);
                            sli = false;
                        }
                    }
                }

                $.vakata.dnd.helper.css({ left:(e.pageX + $.vakata.dnd.helper_left) + "px", top:(e.pageY + $.vakata.dnd.helper_top) + "px" });
                $(document).triggerHandler("drag.vakata", { "event":e, "data":$.vakata.dnd.user_data });
            },
            drag_stop:function (e) {
                if (sli) {
                    clearInterval(sli);
                }
                if (sti) {
                    clearInterval(sti);
                }
                $(document).unbind("mousemove", $.vakata.dnd.drag);
                $(document).unbind("mouseup", $.vakata.dnd.drag_stop);
                $(document).triggerHandler("drag_stop.vakata", { "event":e, "data":$.vakata.dnd.user_data });
                $.vakata.dnd.helper.remove();
                $.vakata.dnd.init_x = 0;
                $.vakata.dnd.init_y = 0;
                $.vakata.dnd.user_data = {};
                $.vakata.dnd.is_down = false;
                $.vakata.dnd.is_drag = false;
            }
        };
        $(function () {
            var css_string = '#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } ';
            $.vakata.css.add_sheet({ str:css_string, title:"vakata" });
        });

        $.jstree.plugin("dnd", {
            __init:function () {
                this.data.dnd = {
                    active:false,
                    after:false,
                    inside:false,
                    before:false,
                    off:false,
                    prepared:false,
                    w:0,
                    to1:false,
                    to2:false,
                    cof:false,
                    cw:false,
                    ch:false,
                    i1:false,
                    i2:false,
                    mto:false
                };
                this.get_container()
                    .bind("mouseenter.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        if (this.data.themes) {
                            m.attr("class", "jstree-" + this.data.themes.theme);
                            if (ml) {
                                ml.attr("class", "jstree-" + this.data.themes.theme);
                            }
                            $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
                        }
                        //if($(e.currentTarget).find("> ul > li").length === 0) {
                        if (e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
                            var tr = $.jstree._reference(e.target), dc;
                            if (tr.data.dnd.foreign) {
                                dc = tr._get_settings().dnd.drag_check.call(this, { "o":o, "r":tr.get_container(), is_root:true });
                                if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {
                                    $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
                                }
                            }
                            else {
                                tr.prepare_move(o, tr.get_container(), "last");
                                if (tr.check_move()) {
                                    $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
                                }
                            }
                        }
                    }
                }, this))
                    .bind("mouseup.jstree", $.proxy(function (e) {
                    //if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && $(e.currentTarget).find("> ul > li").length === 0) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
                        var tr = $.jstree._reference(e.currentTarget), dc;
                        if (tr.data.dnd.foreign) {
                            dc = tr._get_settings().dnd.drag_check.call(this, { "o":o, "r":tr.get_container(), is_root:true });
                            if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {
                                tr._get_settings().dnd.drag_finish.call(this, { "o":o, "r":tr.get_container(), is_root:true });
                            }
                        }
                        else {
                            tr.move_node(o, tr.get_container(), "last", e[tr._get_settings().dnd.copy_modifier + "Key"]);
                        }
                    }
                }, this))
                    .bind("mouseleave.jstree", $.proxy(function (e) {
                    if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
                        return false;
                    }
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        if (this.data.dnd.i1) {
                            clearInterval(this.data.dnd.i1);
                        }
                        if (this.data.dnd.i2) {
                            clearInterval(this.data.dnd.i2);
                        }
                        if (this.data.dnd.to1) {
                            clearTimeout(this.data.dnd.to1);
                        }
                        if (this.data.dnd.to2) {
                            clearTimeout(this.data.dnd.to2);
                        }
                        if ($.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                        }
                    }
                }, this))
                    .bind("mousemove.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        var cnt = this.get_container()[0];

                        // Horizontal scroll
                        if (e.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) {
                            if (this.data.dnd.i1) {
                                clearInterval(this.data.dnd.i1);
                            }
                            this.data.dnd.i1 = setInterval($.proxy(function () {
                                this.scrollLeft += $.vakata.dnd.scroll_spd;
                            }, cnt), 100);
                        }
                        else if (e.pageX - 24 < this.data.dnd.cof.left) {
                            if (this.data.dnd.i1) {
                                clearInterval(this.data.dnd.i1);
                            }
                            this.data.dnd.i1 = setInterval($.proxy(function () {
                                this.scrollLeft -= $.vakata.dnd.scroll_spd;
                            }, cnt), 100);
                        }
                        else {
                            if (this.data.dnd.i1) {
                                clearInterval(this.data.dnd.i1);
                            }
                        }

                        // Vertical scroll
                        if (e.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) {
                            if (this.data.dnd.i2) {
                                clearInterval(this.data.dnd.i2);
                            }
                            this.data.dnd.i2 = setInterval($.proxy(function () {
                                this.scrollTop += $.vakata.dnd.scroll_spd;
                            }, cnt), 100);
                        }
                        else if (e.pageY - 24 < this.data.dnd.cof.top) {
                            if (this.data.dnd.i2) {
                                clearInterval(this.data.dnd.i2);
                            }
                            this.data.dnd.i2 = setInterval($.proxy(function () {
                                this.scrollTop -= $.vakata.dnd.scroll_spd;
                            }, cnt), 100);
                        }
                        else {
                            if (this.data.dnd.i2) {
                                clearInterval(this.data.dnd.i2);
                            }
                        }

                    }
                }, this))
                    .bind("scroll.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && m && ml) {
                        m.hide();
                        ml.hide();
                    }
                }, this))
                    .delegate("a", "mousedown.jstree", $.proxy(function (e) {
                    if (e.which === 1) {
                        this.start_drag(e.currentTarget, e);
                        return false;
                    }
                }, this))
                    .delegate("a", "mouseenter.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        this.dnd_enter(e.currentTarget);
                    }
                }, this))
                    .delegate("a", "mousemove.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        if (!r || !r.length || r.children("a")[0] !== e.currentTarget) {
                            this.dnd_enter(e.currentTarget);
                        }
                        if (typeof this.data.dnd.off.top === "undefined") {
                            this.data.dnd.off = $(e.target).offset();
                        }
                        this.data.dnd.w = (e.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height;
                        if (this.data.dnd.w < 0) {
                            this.data.dnd.w += this.data.core.li_height;
                        }
                        this.dnd_show();
                    }
                }, this))
                    .delegate("a", "mouseleave.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
                            return false;
                        }
                        if (m) {
                            m.hide();
                        }
                        if (ml) {
                            ml.hide();
                        }
                        /*
                         var ec = $(e.currentTarget).closest("li"), 
                         er = $(e.relatedTarget).closest("li");
                         if(er[0] !== ec.prev()[0] && er[0] !== ec.next()[0]) {
                         if(m) { m.hide(); }
                         if(ml) { ml.hide(); }
                         }
                         */
                        this.data.dnd.mto = setTimeout(
                            (function (t) {
                                return function () {
                                    t.dnd_leave(e);
                                };
                            })(this),
                            0);
                    }
                }, this))
                    .delegate("a", "mouseup.jstree", $.proxy(function (e) {
                    if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
                        this.dnd_finish(e);
                    }
                }, this));

                $(document)
                    .bind("drag_stop.vakata", $.proxy(function () {
                    if (this.data.dnd.to1) {
                        clearTimeout(this.data.dnd.to1);
                    }
                    if (this.data.dnd.to2) {
                        clearTimeout(this.data.dnd.to2);
                    }
                    if (this.data.dnd.i1) {
                        clearInterval(this.data.dnd.i1);
                    }
                    if (this.data.dnd.i2) {
                        clearInterval(this.data.dnd.i2);
                    }
                    this.data.dnd.after = false;
                    this.data.dnd.before = false;
                    this.data.dnd.inside = false;
                    this.data.dnd.off = false;
                    this.data.dnd.prepared = false;
                    this.data.dnd.w = false;
                    this.data.dnd.to1 = false;
                    this.data.dnd.to2 = false;
                    this.data.dnd.i1 = false;
                    this.data.dnd.i2 = false;
                    this.data.dnd.active = false;
                    this.data.dnd.foreign = false;
                    if (m) {
                        m.css({ "top":"-2000px" });
                    }
                    if (ml) {
                        ml.css({ "top":"-2000px" });
                    }
                }, this))
                    .bind("drag_start.vakata", $.proxy(function (e, data) {
                    if (data.data.jstree) {
                        var et = $(data.event.target);
                        if (et.closest(".jstree").hasClass("jstree-" + this.get_index())) {
                            this.dnd_enter(et);
                        }
                    }
                }, this));
                /*
                 .bind("keydown.jstree-" + this.get_index() + " keyup.jstree-" + this.get_index(), $.proxy(function(e) {
                 if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && !this.data.dnd.foreign) {
                 var h = $.vakata.dnd.helper.children("ins");
                 if(e[this._get_settings().dnd.copy_modifier + "Key"] && h.hasClass("jstree-ok")) {
                 h.parent().html(h.parent().html().replace(/ \(Copy\)$/, "") + " (Copy)");
                 } 
                 else {
                 h.parent().html(h.parent().html().replace(/ \(Copy\)$/, ""));
                 }
                 }
                 }, this)); */


                var s = this._get_settings().dnd;
                if (s.drag_target) {
                    $(document)
                        .delegate(s.drag_target, "mousedown.jstree-" + this.get_index(), $.proxy(function (e) {
                        o = e.target;
                        $.vakata.dnd.drag_start(e, { jstree:true, obj:e.target }, "<ins class='jstree-icon'></ins>" + $(e.target).text());
                        if (this.data.themes) {
                            if (m) {
                                m.attr("class", "jstree-" + this.data.themes.theme);
                            }
                            if (ml) {
                                ml.attr("class", "jstree-" + this.data.themes.theme);
                            }
                            $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
                        }
                        $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                        var cnt = this.get_container();
                        this.data.dnd.cof = cnt.offset();
                        this.data.dnd.cw = parseInt(cnt.width(), 10);
                        this.data.dnd.ch = parseInt(cnt.height(), 10);
                        this.data.dnd.foreign = true;
                        e.preventDefault();
                    }, this));
                }
                if (s.drop_target) {
                    $(document)
                        .delegate(s.drop_target, "mouseenter.jstree-" + this.get_index(), $.proxy(function (e) {
                        if (this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, { "o":o, "r":$(e.target), "e":e })) {
                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
                        }
                    }, this))
                        .delegate(s.drop_target, "mouseleave.jstree-" + this.get_index(), $.proxy(function (e) {
                        if (this.data.dnd.active) {
                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                        }
                    }, this))
                        .delegate(s.drop_target, "mouseup.jstree-" + this.get_index(), $.proxy(function (e) {
                        if (this.data.dnd.active && $.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
                            this._get_settings().dnd.drop_finish.call(this, { "o":o, "r":$(e.target), "e":e });
                        }
                    }, this));
                }
            },
            defaults:{
                copy_modifier:"ctrl",
                check_timeout:100,
                open_timeout:500,
                drop_target:".jstree-drop",
                drop_check:function (data) {
                    return true;
                },
                drop_finish:$.noop,
                drag_target:".jstree-draggable",
                drag_finish:$.noop,
                drag_check:function (data) {
                    return { after:false, before:false, inside:true };
                }
            },
            _fn:{
                dnd_prepare:function () {
                    if (!r || !r.length) {
                        return;
                    }
                    this.data.dnd.off = r.offset();
                    if (this._get_settings().core.rtl) {
                        this.data.dnd.off.right = this.data.dnd.off.left + r.width();
                    }
                    if (this.data.dnd.foreign) {
                        var a = this._get_settings().dnd.drag_check.call(this, { "o":o, "r":r });
                        this.data.dnd.after = a.after;
                        this.data.dnd.before = a.before;
                        this.data.dnd.inside = a.inside;
                        this.data.dnd.prepared = true;
                        return this.dnd_show();
                    }
                    this.prepare_move(o, r, "before");
                    this.data.dnd.before = this.check_move();
                    this.prepare_move(o, r, "after");
                    this.data.dnd.after = this.check_move();
                    if (this._is_loaded(r)) {
                        this.prepare_move(o, r, "inside");
                        this.data.dnd.inside = this.check_move();
                    }
                    else {
                        this.data.dnd.inside = false;
                    }
                    this.data.dnd.prepared = true;
                    return this.dnd_show();
                },
                dnd_show:function () {
                    if (!this.data.dnd.prepared) {
                        return;
                    }
                    var o = ["before", "inside", "after"],
                        r = false,
                        rtl = this._get_settings().core.rtl,
                        pos;
                    if (this.data.dnd.w < this.data.core.li_height / 3) {
                        o = ["before", "inside", "after"];
                    }
                    else if (this.data.dnd.w <= this.data.core.li_height * 2 / 3) {
                        o = this.data.dnd.w < this.data.core.li_height / 2 ? ["inside", "before", "after"] : ["inside", "after", "before"];
                    }
                    else {
                        o = ["after", "inside", "before"];
                    }
                    $.each(o, $.proxy(function (i, val) {
                        if (this.data.dnd[val]) {
                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
                            r = val;
                            return false;
                        }
                    }, this));
                    if (r === false) {
                        $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                    }

                    pos = rtl ? (this.data.dnd.off.right - 18) : (this.data.dnd.off.left + 10);
                    switch (r) {
                        case "before":
                            m.css({ "left":pos + "px", "top":(this.data.dnd.off.top - 6) + "px" }).show();
                            if (ml) {
                                ml.css({ "left":(pos + 8) + "px", "top":(this.data.dnd.off.top - 1) + "px" }).show();
                            }
                            break;
                        case "after":
                            m.css({ "left":pos + "px", "top":(this.data.dnd.off.top + this.data.core.li_height - 6) + "px" }).show();
                            if (ml) {
                                ml.css({ "left":(pos + 8) + "px", "top":(this.data.dnd.off.top + this.data.core.li_height - 1) + "px" }).show();
                            }
                            break;
                        case "inside":
                            m.css({ "left":pos + ( rtl ? -4 : 4) + "px", "top":(this.data.dnd.off.top + this.data.core.li_height / 2 - 5) + "px" }).show();
                            if (ml) {
                                ml.hide();
                            }
                            break;
                        default:
                            m.hide();
                            if (ml) {
                                ml.hide();
                            }
                            break;
                    }
                    last_pos = r;
                    return r;
                },
                dnd_open:function () {
                    this.data.dnd.to2 = false;
                    this.open_node(r, $.proxy(this.dnd_prepare, this), true);
                },
                dnd_finish:function (e) {
                    if (this.data.dnd.foreign) {
                        if (this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) {
                            this._get_settings().dnd.drag_finish.call(this, { "o":o, "r":r, "p":last_pos });
                        }
                    }
                    else {
                        this.dnd_prepare();
                        this.move_node(o, r, last_pos, e[this._get_settings().dnd.copy_modifier + "Key"]);
                    }
                    o = false;
                    r = false;
                    m.hide();
                    if (ml) {
                        ml.hide();
                    }
                },
                dnd_enter:function (obj) {
                    if (this.data.dnd.mto) {
                        clearTimeout(this.data.dnd.mto);
                        this.data.dnd.mto = false;
                    }
                    var s = this._get_settings().dnd;
                    this.data.dnd.prepared = false;
                    r = this._get_node(obj);
                    if (s.check_timeout) {
                        // do the calculations after a minimal timeout (users tend to drag quickly to the desired location)
                        if (this.data.dnd.to1) {
                            clearTimeout(this.data.dnd.to1);
                        }
                        this.data.dnd.to1 = setTimeout($.proxy(this.dnd_prepare, this), s.check_timeout);
                    }
                    else {
                        this.dnd_prepare();
                    }
                    if (s.open_timeout) {
                        if (this.data.dnd.to2) {
                            clearTimeout(this.data.dnd.to2);
                        }
                        if (r && r.length && r.hasClass("jstree-closed")) {
                            // if the node is closed - open it, then recalculate
                            this.data.dnd.to2 = setTimeout($.proxy(this.dnd_open, this), s.open_timeout);
                        }
                    }
                    else {
                        if (r && r.length && r.hasClass("jstree-closed")) {
                            this.dnd_open();
                        }
                    }
                },
                dnd_leave:function (e) {
                    this.data.dnd.after = false;
                    this.data.dnd.before = false;
                    this.data.dnd.inside = false;
                    $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                    m.hide();
                    if (ml) {
                        ml.hide();
                    }
                    if (r && r[0] === e.target.parentNode) {
                        if (this.data.dnd.to1) {
                            clearTimeout(this.data.dnd.to1);
                            this.data.dnd.to1 = false;
                        }
                        if (this.data.dnd.to2) {
                            clearTimeout(this.data.dnd.to2);
                            this.data.dnd.to2 = false;
                        }
                    }
                },
                start_drag:function (obj, e) {
                    o = this._get_node(obj);
                    if (this.data.ui && this.is_selected(o)) {
                        o = this._get_node(null, true);
                    }
                    var dt = o.length > 1 ? this._get_string("multiple_selection") : this.get_text(o),
                        cnt = this.get_container();
                    if (!this._get_settings().core.html_titles) {
                        dt = dt.replace(/</ig, "&lt;").replace(/>/ig, "&gt;");
                    }
                    $.vakata.dnd.drag_start(e, { jstree:true, obj:o }, "<ins class='jstree-icon'></ins>" + dt);
                    if (this.data.themes) {
                        if (m) {
                            m.attr("class", "jstree-" + this.data.themes.theme);
                        }
                        if (ml) {
                            ml.attr("class", "jstree-" + this.data.themes.theme);
                        }
                        $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
                    }
                    this.data.dnd.cof = cnt.offset();
                    this.data.dnd.cw = parseInt(cnt.width(), 10);
                    this.data.dnd.ch = parseInt(cnt.height(), 10);
                    this.data.dnd.active = true;
                }
            }
        });
        $(function () {
            var css_string = '' +
                '#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px; ' +
                ' -moz-border-radius:4px; border-radius:4px; -webkit-border-radius:4px; ' +
                '} ' +
                '#vakata-dragged .jstree-ok { background:green; } ' +
                '#vakata-dragged .jstree-invalid { background:red; } ' +
                '#jstree-marker { padding:0; margin:0; font-size:12px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10001; background-repeat:no-repeat; display:none; background-color:transparent; text-shadow:1px 1px 1px white; color:black; line-height:10px; } ' +
                '#jstree-marker-line { padding:0; margin:0; line-height:0%; font-size:1px; overflow:hidden; height:1px; width:100px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:#456c43; ' +
                ' cursor:pointer; border:1px solid #eeeeee; border-left:0; -moz-box-shadow: 0px 0px 2px #666; -webkit-box-shadow: 0px 0px 2px #666; box-shadow: 0px 0px 2px #666; ' +
                ' -moz-border-radius:1px; border-radius:1px; -webkit-border-radius:1px; ' +
                '}' +
                '';
            $.vakata.css.add_sheet({ str:css_string, title:"jstree" });
            m = $("<div />").attr({ id:"jstree-marker" }).hide().html("&raquo;")
                .bind("mouseleave mouseenter", function (e) {
                    m.hide();
                    ml.hide();
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return false;
                })
                .appendTo("body");
            ml = $("<div />").attr({ id:"jstree-marker-line" }).hide()
                .bind("mouseup", function (e) {
                    if (r && r.length) {
                        r.children("a").trigger(e);
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false;
                    }
                })
                .bind("mouseleave", function (e) {
                    var rt = $(e.relatedTarget);
                    if (rt.is(".jstree") || rt.closest(".jstree").length === 0) {
                        if (r && r.length) {
                            r.children("a").trigger(e);
                            m.hide();
                            ml.hide();
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                })
                .appendTo("body");
            $(document).bind("drag_start.vakata", function (e, data) {
                if (data.data.jstree) {
                    m.show();
                    if (ml) {
                        ml.show();
                    }
                }
            });
            $(document).bind("drag_stop.vakata", function (e, data) {
                if (data.data.jstree) {
                    m.hide();
                    if (ml) {
                        ml.hide();
                    }
                }
            });
        });
    })(jQuery);
//*/

    /*
     * jsTree checkbox plugin
     * Inserts checkboxes in front of every node
     * Depends on the ui plugin
     * DOES NOT WORK NICELY WITH MULTITREE DRAG'N'DROP
     */
    (function ($) {
        $.jstree.plugin("checkbox", {
            __init:function () {
                this.data.checkbox.noui = this._get_settings().checkbox.override_ui;
                if (this.data.ui && this.data.checkbox.noui) {
                    this.select_node = this.deselect_node = this.deselect_all = $.noop;
                    this.get_selected = this.get_checked;
                }

                this.get_container()
                    .bind("open_node.jstree create_node.jstree clean_node.jstree refresh.jstree", $.proxy(function (e, data) {
                    this._prepare_checkboxes(data.rslt.obj);
                }, this))
                    .bind("loaded.jstree", $.proxy(function (e) {
                    this._prepare_checkboxes();
                }, this))
                    .delegate((this.data.ui && this.data.checkbox.noui ? "a" : "ins.jstree-checkbox"), "click.jstree", $.proxy(function (e) {
                    e.preventDefault();
                    if (this._get_node(e.target).hasClass("jstree-checked")) {
                        this.uncheck_node(e.target);
                    }
                    else {
                        this.check_node(e.target);
                    }
                    if (this.data.ui && this.data.checkbox.noui) {
                        this.save_selected();
                        if (this.data.cookies) {
                            this.save_cookie("select_node");
                        }
                    }
                    else {
                        e.stopImmediatePropagation();
                        return false;
                    }
                }, this));
            },
            defaults:{
                override_ui:false,
                two_state:false,
                real_checkboxes:false,
                checked_parent_open:true,
                real_checkboxes_names:function (n) {
                    return [ ("check_" + (n[0].id || Math.ceil(Math.random() * 10000))) , 1];
                }
            },
            __destroy:function () {
                this.get_container()
                    .find("input.jstree-real-checkbox").removeClass("jstree-real-checkbox").end()
                    .find("ins.jstree-checkbox").remove();
            },
            _fn:{
                _checkbox_notify:function (n, data) {
                    if (data.checked) {
                        this.check_node(n, false);
                    }
                },
                _prepare_checkboxes:function (obj) {
                    obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
                    if (obj === false) {
                        return;
                    } // added for removing root nodes
                    var c, _this = this, t, ts = this._get_settings().checkbox.two_state, rc = this._get_settings().checkbox.real_checkboxes, rcn = this._get_settings().checkbox.real_checkboxes_names;
                    obj.each(function () {
                        t = $(this);
                        c = t.is("li") && (t.hasClass("jstree-checked") || (rc && t.children(":checked").length)) ? "jstree-checked" : "jstree-unchecked";
                        t.find("li").andSelf().each(function () {
                            var $t = $(this), nm;
                            $t.children("a" + (_this.data.languages ? "" : ":eq(0)")).not(":has(.jstree-checkbox)").prepend("<ins class='jstree-checkbox'>&#160;</ins>").parent().not(".jstree-checked, .jstree-unchecked").addClass(ts ? "jstree-unchecked" : c);
                            if (rc) {
                                if (!$t.children(":checkbox").length) {
                                    nm = rcn.call(_this, $t);
                                    $t.prepend("<input type='checkbox' class='jstree-real-checkbox' id='" + nm[0] + "' name='" + nm[0] + "' value='" + nm[1] + "' />");
                                }
                                else {
                                    $t.children(":checkbox").addClass("jstree-real-checkbox");
                                }
                                if (c === "jstree-checked") {
                                    $t.children(":checkbox").attr("checked", "checked");
                                }
                            }
                            if (c === "jstree-checked" && !ts) {
                                $t.find("li").addClass("jstree-checked");
                            }
                        });
                    });
                    if (!ts) {
                        if (obj.length === 1 && obj.is("li")) {
                            this._repair_state(obj);
                        }
                        if (obj.is("li")) {
                            obj.each(function () {
                                _this._repair_state(this);
                            });
                        }
                        else {
                            obj.find("> ul > li").each(function () {
                                _this._repair_state(this);
                            });
                        }
                        obj.find(".jstree-checked").parent().parent().each(function () {
                            _this._repair_state(this);
                        });
                    }
                },
                change_state:function (obj, state) {
                    obj = this._get_node(obj);
                    var coll = false, rc = this._get_settings().checkbox.real_checkboxes;
                    if (!obj || obj === -1) {
                        return false;
                    }
                    state = (state === false || state === true) ? state : obj.hasClass("jstree-checked");
                    if (this._get_settings().checkbox.two_state) {
                        if (state) {
                            obj.removeClass("jstree-checked").addClass("jstree-unchecked");
                            if (rc) {
                                obj.children(":checkbox").removeAttr("checked");
                            }
                        }
                        else {
                            obj.removeClass("jstree-unchecked").addClass("jstree-checked");
                            if (rc) {
                                obj.children(":checkbox").attr("checked", "checked");
                            }
                        }
                    }
                    else {
                        if (state) {
                            coll = obj.find("li").andSelf();
                            if (!coll.filter(".jstree-checked, .jstree-undetermined").length) {
                                return false;
                            }
                            coll.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
                            if (rc) {
                                coll.children(":checkbox").removeAttr("checked");
                            }
                        }
                        else {
                            coll = obj.find("li").andSelf();
                            if (!coll.filter(".jstree-unchecked, .jstree-undetermined").length) {
                                return false;
                            }
                            coll.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
                            if (rc) {
                                coll.children(":checkbox").attr("checked", "checked");
                            }
                            if (this.data.ui) {
                                this.data.ui.last_selected = obj;
                            }
                            this.data.checkbox.last_selected = obj;
                        }
                        obj.parentsUntil(".jstree", "li").each(function () {
                            var $this = $(this);
                            if (state) {
                                if ($this.children("ul").children("li.jstree-checked, li.jstree-undetermined").length) {
                                    $this.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
                                    if (rc) {
                                        $this.parentsUntil(".jstree", "li").andSelf().children(":checkbox").removeAttr("checked");
                                    }
                                    return false;
                                }
                                else {
                                    $this.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
                                    if (rc) {
                                        $this.children(":checkbox").removeAttr("checked");
                                    }
                                }
                            }
                            else {
                                if ($this.children("ul").children("li.jstree-unchecked, li.jstree-undetermined").length) {
                                    $this.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
                                    if (rc) {
                                        $this.parentsUntil(".jstree", "li").andSelf().children(":checkbox").removeAttr("checked");
                                    }
                                    return false;
                                }
                                else {
                                    $this.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
                                    if (rc) {
                                        $this.children(":checkbox").attr("checked", "checked");
                                    }
                                }
                            }
                        });
                    }
                    if (this.data.ui && this.data.checkbox.noui) {
                        this.data.ui.selected = this.get_checked();
                    }
                    this.__callback(obj);
                    return true;
                },
                check_node:function (obj) {
                    if (this.change_state(obj, false)) {
                        obj = this._get_node(obj);
                        if (this._get_settings().checkbox.checked_parent_open) {
                            var t = this;
                            obj.parents(".jstree-closed").each(function () {
                                t.open_node(this, false, true);
                            });
                        }
                        this.__callback({ "obj":obj });
                    }
                },
                uncheck_node:function (obj) {
                    if (this.change_state(obj, true)) {
                        this.__callback({ "obj":this._get_node(obj) });
                    }
                },
                check_all:function () {
                    var _this = this,
                        coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
                    coll.each(function () {
                        _this.change_state(this, false);
                    });
                    this.__callback();
                },
                uncheck_all:function () {
                    var _this = this,
                        coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
                    coll.each(function () {
                        _this.change_state(this, true);
                    });
                    this.__callback();
                },

                is_checked:function (obj) {
                    obj = this._get_node(obj);
                    return obj.length ? obj.is(".jstree-checked") : false;
                },
                get_checked:function (obj, get_all) {
                    obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
                    return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-checked") : obj.find("> ul > .jstree-checked, .jstree-undetermined > ul > .jstree-checked");
                },
                get_unchecked:function (obj, get_all) {
                    obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
                    return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-unchecked") : obj.find("> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked");
                },

                show_checkboxes:function () {
                    this.get_container().children("ul").removeClass("jstree-no-checkboxes");
                },
                hide_checkboxes:function () {
                    this.get_container().children("ul").addClass("jstree-no-checkboxes");
                },

                _repair_state:function (obj) {
                    obj = this._get_node(obj);
                    if (!obj.length) {
                        return;
                    }
                    var rc = this._get_settings().checkbox.real_checkboxes,
                        a = obj.find("> ul > .jstree-checked").length,
                        b = obj.find("> ul > .jstree-undetermined").length,
                        c = obj.find("> ul > li").length;
                    if (c === 0) {
                        if (obj.hasClass("jstree-undetermined")) {
                            this.change_state(obj, false);
                        }
                    }
                    else if (a === 0 && b === 0) {
                        this.change_state(obj, true);
                    }
                    else if (a === c) {
                        this.change_state(obj, false);
                    }
                    else {
                        obj.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
                        if (rc) {
                            obj.parentsUntil(".jstree", "li").andSelf().children(":checkbox").removeAttr("checked");
                        }
                    }
                },
                reselect:function () {
                    if (this.data.ui && this.data.checkbox.noui) {
                        var _this = this,
                            s = this.data.ui.to_select;
                        s = $.map($.makeArray(s), function (n) {
                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
                        });
                        this.deselect_all();
                        $.each(s, function (i, val) {
                            _this.check_node(val);
                        });
                        this.__callback();
                    }
                    else {
                        this.__call_old();
                    }
                },
                save_loaded:function () {
                    var _this = this;
                    this.data.core.to_load = [];
                    this.get_container_ul().find("li.jstree-closed.jstree-undetermined").each(function () {
                        if (this.id) {
                            _this.data.core.to_load.push("#" + this.id);
                        }
                    });
                }
            }
        });
        $(function () {
            var css_string = '.jstree .jstree-real-checkbox { display:none; } ';
            $.vakata.css.add_sheet({ str:css_string, title:"jstree" });
        });
    })(jQuery);
//*/

    /* 
     * jsTree XML plugin
     * The XML data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
     */
    (function ($) {
        $.vakata.xslt = function (xml, xsl, callback) {
            var rs = "", xm, xs, processor, support;
            // TODO: IE9 no XSLTProcessor, no document.recalc
            if (document.recalc) {
                xm = document.createElement('xml');
                xs = document.createElement('xml');
                xm.innerHTML = xml;
                xs.innerHTML = xsl;
                $("body").append(xm).append(xs);
                setTimeout((function (xm, xs, callback) {
                    return function () {
                        callback.call(null, xm.transformNode(xs.XMLDocument));
                        setTimeout((function (xm, xs) {
                            return function () {
                                $(xm).remove();
                                $(xs).remove();
                            };
                        })(xm, xs), 200);
                    };
                })(xm, xs, callback), 100);
                return true;
            }
            if (typeof window.DOMParser !== "undefined" && typeof window.XMLHttpRequest !== "undefined" && typeof window.XSLTProcessor === "undefined") {
                xml = new DOMParser().parseFromString(xml, "text/xml");
                xsl = new DOMParser().parseFromString(xsl, "text/xml");
                // alert(xml.transformNode());
                // callback.call(null, new XMLSerializer().serializeToString(rs));

            }
            if (typeof window.DOMParser !== "undefined" && typeof window.XMLHttpRequest !== "undefined" && typeof window.XSLTProcessor !== "undefined") {
                processor = new XSLTProcessor();
                support = $.isFunction(processor.transformDocument) ? (typeof window.XMLSerializer !== "undefined") : true;
                if (!support) {
                    return false;
                }
                xml = new DOMParser().parseFromString(xml, "text/xml");
                xsl = new DOMParser().parseFromString(xsl, "text/xml");
                if ($.isFunction(processor.transformDocument)) {
                    rs = document.implementation.createDocument("", "", null);
                    processor.transformDocument(xml, xsl, rs, null);
                    callback.call(null, new XMLSerializer().serializeToString(rs));
                    return true;
                }
                else {
                    processor.importStylesheet(xsl);
                    rs = processor.transformToFragment(xml, document);
                    callback.call(null, $("<div />").append(rs).html());
                    return true;
                }
            }
            return false;
        };
        var xsl = {
                'nest':'<' + '?xml version="1.0" encoding="utf-8" ?>' +
                    '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' +
                    '<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/html" />' +
                    '<xsl:template match="/">' +
                    '	<xsl:call-template name="nodes">' +
                    '		<xsl:with-param name="node" select="/root" />' +
                    '	</xsl:call-template>' +
                    '</xsl:template>' +
                    '<xsl:template name="nodes">' +
                    '	<xsl:param name="node" />' +
                    '	<ul>' +
                    '	<xsl:for-each select="$node/item">' +
                    '		<xsl:variable name="children" select="count(./item) &gt; 0" />' +
                    '		<li>' +
                    '			<xsl:attribute name="class">' +
                    '				<xsl:if test="position() = last()">jstree-last </xsl:if>' +
                    '				<xsl:choose>' +
                    '					<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' +
                    '					<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' +
                    '					<xsl:otherwise>jstree-leaf </xsl:otherwise>' +
                    '				</xsl:choose>' +
                    '				<xsl:value-of select="@class" />' +
                    '			</xsl:attribute>' +
                    '			<xsl:for-each select="@*">' +
                    '				<xsl:if test="name() != \'class\' and name() != \'state\' and name() != \'hasChildren\'">' +
                    '					<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
                    '				</xsl:if>' +
                    '			</xsl:for-each>' +
                    '	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' +
                    '			<xsl:for-each select="content/name">' +
                    '				<a>' +
                    '				<xsl:attribute name="href">' +
                    '					<xsl:choose>' +
                    '					<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' +
                    '					<xsl:otherwise>#</xsl:otherwise>' +
                    '					</xsl:choose>' +
                    '				</xsl:attribute>' +
                    '				<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' +
                    '				<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' +
                    '				<xsl:for-each select="@*">' +
                    '					<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' +
                    '						<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
                    '					</xsl:if>' +
                    '				</xsl:for-each>' +
                    '					<ins>' +
                    '						<xsl:attribute name="class">jstree-icon ' +
                    '							<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' +
                    '						</xsl:attribute>' +
                    '						<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' +
                    '						<xsl:text>&#xa0;</xsl:text>' +
                    '					</ins>' +
                    '					<xsl:copy-of select="./child::node()" />' +
                    '				</a>' +
                    '			</xsl:for-each>' +
                    '			<xsl:if test="$children or @hasChildren"><xsl:call-template name="nodes"><xsl:with-param name="node" select="current()" /></xsl:call-template></xsl:if>' +
                    '		</li>' +
                    '	</xsl:for-each>' +
                    '	</ul>' +
                    '</xsl:template>' +
                    '</xsl:stylesheet>',

                'flat':'<' + '?xml version="1.0" encoding="utf-8" ?>' +
                    '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' +
                    '<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/xml" />' +
                    '<xsl:template match="/">' +
                    '	<ul>' +
                    '	<xsl:for-each select="//item[not(@parent_id) or @parent_id=0 or not(@parent_id = //item/@id)]">' + /* the last `or` may be removed */
                    '		<xsl:call-template name="nodes">' +
                    '			<xsl:with-param name="node" select="." />' +
                    '			<xsl:with-param name="is_last" select="number(position() = last())" />' +
                    '		</xsl:call-template>' +
                    '	</xsl:for-each>' +
                    '	</ul>' +
                    '</xsl:template>' +
                    '<xsl:template name="nodes">' +
                    '	<xsl:param name="node" />' +
                    '	<xsl:param name="is_last" />' +
                    '	<xsl:variable name="children" select="count(//item[@parent_id=$node/attribute::id]) &gt; 0" />' +
                    '	<li>' +
                    '	<xsl:attribute name="class">' +
                    '		<xsl:if test="$is_last = true()">jstree-last </xsl:if>' +
                    '		<xsl:choose>' +
                    '			<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' +
                    '			<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' +
                    '			<xsl:otherwise>jstree-leaf </xsl:otherwise>' +
                    '		</xsl:choose>' +
                    '		<xsl:value-of select="@class" />' +
                    '	</xsl:attribute>' +
                    '	<xsl:for-each select="@*">' +
                    '		<xsl:if test="name() != \'parent_id\' and name() != \'hasChildren\' and name() != \'class\' and name() != \'state\'">' +
                    '		<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
                    '		</xsl:if>' +
                    '	</xsl:for-each>' +
                    '	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' +
                    '	<xsl:for-each select="content/name">' +
                    '		<a>' +
                    '		<xsl:attribute name="href">' +
                    '			<xsl:choose>' +
                    '			<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' +
                    '			<xsl:otherwise>#</xsl:otherwise>' +
                    '			</xsl:choose>' +
                    '		</xsl:attribute>' +
                    '		<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' +
                    '		<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' +
                    '		<xsl:for-each select="@*">' +
                    '			<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' +
                    '				<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
                    '			</xsl:if>' +
                    '		</xsl:for-each>' +
                    '			<ins>' +
                    '				<xsl:attribute name="class">jstree-icon ' +
                    '					<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' +
                    '				</xsl:attribute>' +
                    '				<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' +
                    '				<xsl:text>&#xa0;</xsl:text>' +
                    '			</ins>' +
                    '			<xsl:copy-of select="./child::node()" />' +
                    '		</a>' +
                    '	</xsl:for-each>' +
                    '	<xsl:if test="$children">' +
                    '		<ul>' +
                    '		<xsl:for-each select="//item[@parent_id=$node/attribute::id]">' +
                    '			<xsl:call-template name="nodes">' +
                    '				<xsl:with-param name="node" select="." />' +
                    '				<xsl:with-param name="is_last" select="number(position() = last())" />' +
                    '			</xsl:call-template>' +
                    '		</xsl:for-each>' +
                    '		</ul>' +
                    '	</xsl:if>' +
                    '	</li>' +
                    '</xsl:template>' +
                    '</xsl:stylesheet>'
            },
            escape_xml = function (string) {
                return string
                    .toString()
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&apos;');
            };
        $.jstree.plugin("xml_data", {
            defaults:{
                data:false,
                ajax:false,
                xsl:"flat",
                clean_node:false,
                correct_state:true,
                get_skip_empty:false,
                get_include_preamble:true
            },
            _fn:{
                load_node:function (obj, s_call, e_call) {
                    var _this = this;
                    this.load_node_xml(obj, function () {
                        _this.__callback({ "obj":_this._get_node(obj) });
                        s_call.call(this);
                    }, e_call);
                },
                _is_loaded:function (obj) {
                    var s = this._get_settings().xml_data;
                    obj = this._get_node(obj);
                    return obj == -1 || !obj || (!s.ajax && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
                },
                load_node_xml:function (obj, s_call, e_call) {
                    var s = this.get_settings().xml_data,
                        error_func = function () {
                        },
                        success_func = function () {
                        };

                    obj = this._get_node(obj);
                    if (obj && obj !== -1) {
                        if (obj.data("jstree-is-loading")) {
                            return;
                        }
                        else {
                            obj.data("jstree-is-loading", true);
                        }
                    }
                    switch (!0) {
                        case (!s.data && !s.ajax):
                            throw "Neither data nor ajax settings supplied.";
                        case ($.isFunction(s.data)):
                            s.data.call(this, obj, $.proxy(function (d) {
                                this.parse_xml(d, $.proxy(function (d) {
                                    if (d) {
                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
                                        if (d.length > 10) {
                                            d = $(d);
                                            if (obj === -1 || !obj) {
                                                this.get_container().children("ul").empty().append(d.children());
                                            }
                                            else {
                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
                                                obj.append(d);
                                                obj.removeData("jstree-is-loading");
                                            }
                                            if (s.clean_node) {
                                                this.clean_node(obj);
                                            }
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                        else {
                                            if (obj && obj !== -1) {
                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
                                                obj.removeData("jstree-is-loading");
                                                if (s.correct_state) {
                                                    this.correct_state(obj);
                                                    if (s_call) {
                                                        s_call.call(this);
                                                    }
                                                }
                                            }
                                            else {
                                                if (s.correct_state) {
                                                    this.get_container().children("ul").empty();
                                                    if (s_call) {
                                                        s_call.call(this);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, this));
                            }, this));
                            break;
                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
                            if (!obj || obj == -1) {
                                this.parse_xml(s.data, $.proxy(function (d) {
                                    if (d) {
                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
                                        if (d.length > 10) {
                                            d = $(d);
                                            this.get_container().children("ul").empty().append(d.children());
                                            if (s.clean_node) {
                                                this.clean_node(obj);
                                            }
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                    else {
                                        if (s.correct_state) {
                                            this.get_container().children("ul").empty();
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                }, this));
                            }
                            break;
                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
                            error_func = function (x, t, e) {
                                var ef = this.get_settings().xml_data.ajax.error;
                                if (ef) {
                                    ef.call(this, x, t, e);
                                }
                                if (obj !== -1 && obj.length) {
                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
                                    obj.removeData("jstree-is-loading");
                                    if (t === "success" && s.correct_state) {
                                        this.correct_state(obj);
                                    }
                                }
                                else {
                                    if (t === "success" && s.correct_state) {
                                        this.get_container().children("ul").empty();
                                    }
                                }
                                if (e_call) {
                                    e_call.call(this);
                                }
                            };
                            success_func = function (d, t, x) {
                                d = x.responseText;
                                var sf = this.get_settings().xml_data.ajax.success;
                                if (sf) {
                                    d = sf.call(this, d, t, x) || d;
                                }
                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "")) {
                                    return error_func.call(this, x, t, "");
                                }
                                this.parse_xml(d, $.proxy(function (d) {
                                    if (d) {
                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
                                        if (d.length > 10) {
                                            d = $(d);
                                            if (obj === -1 || !obj) {
                                                this.get_container().children("ul").empty().append(d.children());
                                            }
                                            else {
                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
                                                obj.append(d);
                                                obj.removeData("jstree-is-loading");
                                            }
                                            if (s.clean_node) {
                                                this.clean_node(obj);
                                            }
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                        else {
                                            if (obj && obj !== -1) {
                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
                                                obj.removeData("jstree-is-loading");
                                                if (s.correct_state) {
                                                    this.correct_state(obj);
                                                    if (s_call) {
                                                        s_call.call(this);
                                                    }
                                                }
                                            }
                                            else {
                                                if (s.correct_state) {
                                                    this.get_container().children("ul").empty();
                                                    if (s_call) {
                                                        s_call.call(this);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, this));
                            };
                            s.ajax.context = this;
                            s.ajax.error = error_func;
                            s.ajax.success = success_func;
                            if (!s.ajax.dataType) {
                                s.ajax.dataType = "xml";
                            }
                            if ($.isFunction(s.ajax.url)) {
                                s.ajax.url = s.ajax.url.call(this, obj);
                            }
                            if ($.isFunction(s.ajax.data)) {
                                s.ajax.data = s.ajax.data.call(this, obj);
                            }
                            $.ajax(s.ajax);
                            break;
                    }
                },
                parse_xml:function (xml, callback) {
                    var s = this._get_settings().xml_data;
                    $.vakata.xslt(xml, xsl[s.xsl], callback);
                },
                get_xml:function (tp, obj, li_attr, a_attr, is_callback) {
                    var result = "",
                        s = this._get_settings(),
                        _this = this,
                        tmp1, tmp2, li, a, lang;
                    if (!tp) {
                        tp = "flat";
                    }
                    if (!is_callback) {
                        is_callback = 0;
                    }
                    obj = this._get_node(obj);
                    if (!obj || obj === -1) {
                        obj = this.get_container().find("> ul > li");
                    }
                    li_attr = $.isArray(li_attr) ? li_attr : [ "id", "class" ];
                    if (!is_callback && this.data.types && $.inArray(s.types.type_attr, li_attr) === -1) {
                        li_attr.push(s.types.type_attr);
                    }

                    a_attr = $.isArray(a_attr) ? a_attr : [ ];

                    if (!is_callback) {
                        if (s.xml_data.get_include_preamble) {
                            result += '<' + '?xml version="1.0" encoding="UTF-8"?' + '>';
                        }
                        result += "<root>";
                    }
                    obj.each(function () {
                        result += "<item";
                        li = $(this);
                        $.each(li_attr, function (i, v) {
                            var t = li.attr(v);
                            if (!s.xml_data.get_skip_empty || typeof t !== "undefined") {
                                result += " " + v + "=\"" + escape_xml((" " + (t || "")).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + "\"";
                            }
                        });
                        if (li.hasClass("jstree-open")) {
                            result += " state=\"open\"";
                        }
                        if (li.hasClass("jstree-closed")) {
                            result += " state=\"closed\"";
                        }
                        if (tp === "flat") {
                            result += " parent_id=\"" + escape_xml(is_callback) + "\"";
                        }
                        result += ">";
                        result += "<content>";
                        a = li.children("a");
                        a.each(function () {
                            tmp1 = $(this);
                            lang = false;
                            result += "<name";
                            if ($.inArray("languages", s.plugins) !== -1) {
                                $.each(s.languages, function (k, z) {
                                    if (tmp1.hasClass(z)) {
                                        result += " lang=\"" + escape_xml(z) + "\"";
                                        lang = z;
                                        return false;
                                    }
                                });
                            }
                            if (a_attr.length) {
                                $.each(a_attr, function (k, z) {
                                    var t = tmp1.attr(z);
                                    if (!s.xml_data.get_skip_empty || typeof t !== "undefined") {
                                        result += " " + z + "=\"" + escape_xml((" " + t || "").replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + "\"";
                                    }
                                });
                            }
                            if (tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\s+$/ig, "").length) {
                                result += ' icon="' + escape_xml(tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + '"';
                            }
                            if (tmp1.children("ins").get(0).style.backgroundImage.length) {
                                result += ' icon="' + escape_xml(tmp1.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "").replace(/'/ig, "").replace(/"/ig, "")) + '"';
                            }
                            result += ">";
                            result += "<![CDATA[" + _this.get_text(tmp1, lang) + "]]>";
                            result += "</name>";
                        });
                        result += "</content>";
                        tmp2 = li[0].id || true;
                        li = li.find("> ul > li");
                        if (li.length) {
                            tmp2 = _this.get_xml(tp, li, li_attr, a_attr, tmp2);
                        }
                        else {
                            tmp2 = "";
                        }
                        if (tp == "nest") {
                            result += tmp2;
                        }
                        result += "</item>";
                        if (tp == "flat") {
                            result += tmp2;
                        }
                    });
                    if (!is_callback) {
                        result += "</root>";
                    }
                    return result;
                }
            }
        });
    })(jQuery);
//*/

    /*
     * jsTree search plugin
     * Enables both sync and async search on the tree
     * DOES NOT WORK WITH JSON PROGRESSIVE RENDER
     */
    (function ($) {
        $.expr[':'].jstree_contains = function (a, i, m) {
            return (a.textContent || a.innerText || "").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;
        };
        $.expr[':'].jstree_title_contains = function (a, i, m) {
            return (a.getAttribute("title") || "").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;
        };
        $.jstree.plugin("search", {
            __init:function () {
                this.data.search.str = "";
                this.data.search.result = $();
                if (this._get_settings().search.show_only_matches) {
                    this.get_container()
                        .bind("search.jstree", function (e, data) {
                            $(this).children("ul").find("li").hide().removeClass("jstree-last");
                            data.rslt.nodes.parentsUntil(".jstree").andSelf().show()
                                .filter("ul").each(function () {
                                    $(this).children("li:visible").eq(-1).addClass("jstree-last");
                                });
                        })
                        .bind("clear_search.jstree", function () {
                            $(this).children("ul").find("li").css("display", "").end().end().jstree("clean_node", -1);
                        });
                }
            },
            defaults:{
                ajax:false,
                search_method:"jstree_contains", // for case insensitive - jstree_contains
                show_only_matches:false
            },
            _fn:{
                search:function (str, skip_async) {
                    if ($.trim(str) === "") {
                        this.clear_search();
                        return;
                    }
                    var s = this.get_settings().search,
                        t = this,
                        error_func = function () {
                        },
                        success_func = function () {
                        };
                    this.data.search.str = str;

                    if (!skip_async && s.ajax !== false && this.get_container_ul().find("li.jstree-closed:not(:has(ul)):eq(0)").length > 0) {
                        this.search.supress_callback = true;
                        error_func = function () {
                        };
                        success_func = function (d, t, x) {
                            var sf = this.get_settings().search.ajax.success;
                            if (sf) {
                                d = sf.call(this, d, t, x) || d;
                            }
                            this.data.search.to_open = d;
                            this._search_open();
                        };
                        s.ajax.context = this;
                        s.ajax.error = error_func;
                        s.ajax.success = success_func;
                        if ($.isFunction(s.ajax.url)) {
                            s.ajax.url = s.ajax.url.call(this, str);
                        }
                        if ($.isFunction(s.ajax.data)) {
                            s.ajax.data = s.ajax.data.call(this, str);
                        }
                        if (!s.ajax.data) {
                            s.ajax.data = { "search_string":str };
                        }
                        if (!s.ajax.dataType || /^json/.exec(s.ajax.dataType)) {
                            s.ajax.dataType = "json";
                        }
                        $.ajax(s.ajax);
                        return;
                    }
                    if (this.data.search.result.length) {
                        this.clear_search();
                    }
                    this.data.search.result = this.get_container().find("a" + (this.data.languages ? "." + this.get_lang() : "" ) + ":" + (s.search_method) + "(" + this.data.search.str + ")");
                    this.data.search.result.addClass("jstree-search").parent().parents(".jstree-closed").each(function () {
                        t.open_node(this, false, true);
                    });
                    this.__callback({ nodes:this.data.search.result, str:str });
                },
                clear_search:function (str) {
                    this.data.search.result.removeClass("jstree-search");
                    this.__callback(this.data.search.result);
                    this.data.search.result = $();
                },
                _search_open:function (is_callback) {
                    var _this = this,
                        done = true,
                        current = [],
                        remaining = [];
                    if (this.data.search.to_open.length) {
                        $.each(this.data.search.to_open, function (i, val) {
                            if (val == "#") {
                                return true;
                            }
                            if ($(val).length && $(val).is(".jstree-closed")) {
                                current.push(val);
                            }
                            else {
                                remaining.push(val);
                            }
                        });
                        if (current.length) {
                            this.data.search.to_open = remaining;
                            $.each(current, function (i, val) {
                                _this.open_node(val, function () {
                                    _this._search_open(true);
                                });
                            });
                            done = false;
                        }
                    }
                    if (done) {
                        this.search(this.data.search.str, true);
                    }
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree contextmenu plugin
     */
    (function ($) {
        $.vakata.context = {
            hide_on_mouseleave:false,

            cnt:$("<div id='vakata-contextmenu' />"),
            vis:false,
            tgt:false,
            par:false,
            func:false,
            data:false,
            rtl:false,
            show:function (s, t, x, y, d, p, rtl) {
                $.vakata.context.rtl = !!rtl;
                var html = $.vakata.context.parse(s), h, w;
                if (!html) {
                    return;
                }
                $.vakata.context.vis = true;
                $.vakata.context.tgt = t;
                $.vakata.context.par = p || t || null;
                $.vakata.context.data = d || null;
                $.vakata.context.cnt
                    .html(html)
                    .css({ "visibility":"hidden", "display":"block", "left":0, "top":0 });

                if ($.vakata.context.hide_on_mouseleave) {
                    $.vakata.context.cnt
                        .one("mouseleave", function (e) {
                            $.vakata.context.hide();
                        });
                }

                h = $.vakata.context.cnt.height();
                w = $.vakata.context.cnt.width();
                if (x + w > $(document).width()) {
                    x = $(document).width() - (w + 5);
                    $.vakata.context.cnt.find("li > ul").addClass("right");
                }
                if (y + h > $(document).height()) {
                    y = y - (h + t[0].offsetHeight);
                    $.vakata.context.cnt.find("li > ul").addClass("bottom");
                }

                $.vakata.context.cnt
                    .css({ "left":x, "top":y })
                    .find("li:has(ul)")
                    .bind("mouseenter", function (e) {
                        var w = $(document).width(),
                            h = $(document).height(),
                            ul = $(this).children("ul").show();
                        if (w !== $(document).width()) {
                            ul.toggleClass("right");
                        }
                        if (h !== $(document).height()) {
                            ul.toggleClass("bottom");
                        }
                    })
                    .bind("mouseleave", function (e) {
                        $(this).children("ul").hide();
                    })
                    .end()
                    .css({ "visibility":"visible" })
                    .show();
                $(document).triggerHandler("context_show.vakata");
            },
            hide:function () {
                $.vakata.context.vis = false;
                $.vakata.context.cnt.attr("class", "").css({ "visibility":"hidden" });
                $(document).triggerHandler("context_hide.vakata");
            },
            parse:function (s, is_callback) {
                if (!s) {
                    return false;
                }
                var str = "",
                    tmp = false,
                    was_sep = true;
                if (!is_callback) {
                    $.vakata.context.func = {};
                }
                str += "<ul>";
                $.each(s, function (i, val) {
                    if (!val) {
                        return true;
                    }
                    $.vakata.context.func[i] = val.action;
                    if (!was_sep && val.separator_before) {
                        str += "<li class='vakata-separator vakata-separator-before'></li>";
                    }
                    was_sep = false;
                    str += "<li class='" + (val._class || "") + (val._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins ";
                    if (val.icon && val.icon.indexOf("/") === -1) {
                        str += " class='" + val.icon + "' ";
                    }
                    if (val.icon && val.icon.indexOf("/") !== -1) {
                        str += " style='background:url(" + val.icon + ") center center no-repeat;' ";
                    }
                    str += ">&#160;</ins><a href='#' rel='" + i + "'>";
                    if (val.submenu) {
                        str += "<span style='float:" + ($.vakata.context.rtl ? "left" : "right") + ";'>&raquo;</span>";
                    }
                    str += val.label + "</a>";
                    if (val.submenu) {
                        tmp = $.vakata.context.parse(val.submenu, true);
                        if (tmp) {
                            str += tmp;
                        }
                    }
                    str += "</li>";
                    if (val.separator_after) {
                        str += "<li class='vakata-separator vakata-separator-after'></li>";
                        was_sep = true;
                    }
                });
                str = str.replace(/<li class\='vakata-separator vakata-separator-after'\><\/li\>$/, "");
                str += "</ul>";
                $(document).triggerHandler("context_parse.vakata");
                return str.length > 10 ? str : false;
            },
            exec:function (i) {
                if ($.isFunction($.vakata.context.func[i])) {
                    // if is string - eval and call it!
                    $.vakata.context.func[i].call($.vakata.context.data, $.vakata.context.par);
                    return true;
                }
                else {
                    return false;
                }
            }
        };
        $(function () {
            var css_string = '' +
                '#vakata-contextmenu { display:block; visibility:hidden; left:0; top:-200px; position:absolute; margin:0; padding:0; min-width:180px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:180px; } ' +
                '#vakata-contextmenu ul { min-width:180px; *width:180px; } ' +
                '#vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } ' +
                '#vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } ' +
                '#vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } ' +
                '#vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } ' +
                '#vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } ' +
                '#vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } ' +
                '#vakata-contextmenu .right { right:100%; left:auto; } ' +
                '#vakata-contextmenu .bottom { bottom:-1px; top:auto; } ' +
                '#vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } ';
            $.vakata.css.add_sheet({ str:css_string, title:"vakata" });
            $.vakata.context.cnt
                .delegate("a", "click", function (e) {
                    e.preventDefault();
                })
                .delegate("a", "mouseup", function (e) {
                    if (!$(this).parent().hasClass("jstree-contextmenu-disabled") && $.vakata.context.exec($(this).attr("rel"))) {
                        $.vakata.context.hide();
                    }
                    else {
                        $(this).blur();
                    }
                })
                .delegate("a", "mouseover", function () {
                    $.vakata.context.cnt.find(".vakata-hover").removeClass("vakata-hover");
                })
                .appendTo("body");
            $(document).bind("mousedown", function (e) {
                if ($.vakata.context.vis && !$.contains($.vakata.context.cnt[0], e.target)) {
                    $.vakata.context.hide();
                }
            });
            if (typeof $.hotkeys !== "undefined") {
                $(document)
                    .bind("keydown", "up", function (e) {
                        if ($.vakata.context.vis) {
                            var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").prevAll("li:not(.vakata-separator)").first();
                            if (!o.length) {
                                o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").last();
                            }
                            o.addClass("vakata-hover");
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                    })
                    .bind("keydown", "down", function (e) {
                        if ($.vakata.context.vis) {
                            var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").nextAll("li:not(.vakata-separator)").first();
                            if (!o.length) {
                                o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").first();
                            }
                            o.addClass("vakata-hover");
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                    })
                    .bind("keydown", "right", function (e) {
                        if ($.vakata.context.vis) {
                            $.vakata.context.cnt.find(".vakata-hover").children("ul").show().children("li:not(.vakata-separator)").removeClass("vakata-hover").first().addClass("vakata-hover");
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                    })
                    .bind("keydown", "left", function (e) {
                        if ($.vakata.context.vis) {
                            $.vakata.context.cnt.find(".vakata-hover").children("ul").hide().children(".vakata-separator").removeClass("vakata-hover");
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                    })
                    .bind("keydown", "esc", function (e) {
                        $.vakata.context.hide();
                        e.preventDefault();
                    })
                    .bind("keydown", "space", function (e) {
                        $.vakata.context.cnt.find(".vakata-hover").last().children("a").click();
                        e.preventDefault();
                    });
            }
        });

        $.jstree.plugin("contextmenu", {
            __init:function () {
                this.get_container()
                    .delegate("a", "contextmenu.jstree", $.proxy(function (e) {
                    e.preventDefault();
                    if (!$(e.currentTarget).hasClass("jstree-loading")) {
                        this.show_contextmenu(e.currentTarget, e.pageX, e.pageY);
                    }
                }, this))
                    .delegate("a", "click.jstree", $.proxy(function (e) {
                    if (this.data.contextmenu) {
                        $.vakata.context.hide();
                    }
                }, this))
                    .bind("destroy.jstree", $.proxy(function () {
                    // TODO: move this to descruct method
                    if (this.data.contextmenu) {
                        $.vakata.context.hide();
                    }
                }, this));
                $(document).bind("context_hide.vakata", $.proxy(function () {
                    this.data.contextmenu = false;
                }, this));
            },
            defaults:{
                select_node:false, // requires UI plugin
                show_at_node:true,
                items:{ // Could be a function that should return an object like this one
                    "create":{
                        "separator_before":false,
                        "separator_after":true,
                        "label":"Create",
                        "action":function (obj) {
                            this.create(obj);
                        }
                    },
                    "rename":{
                        "separator_before":false,
                        "separator_after":false,
                        "label":"Rename",
                        "action":function (obj) {
                            this.rename(obj);
                        }
                    },
                    "remove":{
                        "separator_before":false,
                        "icon":false,
                        "separator_after":false,
                        "label":"Delete",
                        "action":function (obj) {
                            if (this.is_selected(obj)) {
                                this.remove();
                            } else {
                                this.remove(obj);
                            }
                        }
                    },
                    "ccp":{
                        "separator_before":true,
                        "icon":false,
                        "separator_after":false,
                        "label":"Edit",
                        "action":false,
                        "submenu":{
                            "cut":{
                                "separator_before":false,
                                "separator_after":false,
                                "label":"Cut",
                                "action":function (obj) {
                                    this.cut(obj);
                                }
                            },
                            "copy":{
                                "separator_before":false,
                                "icon":false,
                                "separator_after":false,
                                "label":"Copy",
                                "action":function (obj) {
                                    this.copy(obj);
                                }
                            },
                            "paste":{
                                "separator_before":false,
                                "icon":false,
                                "separator_after":false,
                                "label":"Paste",
                                "action":function (obj) {
                                    this.paste(obj);
                                }
                            }
                        }
                    }
                }
            },
            _fn:{
                show_contextmenu:function (obj, x, y) {
                    obj = this._get_node(obj);
                    var s = this.get_settings().contextmenu,
                        a = obj.children("a:visible:eq(0)"),
                        o = false,
                        i = false;
                    if (s.select_node && this.data.ui && !this.is_selected(obj)) {
                        this.deselect_all();
                        this.select_node(obj, true);
                    }
                    if (s.show_at_node || typeof x === "undefined" || typeof y === "undefined") {
                        o = a.offset();
                        x = o.left;
                        y = o.top + this.data.core.li_height;
                    }
                    i = obj.data("jstree") && obj.data("jstree").contextmenu ? obj.data("jstree").contextmenu : s.items;
                    if ($.isFunction(i)) {
                        i = i.call(this, obj);
                    }
                    this.data.contextmenu = true;
                    $.vakata.context.show(i, a, x, y, this, obj, this._get_settings().core.rtl);
                    if (this.data.themes) {
                        $.vakata.context.cnt.attr("class", "jstree-" + this.data.themes.theme + "-context");
                    }
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree types plugin
     * Adds support types of nodes
     * You can set an attribute on each li node, that represents its type.
     * According to the type setting the node may get custom icon/validation rules
     */
    (function ($) {
        $.jstree.plugin("types", {
            __init:function () {
                var s = this._get_settings().types;
                this.data.types.attach_to = [];
                this.get_container()
                    .bind("init.jstree", $.proxy(function () {
                    var types = s.types,
                        attr = s.type_attr,
                        icons_css = "",
                        _this = this;

                    $.each(types, function (i, tp) {
                        $.each(tp, function (k, v) {
                            if (!/^(max_depth|max_children|icon|valid_children)$/.test(k)) {
                                _this.data.types.attach_to.push(k);
                            }
                        });
                        if (!tp.icon) {
                            return true;
                        }
                        if (tp.icon.image || tp.icon.position) {
                            if (i == "default") {
                                icons_css += '.jstree-' + _this.get_index() + ' a > .jstree-icon { ';
                            }
                            else {
                                icons_css += '.jstree-' + _this.get_index() + ' li[' + attr + '="' + i + '"] > a > .jstree-icon { ';
                            }
                            if (tp.icon.image) {
                                icons_css += ' background-image:url(' + tp.icon.image + '); ';
                            }
                            if (tp.icon.position) {
                                icons_css += ' background-position:' + tp.icon.position + '; ';
                            }
                            else {
                                icons_css += ' background-position:0 0; ';
                            }
                            icons_css += '} ';
                        }
                    });
                    if (icons_css !== "") {
                        $.vakata.css.add_sheet({ 'str':icons_css, title:"jstree-types" });
                    }
                }, this))
                    .bind("before.jstree", $.proxy(function (e, data) {
                    var s, t,
                        o = this._get_settings().types.use_data ? this._get_node(data.args[0]) : false,
                        d = o && o !== -1 && o.length ? o.data("jstree") : false;
                    if (d && d.types && d.types[data.func] === false) {
                        e.stopImmediatePropagation();
                        return false;
                    }
                    if ($.inArray(data.func, this.data.types.attach_to) !== -1) {
                        if (!data.args[0] || (!data.args[0].tagName && !data.args[0].jquery)) {
                            return;
                        }
                        s = this._get_settings().types.types;
                        t = this._get_type(data.args[0]);
                        if (
                            (
                                (s[t] && typeof s[t][data.func] !== "undefined") ||
                                    (s["default"] && typeof s["default"][data.func] !== "undefined")
                                ) && this._check(data.func, data.args[0]) === false
                            ) {
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                }, this));
                if (is_ie6) {
                    this.get_container()
                        .bind("load_node.jstree set_type.jstree", $.proxy(function (e, data) {
                        var r = data && data.rslt && data.rslt.obj && data.rslt.obj !== -1 ? this._get_node(data.rslt.obj).parent() : this.get_container_ul(),
                            c = false,
                            s = this._get_settings().types;
                        $.each(s.types, function (i, tp) {
                            if (tp.icon && (tp.icon.image || tp.icon.position)) {
                                c = i === "default" ? r.find("li > a > .jstree-icon") : r.find("li[" + s.type_attr + "='" + i + "'] > a > .jstree-icon");
                                if (tp.icon.image) {
                                    c.css("backgroundImage", "url(" + tp.icon.image + ")");
                                }
                                c.css("backgroundPosition", tp.icon.position || "0 0");
                            }
                        });
                    }, this));
                }
            },
            defaults:{
                // defines maximum number of root nodes (-1 means unlimited, -2 means disable max_children checking)
                max_children:-1,
                // defines the maximum depth of the tree (-1 means unlimited, -2 means disable max_depth checking)
                max_depth:-1,
                // defines valid node types for the root nodes
                valid_children:"all",

                // whether to use $.data
                use_data:false,
                // where is the type stores (the rel attribute of the LI element)
                type_attr:"rel",
                // a list of types
                types:{
                    // the default type
                    "default":{
                        "max_children":-1,
                        "max_depth":-1,
                        "valid_children":"all"

                        // Bound functions - you can bind any other function here (using boolean or function)
                        //"select_node"	: true
                    }
                }
            },
            _fn:{
                _types_notify:function (n, data) {
                    if (data.type && this._get_settings().types.use_data) {
                        this.set_type(data.type, n);
                    }
                },
                _get_type:function (obj) {
                    obj = this._get_node(obj);
                    return (!obj || !obj.length) ? false : obj.attr(this._get_settings().types.type_attr) || "default";
                },
                set_type:function (str, obj) {
                    obj = this._get_node(obj);
                    var ret = (!obj.length || !str) ? false : obj.attr(this._get_settings().types.type_attr, str);
                    if (ret) {
                        this.__callback({ obj:obj, type:str});
                    }
                    return ret;
                },
                _check:function (rule, obj, opts) {
                    obj = this._get_node(obj);
                    var v = false, t = this._get_type(obj), d = 0, _this = this, s = this._get_settings().types, data = false;
                    if (obj === -1) {
                        if (!!s[rule]) {
                            v = s[rule];
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        if (t === false) {
                            return;
                        }
                        data = s.use_data ? obj.data("jstree") : false;
                        if (data && data.types && typeof data.types[rule] !== "undefined") {
                            v = data.types[rule];
                        }
                        else if (!!s.types[t] && typeof s.types[t][rule] !== "undefined") {
                            v = s.types[t][rule];
                        }
                        else if (!!s.types["default"] && typeof s.types["default"][rule] !== "undefined") {
                            v = s.types["default"][rule];
                        }
                    }
                    if ($.isFunction(v)) {
                        v = v.call(this, obj);
                    }
                    if (rule === "max_depth" && obj !== -1 && opts !== false && s.max_depth !== -2 && v !== 0) {
                        // also include the node itself - otherwise if root node it is not checked
                        obj.children("a:eq(0)").parentsUntil(".jstree", "li").each(function (i) {
                            // check if current depth already exceeds global tree depth
                            if (s.max_depth !== -1 && s.max_depth - (i + 1) <= 0) {
                                v = 0;
                                return false;
                            }
                            d = (i === 0) ? v : _this._check(rule, this, false);
                            // check if current node max depth is already matched or exceeded
                            if (d !== -1 && d - (i + 1) <= 0) {
                                v = 0;
                                return false;
                            }
                            // otherwise - set the max depth to the current value minus current depth
                            if (d >= 0 && (d - (i + 1) < v || v < 0)) {
                                v = d - (i + 1);
                            }
                            // if the global tree depth exists and it minus the nodes calculated so far is less than `v` or `v` is unlimited
                            if (s.max_depth >= 0 && (s.max_depth - (i + 1) < v || v < 0)) {
                                v = s.max_depth - (i + 1);
                            }
                        });
                    }
                    return v;
                },
                check_move:function () {
                    if (!this.__call_old()) {
                        return false;
                    }
                    var m = this._get_move(),
                        s = m.rt._get_settings().types,
                        mc = m.rt._check("max_children", m.cr),
                        md = m.rt._check("max_depth", m.cr),
                        vc = m.rt._check("valid_children", m.cr),
                        ch = 0, d = 1, t;

                    if (vc === "none") {
                        return false;
                    }
                    if ($.isArray(vc) && m.ot && m.ot._get_type) {
                        m.o.each(function () {
                            if ($.inArray(m.ot._get_type(this), vc) === -1) {
                                d = false;
                                return false;
                            }
                        });
                        if (d === false) {
                            return false;
                        }
                    }
                    if (s.max_children !== -2 && mc !== -1) {
                        ch = m.cr === -1 ? this.get_container().find("> ul > li").not(m.o).length : m.cr.find("> ul > li").not(m.o).length;
                        if (ch + m.o.length > mc) {
                            return false;
                        }
                    }
                    if (s.max_depth !== -2 && md !== -1) {
                        d = 0;
                        if (md === 0) {
                            return false;
                        }
                        if (typeof m.o.d === "undefined") {
                            // TODO: deal with progressive rendering and async when checking max_depth (how to know the depth of the moved node)
                            t = m.o;
                            while (t.length > 0) {
                                t = t.find("> ul > li");
                                d++;
                            }
                            m.o.d = d;
                        }
                        if (md - m.o.d < 0) {
                            return false;
                        }
                    }
                    return true;
                },
                create_node:function (obj, position, js, callback, is_loaded, skip_check) {
                    if (!skip_check && (is_loaded || this._is_loaded(obj))) {
                        var p = (typeof position == "string" && position.match(/^before|after$/i) && obj !== -1) ? this._get_parent(obj) : this._get_node(obj),
                            s = this._get_settings().types,
                            mc = this._check("max_children", p),
                            md = this._check("max_depth", p),
                            vc = this._check("valid_children", p),
                            ch;
                        if (typeof js === "string") {
                            js = { data:js };
                        }
                        if (!js) {
                            js = {};
                        }
                        if (vc === "none") {
                            return false;
                        }
                        if ($.isArray(vc)) {
                            if (!js.attr || !js.attr[s.type_attr]) {
                                if (!js.attr) {
                                    js.attr = {};
                                }
                                js.attr[s.type_attr] = vc[0];
                            }
                            else {
                                if ($.inArray(js.attr[s.type_attr], vc) === -1) {
                                    return false;
                                }
                            }
                        }
                        if (s.max_children !== -2 && mc !== -1) {
                            ch = p === -1 ? this.get_container().find("> ul > li").length : p.find("> ul > li").length;
                            if (ch + 1 > mc) {
                                return false;
                            }
                        }
                        if (s.max_depth !== -2 && md !== -1 && (md - 1) < 0) {
                            return false;
                        }
                    }
                    return this.__call_old(true, obj, position, js, callback, is_loaded, skip_check);
                }
            }
        });
    })(jQuery);
//*/

    /* 
     * jsTree HTML plugin
     * The HTML data store. Datastores are build by replacing the `load_node` and `_is_loaded` functions.
     */
    (function ($) {
        $.jstree.plugin("html_data", {
            __init:function () {
                // this used to use html() and clean the whitespace, but this way any attached data was lost
                this.data.html_data.original_container_html = this.get_container().find(" > ul > li").clone(true);
                // remove white space from LI node - otherwise nodes appear a bit to the right
                this.data.html_data.original_container_html.find("li").andSelf().contents().filter(function () {
                    return this.nodeType == 3;
                }).remove();
            },
            defaults:{
                data:false,
                ajax:false,
                correct_state:true
            },
            _fn:{
                load_node:function (obj, s_call, e_call) {
                    var _this = this;
                    this.load_node_html(obj, function () {
                        _this.__callback({ "obj":_this._get_node(obj) });
                        s_call.call(this);
                    }, e_call);
                },
                _is_loaded:function (obj) {
                    obj = this._get_node(obj);
                    return obj == -1 || !obj || (!this._get_settings().html_data.ajax && !$.isFunction(this._get_settings().html_data.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
                },
                load_node_html:function (obj, s_call, e_call) {
                    var d,
                        s = this.get_settings().html_data,
                        error_func = function () {
                        },
                        success_func = function () {
                        };
                    obj = this._get_node(obj);
                    if (obj && obj !== -1) {
                        if (obj.data("jstree-is-loading")) {
                            return;
                        }
                        else {
                            obj.data("jstree-is-loading", true);
                        }
                    }
                    switch (!0) {
                        case ($.isFunction(s.data)):
                            s.data.call(this, obj, $.proxy(function (d) {
                                if (d && d !== "" && d.toString && d.toString().replace(/^[\s\n]+$/, "") !== "") {
                                    d = $(d);
                                    if (!d.is("ul")) {
                                        d = $("<ul />").append(d);
                                    }
                                    if (obj == -1 || !obj) {
                                        this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () {
                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                    }
                                    else {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.append(d).children("ul").find("li, a").filter(function () {
                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                        obj.removeData("jstree-is-loading");
                                    }
                                    this.clean_node(obj);
                                    if (s_call) {
                                        s_call.call(this);
                                    }
                                }
                                else {
                                    if (obj && obj !== -1) {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                        if (s.correct_state) {
                                            this.correct_state(obj);
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                    else {
                                        if (s.correct_state) {
                                            this.get_container().children("ul").empty();
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                }
                            }, this));
                            break;
                        case (!s.data && !s.ajax):
                            if (!obj || obj == -1) {
                                this.get_container()
                                    .children("ul").empty()
                                    .append(this.data.html_data.original_container_html)
                                    .find("li, a").filter(function () {
                                        return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                    }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
                                    .filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                this.clean_node();
                            }
                            if (s_call) {
                                s_call.call(this);
                            }
                            break;
                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
                            if (!obj || obj == -1) {
                                d = $(s.data);
                                if (!d.is("ul")) {
                                    d = $("<ul />").append(d);
                                }
                                this.get_container()
                                    .children("ul").empty().append(d.children())
                                    .find("li, a").filter(function () {
                                        return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                    }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
                                    .filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                this.clean_node();
                            }
                            if (s_call) {
                                s_call.call(this);
                            }
                            break;
                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
                            obj = this._get_node(obj);
                            error_func = function (x, t, e) {
                                var ef = this.get_settings().html_data.ajax.error;
                                if (ef) {
                                    ef.call(this, x, t, e);
                                }
                                if (obj != -1 && obj.length) {
                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
                                    obj.removeData("jstree-is-loading");
                                    if (t === "success" && s.correct_state) {
                                        this.correct_state(obj);
                                    }
                                }
                                else {
                                    if (t === "success" && s.correct_state) {
                                        this.get_container().children("ul").empty();
                                    }
                                }
                                if (e_call) {
                                    e_call.call(this);
                                }
                            };
                            success_func = function (d, t, x) {
                                var sf = this.get_settings().html_data.ajax.success;
                                if (sf) {
                                    d = sf.call(this, d, t, x) || d;
                                }
                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "")) {
                                    return error_func.call(this, x, t, "");
                                }
                                if (d) {
                                    d = $(d);
                                    if (!d.is("ul")) {
                                        d = $("<ul />").append(d);
                                    }
                                    if (obj == -1 || !obj) {
                                        this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () {
                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                    }
                                    else {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.append(d).children("ul").find("li, a").filter(function () {
                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
                                        obj.removeData("jstree-is-loading");
                                    }
                                    this.clean_node(obj);
                                    if (s_call) {
                                        s_call.call(this);
                                    }
                                }
                                else {
                                    if (obj && obj !== -1) {
                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
                                        obj.removeData("jstree-is-loading");
                                        if (s.correct_state) {
                                            this.correct_state(obj);
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                    else {
                                        if (s.correct_state) {
                                            this.get_container().children("ul").empty();
                                            if (s_call) {
                                                s_call.call(this);
                                            }
                                        }
                                    }
                                }
                            };
                            s.ajax.context = this;
                            s.ajax.error = error_func;
                            s.ajax.success = success_func;
                            if (!s.ajax.dataType) {
                                s.ajax.dataType = "html";
                            }
                            if ($.isFunction(s.ajax.url)) {
                                s.ajax.url = s.ajax.url.call(this, obj);
                            }
                            if ($.isFunction(s.ajax.data)) {
                                s.ajax.data = s.ajax.data.call(this, obj);
                            }
                            $.ajax(s.ajax);
                            break;
                    }
                }
            }
        });
        // include the HTML data plugin by default
        $.jstree.defaults.plugins.push("html_data");
    })(jQuery);
//*/

    /* 
     * jsTree themeroller plugin
     * Adds support for jQuery UI themes. Include this at the end of your plugins list, also make sure "themes" is not included.
     */
    (function ($) {
        $.jstree.plugin("themeroller", {
            __init:function () {
                var s = this._get_settings().themeroller;
                this.get_container()
                    .addClass("ui-widget-content")
                    .addClass("jstree-themeroller")
                    .delegate("a", "mouseenter.jstree", function (e) {
                        if (!$(e.currentTarget).hasClass("jstree-loading")) {
                            $(this).addClass(s.item_h);
                        }
                    })
                    .delegate("a", "mouseleave.jstree", function () {
                        $(this).removeClass(s.item_h);
                    })
                    .bind("init.jstree", $.proxy(function (e, data) {
                    data.inst.get_container().find("> ul > li > .jstree-loading > ins").addClass("ui-icon-refresh");
                    this._themeroller(data.inst.get_container().find("> ul > li"));
                }, this))
                    .bind("open_node.jstree create_node.jstree", $.proxy(function (e, data) {
                    this._themeroller(data.rslt.obj);
                }, this))
                    .bind("loaded.jstree refresh.jstree", $.proxy(function (e) {
                    this._themeroller();
                }, this))
                    .bind("close_node.jstree", $.proxy(function (e, data) {
                    this._themeroller(data.rslt.obj);
                }, this))
                    .bind("delete_node.jstree", $.proxy(function (e, data) {
                    this._themeroller(data.rslt.parent);
                }, this))
                    .bind("correct_state.jstree", $.proxy(function (e, data) {
                    data.rslt.obj
                        .children("ins.jstree-icon").removeClass(s.opened + " " + s.closed + " ui-icon").end()
                        .find("> a > ins.ui-icon")
                        .filter(function () {
                            return this.className.toString()
                                .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
                                .indexOf("ui-icon-") === -1;
                        }).removeClass(s.item_open + " " + s.item_clsd).addClass(s.item_leaf || "jstree-no-icon");
                }, this))
                    .bind("select_node.jstree", $.proxy(function (e, data) {
                    data.rslt.obj.children("a").addClass(s.item_a);
                }, this))
                    .bind("deselect_node.jstree deselect_all.jstree", $.proxy(function (e, data) {
                    this.get_container()
                        .find("a." + s.item_a).removeClass(s.item_a).end()
                        .find("a.jstree-clicked").addClass(s.item_a);
                }, this))
                    .bind("dehover_node.jstree", $.proxy(function (e, data) {
                    data.rslt.obj.children("a").removeClass(s.item_h);
                }, this))
                    .bind("hover_node.jstree", $.proxy(function (e, data) {
                    this.get_container()
                        .find("a." + s.item_h).not(data.rslt.obj).removeClass(s.item_h);
                    data.rslt.obj.children("a").addClass(s.item_h);
                }, this))
                    .bind("move_node.jstree", $.proxy(function (e, data) {
                    this._themeroller(data.rslt.o);
                    this._themeroller(data.rslt.op);
                }, this));
            },
            __destroy:function () {
                var s = this._get_settings().themeroller,
                    c = [ "ui-icon" ];
                $.each(s, function (i, v) {
                    v = v.split(" ");
                    if (v.length) {
                        c = c.concat(v);
                    }
                });
                this.get_container()
                    .removeClass("ui-widget-content")
                    .find("." + c.join(", .")).removeClass(c.join(" "));
            },
            _fn:{
                _themeroller:function (obj) {
                    var s = this._get_settings().themeroller;
                    obj = !obj || obj == -1 ? this.get_container_ul() : this._get_node(obj).parent();
                    obj
                        .find("li.jstree-closed")
                        .children("ins.jstree-icon").removeClass(s.opened).addClass("ui-icon " + s.closed).end()
                        .children("a").addClass(s.item)
                        .children("ins.jstree-icon").addClass("ui-icon")
                        .filter(function () {
                            return this.className.toString()
                                .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
                                .indexOf("ui-icon-") === -1;
                        }).removeClass(s.item_leaf + " " + s.item_open).addClass(s.item_clsd || "jstree-no-icon")
                        .end()
                        .end()
                        .end()
                        .end()
                        .find("li.jstree-open")
                        .children("ins.jstree-icon").removeClass(s.closed).addClass("ui-icon " + s.opened).end()
                        .children("a").addClass(s.item)
                        .children("ins.jstree-icon").addClass("ui-icon")
                        .filter(function () {
                            return this.className.toString()
                                .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
                                .indexOf("ui-icon-") === -1;
                        }).removeClass(s.item_leaf + " " + s.item_clsd).addClass(s.item_open || "jstree-no-icon")
                        .end()
                        .end()
                        .end()
                        .end()
                        .find("li.jstree-leaf")
                        .children("ins.jstree-icon").removeClass(s.closed + " ui-icon " + s.opened).end()
                        .children("a").addClass(s.item)
                        .children("ins.jstree-icon").addClass("ui-icon")
                        .filter(function () {
                            return this.className.toString()
                                .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
                                .indexOf("ui-icon-") === -1;
                        }).removeClass(s.item_clsd + " " + s.item_open).addClass(s.item_leaf || "jstree-no-icon");
                }
            },
            defaults:{
                "opened":"ui-icon-triangle-1-se",
                "closed":"ui-icon-triangle-1-e",
                "item":"ui-state-default",
                "item_h":"ui-state-hover",
                "item_a":"ui-state-active",
                "item_open":"ui-icon-folder-open",
                "item_clsd":"ui-icon-folder-collapsed",
                "item_leaf":"ui-icon-document"
            }
        });
        $(function () {
            var css_string = '' +
                '.jstree-themeroller .ui-icon { overflow:visible; } ' +
                '.jstree-themeroller a { padding:0 2px; } ' +
                '.jstree-themeroller .jstree-no-icon { display:none; }';
            $.vakata.css.add_sheet({ str:css_string, title:"jstree" });
        });
    })(jQuery);
//*/

    /* 
     * jsTree unique plugin
     * Forces different names amongst siblings (still a bit experimental)
     * NOTE: does not check language versions (it will not be possible to have nodes with the same title, even in different languages)
     */
    (function ($) {
        $.jstree.plugin("unique", {
            __init:function () {
                this.get_container()
                    .bind("before.jstree", $.proxy(function (e, data) {
                    var nms = [], res = true, p, t;
                    if (data.func == "move_node") {
                        // obj, ref, position, is_copy, is_prepared, skip_check
                        if (data.args[4] === true) {
                            if (data.args[0].o && data.args[0].o.length) {
                                data.args[0].o.children("a").each(function () {
                                    nms.push($(this).text().replace(/^\s+/g, ""));
                                });
                                res = this._check_unique(nms, data.args[0].np.find("> ul > li").not(data.args[0].o), "move_node");
                            }
                        }
                    }
                    if (data.func == "create_node") {
                        // obj, position, js, callback, is_loaded
                        if (data.args[4] || this._is_loaded(data.args[0])) {
                            p = this._get_node(data.args[0]);
                            if (data.args[1] && (data.args[1] === "before" || data.args[1] === "after")) {
                                p = this._get_parent(data.args[0]);
                                if (!p || p === -1) {
                                    p = this.get_container();
                                }
                            }
                            if (typeof data.args[2] === "string") {
                                nms.push(data.args[2]);
                            }
                            else if (!data.args[2] || !data.args[2].data) {
                                nms.push(this._get_string("new_node"));
                            }
                            else {
                                nms.push(data.args[2].data);
                            }
                            res = this._check_unique(nms, p.find("> ul > li"), "create_node");
                        }
                    }
                    if (data.func == "rename_node") {
                        // obj, val
                        nms.push(data.args[1]);
                        t = this._get_node(data.args[0]);
                        p = this._get_parent(t);
                        if (!p || p === -1) {
                            p = this.get_container();
                        }
                        res = this._check_unique(nms, p.find("> ul > li").not(t), "rename_node");
                    }
                    if (!res) {
                        e.stopPropagation();
                        return false;
                    }
                }, this));
            },
            defaults:{
                error_callback:$.noop
            },
            _fn:{
                _check_unique:function (nms, p, func) {
                    var cnms = [];
                    p.children("a").each(function () {
                        cnms.push($(this).text().replace(/^\s+/g, ""));
                    });
                    if (!cnms.length || !nms.length) {
                        return true;
                    }
                    cnms = cnms.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",");
                    if ((cnms.length + nms.length) != cnms.concat(nms).sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",").length) {
                        this._get_settings().unique.error_callback.call(null, nms, p, func);
                        return false;
                    }
                    return true;
                },
                check_move:function () {
                    if (!this.__call_old()) {
                        return false;
                    }
                    var p = this._get_move(), nms = [];
                    if (p.o && p.o.length) {
                        p.o.children("a").each(function () {
                            nms.push($(this).text().replace(/^\s+/g, ""));
                        });
                        return this._check_unique(nms, p.np.find("> ul > li").not(p.o), "check_move");
                    }
                    return true;
                }
            }
        });
    })(jQuery);
//*/

    /*
     * jsTree wholerow plugin
     * Makes select and hover work on the entire width of the node
     * MAY BE HEAVY IN LARGE DOM
     */
    (function ($) {
        $.jstree.plugin("wholerow", {
            __init:function () {
                if (!this.data.ui) {
                    throw "jsTree wholerow: jsTree UI plugin not included.";
                }
                this.data.wholerow.html = false;
                this.data.wholerow.to = false;
                this.get_container()
                    .bind("init.jstree", $.proxy(function (e, data) {
                    this._get_settings().core.animation = 0;
                }, this))
                    .bind("open_node.jstree create_node.jstree clean_node.jstree loaded.jstree", $.proxy(function (e, data) {
                    this._prepare_wholerow_span(data && data.rslt && data.rslt.obj ? data.rslt.obj : -1);
                }, this))
                    .bind("search.jstree clear_search.jstree reopen.jstree after_open.jstree after_close.jstree create_node.jstree delete_node.jstree clean_node.jstree", $.proxy(function (e, data) {
                    if (this.data.to) {
                        clearTimeout(this.data.to);
                    }
                    this.data.to = setTimeout((function (t, o) {
                        return function () {
                            t._prepare_wholerow_ul(o);
                        };
                    })(this, data && data.rslt && data.rslt.obj ? data.rslt.obj : -1), 0);
                }, this))
                    .bind("deselect_all.jstree", $.proxy(function (e, data) {
                    this.get_container().find(" > .jstree-wholerow .jstree-clicked").removeClass("jstree-clicked " + (this.data.themeroller ? this._get_settings().themeroller.item_a : "" ));
                }, this))
                    .bind("select_node.jstree deselect_node.jstree ", $.proxy(function (e, data) {
                    data.rslt.obj.each(function () {
                        var ref = data.inst.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt((($(this).offset().top - data.inst.get_container().offset().top + data.inst.get_container()[0].scrollTop) / data.inst.data.core.li_height), 10)) + ")");
                        // ref.children("a")[e.type === "select_node" ? "addClass" : "removeClass"]("jstree-clicked");
                        ref.children("a").attr("class", data.rslt.obj.children("a").attr("class"));
                    });
                }, this))
                    .bind("hover_node.jstree dehover_node.jstree", $.proxy(function (e, data) {
                    this.get_container().find(" > .jstree-wholerow .jstree-hovered").removeClass("jstree-hovered " + (this.data.themeroller ? this._get_settings().themeroller.item_h : "" ));
                    if (e.type === "hover_node") {
                        var ref = this.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt(((data.rslt.obj.offset().top - this.get_container().offset().top + this.get_container()[0].scrollTop) / this.data.core.li_height), 10)) + ")");
                        // ref.children("a").addClass("jstree-hovered");
                        ref.children("a").attr("class", data.rslt.obj.children(".jstree-hovered").attr("class"));
                    }
                }, this))
                    .delegate(".jstree-wholerow-span, ins.jstree-icon, li", "click.jstree", function (e) {
                        var n = $(e.currentTarget);
                        if (e.target.tagName === "A" || (e.target.tagName === "INS" && n.closest("li").is(".jstree-open, .jstree-closed"))) {
                            return;
                        }
                        n.closest("li").children("a:visible:eq(0)").click();
                        e.stopImmediatePropagation();
                    })
                    .delegate("li", "mouseover.jstree", $.proxy(function (e) {
                    e.stopImmediatePropagation();
                    if ($(e.currentTarget).children(".jstree-hovered, .jstree-clicked").length) {
                        return false;
                    }
                    this.hover_node(e.currentTarget);
                    return false;
                }, this))
                    .delegate("li", "mouseleave.jstree", $.proxy(function (e) {
                    if ($(e.currentTarget).children("a").hasClass("jstree-hovered").length) {
                        return;
                    }
                    this.dehover_node(e.currentTarget);
                }, this));
                if (is_ie7 || is_ie6) {
                    $.vakata.css.add_sheet({ str:".jstree-" + this.get_index() + " { position:relative; } ", title:"jstree" });
                }
            },
            defaults:{
            },
            __destroy:function () {
                this.get_container().children(".jstree-wholerow").remove();
                this.get_container().find(".jstree-wholerow-span").remove();
            },
            _fn:{
                _prepare_wholerow_span:function (obj) {
                    obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
                    if (obj === false) {
                        return;
                    } // added for removing root nodes
                    obj.each(function () {
                        $(this).find("li").andSelf().each(function () {
                            var $t = $(this);
                            if ($t.children(".jstree-wholerow-span").length) {
                                return true;
                            }
                            $t.prepend("<span class='jstree-wholerow-span' style='width:" + ($t.parentsUntil(".jstree", "li").length * 18) + "px;'>&#160;</span>");
                        });
                    });
                },
                _prepare_wholerow_ul:function () {
                    var o = this.get_container().children("ul").eq(0), h = o.html();
                    o.addClass("jstree-wholerow-real");
                    if (this.data.wholerow.last_html !== h) {
                        this.data.wholerow.last_html = h;
                        this.get_container().children(".jstree-wholerow").remove();
                        this.get_container().append(
                            o.clone().removeClass("jstree-wholerow-real")
                                .wrapAll("<div class='jstree-wholerow' />").parent()
                                .width(o.parent()[0].scrollWidth)
                                .css("top", (o.height() + ( is_ie7 ? 5 : 0)) * -1)
                                .find("li[id]").each(function () {
                                    this.removeAttribute("id");
                                }).end()
                        );
                    }
                }
            }
        });
        $(function () {
            var css_string = '' +
                '.jstree .jstree-wholerow-real { position:relative; z-index:1; } ' +
                '.jstree .jstree-wholerow-real li { cursor:pointer; } ' +
                '.jstree .jstree-wholerow-real a { border-left-color:transparent !important; border-right-color:transparent !important; } ' +
                '.jstree .jstree-wholerow { position:relative; z-index:0; height:0; } ' +
                '.jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { width:100%; } ' +
                '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li, .jstree .jstree-wholerow a { margin:0 !important; padding:0 !important; } ' +
                '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { background:transparent !important; }' +
                '.jstree .jstree-wholerow ins, .jstree .jstree-wholerow span, .jstree .jstree-wholerow input { display:none !important; }' +
                '.jstree .jstree-wholerow a, .jstree .jstree-wholerow a:hover { text-indent:-9999px; !important; width:100%; padding:0 !important; border-right-width:0px !important; border-left-width:0px !important; } ' +
                '.jstree .jstree-wholerow-span { position:absolute; left:0; margin:0px; padding:0; height:18px; border-width:0; padding:0; z-index:0; }';
            if (is_ff2) {
                css_string += '' +
                    '.jstree .jstree-wholerow a { display:block; height:18px; margin:0; padding:0; border:0; } ' +
                    '.jstree .jstree-wholerow-real a { border-color:transparent !important; } ';
            }
            if (is_ie7 || is_ie6) {
                css_string += '' +
                    '.jstree .jstree-wholerow, .jstree .jstree-wholerow li, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow a { margin:0; padding:0; line-height:18px; } ' +
                    '.jstree .jstree-wholerow a { display:block; height:18px; line-height:18px; overflow:hidden; } ';
            }
            $.vakata.css.add_sheet({ str:css_string, title:"jstree" });
        });
    })(jQuery);
//*/

    /*
     * jsTree model plugin
     * This plugin gets jstree to use a class model to retrieve data, creating great dynamism
     */
    (function ($) {
        var nodeInterface = ["getChildren", "getChildrenCount", "getAttr", "getName", "getProps"],
            validateInterface = function (obj, inter) {
                var valid = true;
                obj = obj || {};
                inter = [].concat(inter);
                $.each(inter, function (i, v) {
                    if (!$.isFunction(obj[v])) {
                        valid = false;
                        return false;
                    }
                });
                return valid;
            };
        $.jstree.plugin("model", {
            __init:function () {
                if (!this.data.json_data) {
                    throw "jsTree model: jsTree json_data plugin not included.";
                }
                this._get_settings().json_data.data = function (n, b) {
                    var obj = (n == -1) ? this._get_settings().model.object : n.data("jstree_model");
                    if (!validateInterface(obj, nodeInterface)) {
                        return b.call(null, false);
                    }
                    if (this._get_settings().model.async) {
                        obj.getChildren($.proxy(function (data) {
                            this.model_done(data, b);
                        }, this));
                    }
                    else {
                        this.model_done(obj.getChildren(), b);
                    }
                };
            },
            defaults:{
                object:false,
                id_prefix:false,
                async:false
            },
            _fn:{
                model_done:function (data, callback) {
                    var ret = [],
                        s = this._get_settings(),
                        _this = this;

                    if (!$.isArray(data)) {
                        data = [data];
                    }
                    $.each(data, function (i, nd) {
                        var r = nd.getProps() || {};
                        r.attr = nd.getAttr() || {};
                        if (nd.getChildrenCount()) {
                            r.state = "closed";
                        }
                        r.data = nd.getName();
                        if (!$.isArray(r.data)) {
                            r.data = [r.data];
                        }
                        if (_this.data.types && $.isFunction(nd.getType)) {
                            r.attr[s.types.type_attr] = nd.getType();
                        }
                        if (r.attr.id && s.model.id_prefix) {
                            r.attr.id = s.model.id_prefix + r.attr.id;
                        }
                        if (!r.metadata) {
                            r.metadata = { };
                        }
                        r.metadata.jstree_model = nd;
                        ret.push(r);
                    });
                    callback.call(null, ret);
                }
            }
        });
    })(jQuery);
//*/

})();
// jQuery Alert Dialogs Plugin
//
// Version 1.1
//
// Cory S.N. LaViska
// A Beautiful Site (http://abeautifulsite.net/)
// 14 May 2009
//
// Visit http://abeautifulsite.net/notebook/87 for more information
//
// Usage:
//		jAlert( message, [title, callback] )
//		jConfirm( message, [title, callback] )
//		jPrompt( message, [value, title, callback] )
// 
// History:
//
//		1.00 - Released (29 December 2008)
//
//		1.01 - Fixed bug where unbinding would destroy all resize events
//
// License:
// 
// This plugin is dual-licensed under the GNU General Public License and the MIT License and
// is copyright 2008 A Beautiful Site, LLC. 
//
(function ($) {

    $.alerts = {

        // These properties can be read/written by accessing $.alerts.propertyName from your scripts at any time

        verticalOffset:-75, // vertical offset of the dialog from center screen, in pixels
        horizontalOffset:0, // horizontal offset of the dialog from center screen, in pixels/
        repositionOnResize:true, // re-centers the dialog on window resize
        overlayOpacity:.01, // transparency level of overlay
        overlayColor:'#FFF', // base color of overlay
        draggable:true, // make the dialogs draggable (requires UI Draggables plugin)
        okButton:'&nbsp;OK&nbsp;', // text for the OK button
        cancelButton:'&nbsp;Cancel&nbsp;', // text for the Cancel button
        dialogClass:null, // if specified, this class will be applied to all dialogs

        // Public methods

        alert:function (message, title, callback) {
            if (title == null) title = 'Alert';
            $.alerts._show(title, message, null, 'alert', function (result) {
                if (callback) callback(result);
            });
        },

        confirm:function (message, title, callback) {
            if (title == null) title = 'Confirm';
            $.alerts._show(title, message, null, 'confirm', function (result) {
                if (callback) callback(result);
            });
        },

        prompt:function (message, value, title, callback) {
            if (title == null) title = 'Prompt';
            $.alerts._show(title, message, value, 'prompt', function (result) {
                if (callback) callback(result);
            });
        },

        // Private methods

        _show:function (title, msg, value, type, callback) {

            $.alerts._hide();
            $.alerts._overlay('show');

            $("BODY").append(
                '<div id="popup_container">' +
                    '<h1 id="popup_title"></h1>' +
                    '<div id="popup_content">' +
                    '<div id="popup_message"></div>' +
                    '</div>' +
                    '</div>');

            if ($.alerts.dialogClass) $("#popup_container").addClass($.alerts.dialogClass);

            // IE6 Fix
            var pos = ($.browser.msie && parseInt($.browser.version) <= 6 ) ? 'absolute' : 'fixed';

            $("#popup_container").css({
                position:pos,
                zIndex:99999,
                padding:0,
                margin:0
            });

            $("#popup_title").text(title);
            $("#popup_content").addClass(type);
            $("#popup_message").text(msg);
            $("#popup_message").html($("#popup_message").text().replace(/\n/g, '<br />'));

            $("#popup_container").css({
                minWidth:$("#popup_container").outerWidth(),
                maxWidth:$("#popup_container").outerWidth()
            });

            $.alerts._reposition();
            $.alerts._maintainPosition(true);

            switch (type) {
                case 'alert':
                    $("#popup_message").after('<div id="popup_panel"><input type="button" value="' + $.alerts.okButton + '" id="popup_ok" /></div>');
                    $("#popup_ok").click(function () {
                        $.alerts._hide();
                        callback(true);
                    });
                    $("#popup_ok").focus().keypress(function (e) {
                        if (e.keyCode == 13 || e.keyCode == 27) $("#popup_ok").trigger('click');
                    });
                    break;
                case 'confirm':
                    $("#popup_message").after('<div id="popup_panel"><input type="button" value="' + $.alerts.okButton + '" id="popup_ok" /> <input type="button" value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
                    $("#popup_ok").click(function () {
                        $.alerts._hide();
                        if (callback) callback(true);
                    });
                    $("#popup_cancel").click(function () {
                        $.alerts._hide();
                        if (callback) callback(false);
                    });
                    $("#popup_ok").focus();
                    $("#popup_ok, #popup_cancel").keypress(function (e) {
                        if (e.keyCode == 13) $("#popup_ok").trigger('click');
                        if (e.keyCode == 27) $("#popup_cancel").trigger('click');
                    });
                    break;
                case 'prompt':
                    $("#popup_message").append('<br /><input type="text" size="30" id="popup_prompt" />').after('<div id="popup_panel"><input type="button" value="' + $.alerts.okButton + '" id="popup_ok" /> <input type="button" value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
                    $("#popup_prompt").width($("#popup_message").width());
                    $("#popup_ok").click(function () {
                        var val = $("#popup_prompt").val();
                        $.alerts._hide();
                        if (callback) callback(val);
                    });
                    $("#popup_cancel").click(function () {
                        $.alerts._hide();
                        if (callback) callback(null);
                    });
                    $("#popup_prompt, #popup_ok, #popup_cancel").keypress(function (e) {
                        if (e.keyCode == 13) $("#popup_ok").trigger('click');
                        if (e.keyCode == 27) $("#popup_cancel").trigger('click');
                    });
                    if (value) $("#popup_prompt").val(value);
                    $("#popup_prompt").focus().select();
                    break;
            }

            // Make draggable
            if ($.alerts.draggable) {
                try {
                    $("#popup_container").draggable({ handle:$("#popup_title") });
                    $("#popup_title").css({ cursor:'move' });
                } catch (e) { /* requires jQuery UI draggables */
                }
            }
        },

        _hide:function () {
            $("#popup_container").remove();
            $.alerts._overlay('hide');
            $.alerts._maintainPosition(false);
        },

        _overlay:function (status) {
            switch (status) {
                case 'show':
                    $.alerts._overlay('hide');
                    $("BODY").append('<div id="popup_overlay"></div>');
                    $("#popup_overlay").css({
                        position:'absolute',
                        zIndex:99998,
                        top:'0px',
                        left:'0px',
                        width:'100%',
                        height:$(document).height(),
                        background:$.alerts.overlayColor,
                        opacity:$.alerts.overlayOpacity
                    });
                    break;
                case 'hide':
                    $("#popup_overlay").remove();
                    break;
            }
        },

        _reposition:function () {
            var top = (($(window).height() / 2) - ($("#popup_container").outerHeight() / 2)) + $.alerts.verticalOffset;
            var left = (($(window).width() / 2) - ($("#popup_container").outerWidth() / 2)) + $.alerts.horizontalOffset;
            if (top < 0) top = 0;
            if (left < 0) left = 0;

            // IE6 fix
            if ($.browser.msie && parseInt($.browser.version) <= 6) top = top + $(window).scrollTop();

            $("#popup_container").css({
                top:top + 'px',
                left:left + 'px'
            });
            $("#popup_overlay").height($(document).height());
        },

        _maintainPosition:function (status) {
            if ($.alerts.repositionOnResize) {
                switch (status) {
                    case true:
                        $(window).bind('resize', $.alerts._reposition);
                        break;
                    case false:
                        $(window).unbind('resize', $.alerts._reposition);
                        break;
                }
            }
        }

    }

    // Shortuct functions
    jAlert = function (message, title, callback) {
        $.alerts.alert(message, title, callback);
    }

    jConfirm = function (message, title, callback) {
        $.alerts.confirm(message, title, callback);
    };

    jPrompt = function (message, value, title, callback) {
        $.alerts.prompt(message, value, title, callback);
    };

})(jQuery);
var update_state = function (region) {
    var country = $('span#' + region + 'country :only-child').val();
    var states = state_mapper[country];

    var state_select = $('span#' + region + 'state select');
    var state_input = $('span#' + region + 'state input');

    if (states) {
        state_select.html('');
        var states_with_blank = [
            ["", ""]
        ].concat(states);
        $.each(states_with_blank, function (pos, id_nm) {
            var opt = $(document.createElement('option'))
                .attr('value', id_nm[0])
                .html(id_nm[1]);
            state_select.append(opt);
        });
        state_select.prop("disabled", false).show();
        state_input.hide().prop("disabled", true);

    } else {
        state_input.prop("disabled", false).show();
        state_select.hide().prop("disabled", true);
    }

};
//= require_self

/**
 This is a collection of javascript functions and whatnot
 under the spree namespace that do stuff we find helpful.
 Hopefully, this will evolve into a propper class.
 **/

$(document).ajaxStart(function () {
    $("#progress").slideDown();
});

$(document).ajaxStop(function () {
    $("#progress").slideUp();
});

$.fn.visible = function (cond) {
    this[cond ? 'show' : 'hide' ]()
};

show_flash_error = function (message) {
    error_div = $('.flash.error');
    if (error_div.length > 0) {
        error_div.html(message);
        error_div.show();
    } else {
        if ($("#content .toolbar").length > 0) {
            $("#content .toolbar").before('<div class="flash error">' + message + '</div>');
        } else {
            $("#content h1").before('<div class="flash error">' + message + '</div>');
        }
    }
}

// Apply to individual radio button that makes another element visible when checked
$.fn.radioControlsVisibilityOfElement = function (dependentElementSelector) {
    if (!this.get(0)) {
        return
    }
    showValue = this.get(0).value;
    radioGroup = $("input[name='" + this.get(0).name + "']");
    radioGroup.each(function () {
        $(this).click(function () {
            $(dependentElementSelector).visible(this.checked && this.value == showValue)
        });
        if (this.checked) {
            this.click()
        }
    });
}

// Product autocompletion
image_html = function (item) {
    return "<img src='" + item['images'][0]["mini_url"] + "'/>";
}

format_product_autocomplete = function (item) {
    var html = "";

    var product = item.data['product'];

    if (item.data['variant'] == undefined) {
        if (product['images'].length != 0) {
            html = image_html(product);
        }

        html += "<div><h4>" + product['name'] + "</h4>";
        html += "<span><strong>Sku: </strong>" + product['master']['sku'] + "</span>";
        html += "<span><strong>On Hand: </strong>" + product['count_on_hand'] + "</span></div>";
    } else {
        // variant
        var variant = item.data['variant'];
        var name = item.data.product['name'];

        if (variant['images'].length != 0) {
            html = image_html(variant);
        } else {
            if (product['images'].length != 0) {
                html = image_html(product);
            }
        }

        name += " - " + $.map(variant['option_values'],function (option_value) {
            return option_value["option_type"]["presentation"] + ": " + option_value['name'];
        }).join(", ")

        html += "<div><h4>" + name + "</h4>";
        html += "<span><strong>Sku: </strong>" + variant['sku'] + "</span>";
        html += "<span><strong>On Hand: </strong>" + variant['count_on_hand'] + "</span></div>";
    }

    return html
}

prep_product_autocomplete_data = function (data) {
    return $.map(eval(data), function (row) {

        var product = row['product'];

        if (product['variants'].length > 0 && ['expand_variants']) {
            //variants
            return $.map(product['variants'], function (variant) {

                var name = product['name'];
                name += " - " + $.map(variant['option_values'],function (option_value) {
                    return option_value["option_type"]["presentation"] + ": " + option_value['name'];
                }).join(", ");

                return {
                    data:{product:product, variant:variant},
                    value:name,
                    result:name
                }
            });
        } else {
            return {
                data:{product:product},
                value:product['name'],
                result:product['name']
            }
        }
    });
}

$.fn.product_autocomplete = function () {
    return this.each(function () {
        $(this).autocomplete({
            source:function (request, response) {
                $.get(ajax_root_prefix() + "admin/products.json?q=" + $('#add_product_name').val() + "&authenticity_token=" + encodeURIComponent($('meta[name=csrf-token]').attr("content")), function (data) {
                    result = prep_product_autocomplete_data(data)
                    response(result);
                });
            },
            minLength:4,
            focus:function (event, ui) {
                $('#add_product_name').val(ui.item.label);
                return false;
            },
            select:function (event, ui) {
                $('#add_product_name').val(ui.item.label);
                product = ui.item.data;
                if (product['variant'] == undefined) {
                    // product
                    $('#add_variant_id').val(product['product']['master']['id']);
                } else {
                    // variant
                    $('#add_variant_id').val(product['variant']['id']);
                }
                return false;
            }
        }).data("autocomplete")._renderItem = function (ul, item) {
            $(ul).addClass('ac_results');
            html = format_product_autocomplete(item);
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<a>" + html + "</a>")
                .appendTo(ul);
        }

        $(this).data("autocomplete")._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
        }
    });
}

$.fn.objectPicker = function (url) {
    $(this).tokenInput(url + "&authenticity_token=" + escape(AUTH_TOKEN), {
        searchDelay:600,
        hintText:strings.type_to_search,
        noResultsText:strings.no_results,
        searchingText:strings.searching,
        prePopulateFromInput:true
    });
};

$.fn.productPicker = function () {
    $(this).objectPicker(ajax_urls.product_search_basic_json);
}
$.fn.userPicker = function () {
    $(this).objectPicker(ajax_urls.user_search_basic_json);
}

// Possible defunct
add_fields = function (target, association, content) {
    var new_id = new Date().getTime();
    var regexp = new RegExp("new_" + association, "g");
    $(target).append(content.replace(regexp, new_id));
}

$('a.remove_fields').live('click', function () {
    $(this).prev("input[type=hidden]").val("1");
    $(this).closest(".fields").hide();
    return false;
});

$(".observe_field").live('change', function () {
    target = $(this).attr("data-update");
    ajax_indicator = $(this).attr("data-ajax-indicator") || '#busy_indicator';
    $(target).hide();
    $(ajax_indicator).show();
    $.ajax({ dataType:'html',
        url:$(this).attr("data-base-url") + encodeURIComponent($(this).val()),
        type:'get',
        success:function (data) {
            $(target).html(data);
            $(ajax_indicator).hide();
            $(target).show();
        }
    });
});

handle_date_picker_fields = function () {
    $('.datepicker').datepicker({
        dateFormat:"yy/mm/dd",
        dayNames:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesMin:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        monthNames:["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        prevText:'Previous',
        nextText:'Next',
        showOn:"button",
        buttonImage:"/assets/datepicker/cal.gif",
        buttonImageOnly:true
    });
}

$(document).ready(function () {

    $('.tokeninput.products').productPicker();
    $('.tokeninput.users').userPicker();

    handle_date_picker_fields();

    $(".select_properties_from_prototype").live("click", function () {
        $("#busy_indicator").show();
        var clicked_link = $(this);
        $.ajax({ dataType:'script', url:clicked_link.attr("href"), type:'get',
            success:function (data) {
                clicked_link.parent("td").parent("tr").hide();
                $("#busy_indicator").hide();
            }
        });
        return false;
    });


    $('table.sortable').ready(function () {
        $('table.sortable tbody').sortable(
            {
                handle:'.handle',
                update:function (event, ui) {
                    $("#progress").show();
                    positions = {};
                    $.each($('table.sortable tbody tr'), function (position, obj) {
                        reg = /spree_(\w+_?)+_(\d+)/;
                        parts = reg.exec($(obj).attr('id'));
                        if (parts) {
                            positions['positions[' + parts[2] + ']'] = position;
                        }
                    });
                    $.ajax({
                        type:'POST',
                        dataType:'script',
                        url:$(ui.item).closest("table.sortable").data("sortable-link"),
                        data:positions,
                        success:function (data) {
                            $("#progress").hide();
                        }
                    });
                }
            });
    });

});

jQuery(document).ready(function () {
    $('a.dismiss').click(function () {
        $(this).parent().fadeOut();
    });
});
$(function () {
    var calculator_select = $('select#calc_type')
    var original_calc_type = calculator_select.attr('value');
    $('div#calculator-settings-warning').hide();
    calculator_select.change(function () {
        if (calculator_select.attr('value') == original_calc_type) {
            $('div.calculator-settings').show();
            $('div#calculator-settings-warning').hide();
            $('.calculator-settings input').prop("disabled", false);
        } else {
            $('div.calculator-settings').hide();
            $('div#calculator-settings-warning').show();
            $('.calculator-settings input').prop("disabled", true);
        }
    });
})
;
$(document).ready(function () {
    add_address = function (addr) {
        var html = "";
        if (addr != undefined) {
            html += addr['firstname'] + " " + addr['lastname'] + ", ";
            html += addr['address1'] + ", " + addr['address2'] + ", ";
            html += addr['city'] + ", ";

            if (addr['state_id'] != null) {
                html += addr['state']['name'] + ", ";
            } else {
                html += addr['state_name'] + ", ";
            }

            html += addr['country']['name'];
        }
        return html;
    }

    format_user_autocomplete = function (item) {
        var data = item.data
        var html = "<h4>" + data['email'] + "</h4>";
        html += "<span><strong>Billing:</strong> ";
        html += add_address(data['bill_address']);
        html += "</span>";

        html += "<span><strong>Shipping:</strong> ";
        html += add_address(data['ship_address']);
        html += "</span>";

        return html
    }

    prep_user_autocomplete_data = function (data) {
        return $.map(eval(data), function (row) {
            return {
                data:row['user'],
                value:row['user']['email'],
                result:row['user']['email']
            }
        });
    }

    if ($("#customer_search").length > 0) {
        $("#customer_search").autocomplete({
            minChars:5,
            delay:1500,
            source:function (request, response) {
                $.get(ajax_root_prefix() + "admin/users.json?q=" + $("#customer_search").val() + "&authenticity_token=" + encodeURIComponent($('meta[name=csrf-token]').attr("content")), function (data) {
                    result = prep_user_autocomplete_data(data)
                    response(result);
                });
            },
            focus:function (event, ui) {
                $('#customer_search').val(ui.item.label);
                $(ui).addClass('ac_over');
                return false;
            },
            select:function (event, ui) {
                $('#customer_search').val(ui.item.label);
                _.each(['bill', 'ship'], function (addr_name) {
                    var addr = ui.item.data[addr_name + '_address'];
                    if (addr != undefined) {
                        $('#order_' + addr_name + '_address_attributes_firstname').val(addr['firstname']);
                        $('#order_' + addr_name + '_address_attributes_lastname').val(addr['lastname']);
                        $('#order_' + addr_name + '_address_attributes_company').val(addr['company']);
                        $('#order_' + addr_name + '_address_attributes_address1').val(addr['address1']);
                        $('#order_' + addr_name + '_address_attributes_address2').val(addr['address2']);
                        $('#order_' + addr_name + '_address_attributes_city').val(addr['city']);
                        $('#order_' + addr_name + '_address_attributes_zipcode').val(addr['zipcode']);
                        $('#order_' + addr_name + '_address_attributes_state_id').val(addr['state_id']);
                        $('#order_' + addr_name + '_address_attributes_country_id').val(addr['country_id']);
                        $('#order_' + addr_name + '_address_attributes_phone').val(addr['phone']);
                    }
                });

                $('#order_email').val(ui.item.data['email']);
                $('#user_id').val(ui.item.data['id']);
                $('#guest_checkout_true').prop("checked", false);
                $('#guest_checkout_false').prop("checked", true);
                return true;
            }
        }).data("autocomplete")._renderItem = function (ul, item) {
            $(ul).addClass('ac_results');
            html = format_user_autocomplete(item);
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<a class='ui-menu-item'>" + html + "</a>")
                .appendTo(ul);
        }

        $("#customer_search").data("autocomplete")._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
        }


    }


    $('input#order_use_billing').click(function () {
        show_billing(!$(this).is(':checked'));
    });

    $('#guest_checkout_true').change(function () {
        $('#customer_search').val("");
        $('#user_id').val("");
        $('#checkout_email').val("");
        $('#guest_checkout_false').prop("disabled", true);

        $('#order_bill_address_attributes_firstname').val("");
        $('#order_bill_address_attributes_lastname').val("");
        $('#order_bill_address_attributes_company').val("");
        $('#order_bill_address_attributes_address1').val("");
        $('#order_bill_address_attributes_address2').val("");
        $('#order_bill_address_attributes_city').val("");
        $('#order_bill_address_attributes_zipcode').val("");
        $('#order_bill_address_attributes_state_id').val("");
        $('#order_bill_address_attributes_country_id').val("");
        $('#order_bill_address_attributes_phone').val("");

        $('#order_ship_address_attributes_firstname').val("");
        $('#order_ship_address_attributes_lastname').val("");
        $('#order_bill_address_attributes_company').val("");
        $('#order_ship_address_attributes_address1').val("");
        $('#order_ship_address_attributes_address2').val("");
        $('#order_ship_address_attributes_city').val("");
        $('#order_ship_address_attributes_zipcode').val("");
        $('#order_ship_address_attributes_state_id').val("");
        $('#order_ship_address_attributes_country_id').val("");
        $('#order_ship_address_attributes_phone').val("");
    });

    var show_billing = function (show) {
        if (show) {
            $('#shipping').show();
            $('#shipping input').prop("disabled", false);
            $('#shipping select').prop("disabled", false);
        } else {
            $('#shipping').hide();
            $('#shipping input').prop("disabled", true);
            $('#shipping select').prop("disabled", true);
        }
    }

});


$(function () {
    var original_gtwy_type = $('#gtwy-type').attr('value');
    $('div#gateway-settings-warning').hide();
    $('#gtwy-type').change(function () {
        if ($('#gtwy-type').attr('value') == original_gtwy_type) {
            $('div.gateway-settings').show();
            $('div#gateway-settings-warning').hide();
        } else {
            $('div.gateway-settings').hide();
            $('div#gateway-settings-warning').show();
        }
    });
})
;
$(document).ready(function () {

    if ($('input#preferences_use_s3[type="checkbox"]:checked').length > 0)
        $('#s3_settings').show();

    // Toggle display of S3 settings based on value of use_s3 checkbox
    $('input#preferences_use_s3[type="checkbox"]').click(function () {
        $('#s3_settings').toggle();
    });

    $('.destroy_style').live("click", function () {
        $(this).parent().remove();
    });

    $('.destroy_header').live("click", function () {
        $(this).parent().remove();
    });

    // Handle adding new styles
    var styles_hash_index = 1;
    $('.add_style').click(function () {
        $('#styles_list').append(generate_html_for_hash("new_attachment_styles", styles_hash_index));
    });

    // Handle adding new headers
    var headers_hash_index = 1;
    $('.add_header').click(function () {
        $('#headers_list').append(generate_html_for_hash("new_s3_headers", headers_hash_index));
    });

    // Generates html for new paperclip styles form fields
    generate_html_for_hash = function (hash_name, index) {
        var html = '<li>';
        html += '<label for="' + hash_name + '_' + index + '_name">';
        html += 'Name</label>';
        html += '<input id="' + hash_name + '_' + index + '_name" name="' + hash_name + '[' + index + '][name]" type="text">';
        html += '<label for="' + hash_name + '_' + index + '_value">';
        html += 'Value</label>';
        html += '<input id="' + hash_name + '_' + index + '_value" name="' + hash_name + '[' + index + '][value]" type="text">';
        html += '<a href="#" alt="Destroy" class="destroy_style">&nbsp;x</a>';
        html += '</li>';

        index += 1;
        return html;
    };


});
$(document).ready(function () {

    $('#new_image_link').click(function (event) {
        event.preventDefault();
        $(this).hide();
        $.ajax({type:'GET', url:this.href, data:({authenticity_token:AUTH_TOKEN}),
            success:function (r) {
                $('#images').html(r);
            } });
    });

});
$('#cancel_link').click(function (event) {
    event.preventDefault();
    $('#new_image_link').show();
    $('#images').html('');
});
//On page load 
replace_ids = function (s) {
    var new_id = new Date().getTime();
    return s.replace(/NEW_RECORD/g, new_id);
}

$(function () {
    $('a[id*=nested]').click(function () {
        var template = $(this).attr('href').replace(/.*#/, '');
        html = replace_ids(eval(template));
        $('#ul-' + $(this).attr('id')).append(html);
        update_remove_links();
    });
    update_remove_links();
})

var update_remove_links = function () {
    $('.remove').click(function () {
        $(this).prevAll(':first').val(1);
        $(this).parent().hide();
        return false;
    });
};
$(document).ready(function () {

    $("#add_line_item_to_order").live("click", function () {
        if ($('#add_variant_id').val() == '') {
            return false;
        }
        update_target = $(this).attr("data-update");
        $.ajax({ dataType:'script', url:this.href, type:"POST",
            data:{"line_item[variant_id]":$('#add_variant_id').val(),
                "line_item[quantity]":$('#add_quantity').val()}
        });
        return false;
    });

    $("#add_product_name").product_autocomplete();

});
$(document).ready(function () {
    $.each($('td.qty input'), function (i, input) {

        $(input).live('change', function () {

            var id = "#" + $(this).attr('id').replace("_quantity", "_id");
            console.log($(this))
            console.log($(id))

            jQuery.post("/admin/orders/" + $('input#order_number').val() + "/line_items/" + $(id).val(),
                { _method:"put", "line_item[quantity]":$(this).val()},
                function (resp) {
                    $('#order-form-wrapper').html(resp.responseText);
                })
        })
    })
});

$(document).ready(function () {

    $("#card_new").radioControlsVisibilityOfElement('#card_form');

    $('select.jump_menu').change(function () {
        window.location = this.options[this.selectedIndex].value;
    });

});
$(function () {
});
$(document).ready(function () {
    if ($(".categories input:checked").length > 0) {
        $('input[type=checkbox]:not(:checked)').attr('disabled', true);
    }

    categoryCheckboxes = '.categories input[type=checkbox]';
    $(categoryCheckboxes).change(function () {
        if ($(this).is(':checked')) {
            $(categoryCheckboxes + ':not(:checked)').attr('disabled', true);
            $(this).removeAttr('disabled');
        } else {
            $('input[type=checkbox]').removeAttr('disabled');
        }
    });
});
var handle_ajax_error = function (XMLHttpRequest, textStatus, errorThrown) {
    $.jstree.rollback(last_rollback);
    $("#ajax_error").show().html("<strong>" + server_error + "</strong><br />" + taxonomy_tree_error);
};

//var handle_move = function(li, target, droppped, tree, rb) {
var handle_move = function (e, data) {
    last_rollback = data.rlbk;
    var position = data.rslt.cp;
    var node = data.rslt.o;
    var new_parent = data.rslt.np;

    $.ajax({
        type:"POST",
        dataType:"json",
        url:base_url + node.attr("id"),
        data:({_method:"put", "taxon[parent_id]":new_parent.attr("id"), "taxon[position]":position, authenticity_token:AUTH_TOKEN}),
        error:handle_ajax_error
    });

    return true
};

var handle_create = function (e, data) {
    last_rollback = data.rlbk;
    var node = data.rslt.obj;
    var name = data.rslt.name;
    var position = data.rslt.position;
    var new_parent = data.rslt.parent;

    $.ajax({
        type:"POST",
        dataType:"json",
        url:base_url,
        data:({"taxon[name]":name, "taxon[parent_id]":new_parent.attr("id"), "taxon[position]":position, authenticity_token:AUTH_TOKEN}),
        error:handle_ajax_error,
        success:function (data, result) {
            node.attr('id', data.taxon.id);
        }
    });

};

var handle_rename = function (e, data) {
    last_rollback = data.rlbk;
    var node = data.rslt.obj;
    var name = data.rslt.new_name;

    $.ajax({
        type:"POST",
        dataType:"json",
        url:base_url + node.attr("id"),
        data:({_method:"put", "taxon[name]":name, authenticity_token:AUTH_TOKEN}),
        error:handle_ajax_error
    });
};

var handle_delete = function (e, data) {
    last_rollback = data.rlbk;
    var node = data.rslt.obj;

    jConfirm('Are you sure you want to delete this taxon?', 'Confirm Taxon Deletion', function (r) {
        if (r) {
            $.ajax({
                type:"POST",
                dataType:"json",
                url:base_url + node.attr("id"),
                data:({_method:"delete", authenticity_token:AUTH_TOKEN}),
                error:handle_ajax_error
            });
        } else {
            $.jstree.rollback(last_rollback);
            last_rollback = null;
        }
    });

};

var taxonomy_id;

$(document).ready(function () {
    if (taxonomy_id != undefined) {

        base_url = $("#taxonomy_tree").data("url").split("?")[0] + "/";
        child_url = base_url.replace("/taxons", "/get_children.json");

        is_cut = false;
        last_rollback = null;

        var conf = {
            json_data:{
                "data":initial,
                "ajax":{
                    "url":child_url,
                    "data":function (n) {
                        return { parent_id:n.attr ? n.attr("id") : 0 };
                    }
                }
            },
            "themes":{
                "theme":"apple",
                "url":"/assets/jquery.jstree/themes/apple/style.css"
            },
            "strings":{
                "new_node":new_taxon,
                "loading":loading + "..."
            },
            "crrm":{
                "move":{
                    "check_move":function (m) {
                        var position = m.cp;
                        var node = m.o;
                        var new_parent = m.np;

                        if (!new_parent) return false; //no parent

                        if (node.attr("rel") == "root") return false; //can't drag root

                        if (new_parent.attr("id") == "taxonomy_tree" && position == 0) return false; // can't drop before root

                        return true;

                    }
                }
            },
            "contextmenu":{
                "items":function (obj) {
                    var id_of_node = obj.attr("id");
                    var type_of_node = obj.attr("rel");
                    var menu = {};
                    if (type_of_node == "root") {
                        menu = {
                            "create":{
                                "label":"Create",
                                "action":function (obj) {
                                    this.create(obj);
                                }
                            },
                            "paste":{
                                "separator_before":true,
                                "label":"Paste",
                                "action":function (obj) {
                                    is_cut = false;
                                    this.paste(obj);
                                },
                                "_disabled":is_cut == false
                            },
                            "edit":{
                                "separator_before":true,
                                "label":"Edit",
                                "action":function (obj) {
                                    window.location = base_url + obj.attr("id") + "/edit/";
                                }
                            }
                        }
                    } else {
                        menu = {
                            "create":{
                                "label":"Create",
                                "action":function (obj) {
                                    this.create(obj);
                                }
                            },
                            "rename":{
                                "label":"Rename",
                                "action":function (obj) {
                                    this.rename(obj);
                                }
                            },
                            "remove":{
                                "label":"Remove",
                                "action":function (obj) {
                                    this.remove(obj);
                                }
                            },
                            "cut":{
                                "separator_before":true,
                                "label":"Cut",
                                "action":function (obj) {
                                    is_cut = true;
                                    this.cut(obj);
                                }
                            },
                            "paste":{
                                "label":"Paste",
                                "action":function (obj) {
                                    is_cut = false;
                                    this.paste(obj);
                                },
                                "_disabled":is_cut == false
                            },
                            "edit":{
                                "separator_before":true,
                                "label":"Edit",
                                "action":function (obj) {
                                    window.location = base_url + obj.attr("id") + "/edit/";
                                }
                            }
                        }
                    }
                    return menu;
                }
            },

            "plugins":[ "themes", "json_data", "dnd", "crrm", "contextmenu"]
        }

        $("#taxonomy_tree").jstree(conf)
            .bind("move_node.jstree", handle_move)
            .bind("remove.jstree", handle_delete)
            .bind("create.jstree", handle_create)
            .bind("rename.jstree", handle_rename);

        $("#taxonomy_tree").delegate("a", "dblclick", function (e) {
            $("#taxonomy_tree").jstree("rename", this)
        });


        $(document).keypress(function (e) {
            //surpress form submit on enter/return
            if (e.keyCode == 13) {
                e.preventDefault();
            }
        });
    }
});
// Underscore.js 1.1.6
// (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.
// Underscore is freely distributable under the MIT license.
// Portions of Underscore are inspired or borrowed from Prototype,
// Oliver Steele's Functional, and John Resig's Micro-Templating.
// For all details and documentation:
// http://documentcloud.github.com/underscore
(function () {
    var p = this, C = p._, m = {}, i = Array.prototype, n = Object.prototype, f = i.slice, D = i.unshift, E = n.toString, l = n.hasOwnProperty, s = i.forEach, t = i.map, u = i.reduce, v = i.reduceRight, w = i.filter, x = i.every, y = i.some, o = i.indexOf, z = i.lastIndexOf;
    n = Array.isArray;
    var F = Object.keys, q = Function.prototype.bind, b = function (a) {
        return new j(a)
    };
    typeof module !== "undefined" && module.exports ? (module.exports = b, b._ = b) : p._ = b;
    b.VERSION = "1.1.6";
    var h = b.each = b.forEach = function (a, c, d) {
        if (a != null)if (s && a.forEach === s)a.forEach(c, d); else if (b.isNumber(a.length))for (var e =
            0, k = a.length; e < k; e++) {
            if (c.call(d, a[e], e, a) === m)break
        } else for (e in a)if (l.call(a, e) && c.call(d, a[e], e, a) === m)break
    };
    b.map = function (a, c, b) {
        var e = [];
        if (a == null)return e;
        if (t && a.map === t)return a.map(c, b);
        h(a, function (a, g, G) {
            e[e.length] = c.call(b, a, g, G)
        });
        return e
    };
    b.reduce = b.foldl = b.inject = function (a, c, d, e) {
        var k = d !== void 0;
        a == null && (a = []);
        if (u && a.reduce === u)return e && (c = b.bind(c, e)), k ? a.reduce(c, d) : a.reduce(c);
        h(a, function (a, b, f) {
            !k && b === 0 ? (d = a, k = !0) : d = c.call(e, d, a, b, f)
        });
        if (!k)throw new TypeError("Reduce of empty array with no initial value");
        return d
    };
    b.reduceRight = b.foldr = function (a, c, d, e) {
        a == null && (a = []);
        if (v && a.reduceRight === v)return e && (c = b.bind(c, e)), d !== void 0 ? a.reduceRight(c, d) : a.reduceRight(c);
        a = (b.isArray(a) ? a.slice() : b.toArray(a)).reverse();
        return b.reduce(a, c, d, e)
    };
    b.find = b.detect = function (a, c, b) {
        var e;
        A(a, function (a, g, f) {
            if (c.call(b, a, g, f))return e = a, !0
        });
        return e
    };
    b.filter = b.select = function (a, c, b) {
        var e = [];
        if (a == null)return e;
        if (w && a.filter === w)return a.filter(c, b);
        h(a, function (a, g, f) {
            c.call(b, a, g, f) && (e[e.length] = a)
        });
        return e
    };
    b.reject = function (a, c, b) {
        var e = [];
        if (a == null)return e;
        h(a, function (a, g, f) {
            c.call(b, a, g, f) || (e[e.length] = a)
        });
        return e
    };
    b.every = b.all = function (a, c, b) {
        var e = !0;
        if (a == null)return e;
        if (x && a.every === x)return a.every(c, b);
        h(a, function (a, g, f) {
            if (!(e = e && c.call(b, a, g, f)))return m
        });
        return e
    };
    var A = b.some = b.any = function (a, c, d) {
        c || (c = b.identity);
        var e = !1;
        if (a == null)return e;
        if (y && a.some === y)return a.some(c, d);
        h(a, function (a, b, f) {
            if (e = c.call(d, a, b, f))return m
        });
        return e
    };
    b.include = b.contains = function (a, c) {
        var b =
            !1;
        if (a == null)return b;
        if (o && a.indexOf === o)return a.indexOf(c) != -1;
        A(a, function (a) {
            if (b = a === c)return!0
        });
        return b
    };
    b.invoke = function (a, c) {
        var d = f.call(arguments, 2);
        return b.map(a, function (a) {
            return(c.call ? c || a : a[c]).apply(a, d)
        })
    };
    b.pluck = function (a, c) {
        return b.map(a, function (a) {
            return a[c]
        })
    };
    b.max = function (a, c, d) {
        if (!c && b.isArray(a))return Math.max.apply(Math, a);
        var e = {computed:-Infinity};
        h(a, function (a, b, f) {
            b = c ? c.call(d, a, b, f) : a;
            b >= e.computed && (e = {value:a, computed:b})
        });
        return e.value
    };
    b.min = function (a, c, d) {
        if (!c && b.isArray(a))return Math.min.apply(Math, a);
        var e = {computed:Infinity};
        h(a, function (a, b, f) {
            b = c ? c.call(d, a, b, f) : a;
            b < e.computed && (e = {value:a, computed:b})
        });
        return e.value
    };
    b.sortBy = function (a, c, d) {
        return b.pluck(b.map(a,function (a, b, f) {
            return{value:a, criteria:c.call(d, a, b, f)}
        }).sort(function (a, b) {
            var c = a.criteria, d = b.criteria;
            return c < d ? -1 : c > d ? 1 : 0
        }), "value")
    };
    b.sortedIndex = function (a, c, d) {
        d || (d = b.identity);
        for (var e = 0, f = a.length; e < f;) {
            var g = e + f >> 1;
            d(a[g]) < d(c) ? e = g + 1 : f = g
        }
        return e
    };
    b.toArray =
        function (a) {
            if (!a)return[];
            if (a.toArray)return a.toArray();
            if (b.isArray(a))return a;
            if (b.isArguments(a))return f.call(a);
            return b.values(a)
        };
    b.size = function (a) {
        return b.toArray(a).length
    };
    b.first = b.head = function (a, b, d) {
        return b != null && !d ? f.call(a, 0, b) : a[0]
    };
    b.rest = b.tail = function (a, b, d) {
        return f.call(a, b == null || d ? 1 : b)
    };
    b.last = function (a) {
        return a[a.length - 1]
    };
    b.compact = function (a) {
        return b.filter(a, function (a) {
            return!!a
        })
    };
    b.flatten = function (a) {
        return b.reduce(a, function (a, d) {
            if (b.isArray(d))return a.concat(b.flatten(d));
            a[a.length] = d;
            return a
        }, [])
    };
    b.without = function (a) {
        var c = f.call(arguments, 1);
        return b.filter(a, function (a) {
            return!b.include(c, a)
        })
    };
    b.uniq = b.unique = function (a, c) {
        return b.reduce(a, function (a, e, f) {
            if (0 == f || (c === !0 ? b.last(a) != e : !b.include(a, e)))a[a.length] = e;
            return a
        }, [])
    };
    b.intersect = function (a) {
        var c = f.call(arguments, 1);
        return b.filter(b.uniq(a), function (a) {
            return b.every(c, function (c) {
                return b.indexOf(c, a) >= 0
            })
        })
    };
    b.zip = function () {
        for (var a = f.call(arguments), c = b.max(b.pluck(a, "length")), d = Array(c),
                 e = 0; e < c; e++)d[e] = b.pluck(a, "" + e);
        return d
    };
    b.indexOf = function (a, c, d) {
        if (a == null)return-1;
        var e;
        if (d)return d = b.sortedIndex(a, c), a[d] === c ? d : -1;
        if (o && a.indexOf === o)return a.indexOf(c);
        d = 0;
        for (e = a.length; d < e; d++)if (a[d] === c)return d;
        return-1
    };
    b.lastIndexOf = function (a, b) {
        if (a == null)return-1;
        if (z && a.lastIndexOf === z)return a.lastIndexOf(b);
        for (var d = a.length; d--;)if (a[d] === b)return d;
        return-1
    };
    b.range = function (a, b, d) {
        arguments.length <= 1 && (b = a || 0, a = 0);
        d = arguments[2] || 1;
        for (var e = Math.max(Math.ceil((b - a) /
            d), 0), f = 0, g = Array(e); f < e;)g[f++] = a, a += d;
        return g
    };
    b.bind = function (a, b) {
        if (a.bind === q && q)return q.apply(a, f.call(arguments, 1));
        var d = f.call(arguments, 2);
        return function () {
            return a.apply(b, d.concat(f.call(arguments)))
        }
    };
    b.bindAll = function (a) {
        var c = f.call(arguments, 1);
        c.length == 0 && (c = b.functions(a));
        h(c, function (c) {
            a[c] = b.bind(a[c], a)
        });
        return a
    };
    b.memoize = function (a, c) {
        var d = {};
        c || (c = b.identity);
        return function () {
            var b = c.apply(this, arguments);
            return l.call(d, b) ? d[b] : d[b] = a.apply(this, arguments)
        }
    };
    b.delay =
        function (a, b) {
            var d = f.call(arguments, 2);
            return setTimeout(function () {
                return a.apply(a, d)
            }, b)
        };
    b.defer = function (a) {
        return b.delay.apply(b, [a, 1].concat(f.call(arguments, 1)))
    };
    var B = function (a, b, d) {
        var e;
        return function () {
            var f = this, g = arguments, h = function () {
                e = null;
                a.apply(f, g)
            };
            d && clearTimeout(e);
            if (d || !e)e = setTimeout(h, b)
        }
    };
    b.throttle = function (a, b) {
        return B(a, b, !1)
    };
    b.debounce = function (a, b) {
        return B(a, b, !0)
    };
    b.once = function (a) {
        var b = !1, d;
        return function () {
            if (b)return d;
            b = !0;
            return d = a.apply(this, arguments)
        }
    };
    b.wrap = function (a, b) {
        return function () {
            var d = [a].concat(f.call(arguments));
            return b.apply(this, d)
        }
    };
    b.compose = function () {
        var a = f.call(arguments);
        return function () {
            for (var b = f.call(arguments), d = a.length - 1; d >= 0; d--)b = [a[d].apply(this, b)];
            return b[0]
        }
    };
    b.after = function (a, b) {
        return function () {
            if (--a < 1)return b.apply(this, arguments)
        }
    };
    b.keys = F || function (a) {
        if (a !== Object(a))throw new TypeError("Invalid object");
        var b = [], d;
        for (d in a)l.call(a, d) && (b[b.length] = d);
        return b
    };
    b.values = function (a) {
        return b.map(a,
            b.identity)
    };
    b.functions = b.methods = function (a) {
        return b.filter(b.keys(a),function (c) {
            return b.isFunction(a[c])
        }).sort()
    };
    b.extend = function (a) {
        h(f.call(arguments, 1), function (b) {
            for (var d in b)b[d] !== void 0 && (a[d] = b[d])
        });
        return a
    };
    b.defaults = function (a) {
        h(f.call(arguments, 1), function (b) {
            for (var d in b)a[d] == null && (a[d] = b[d])
        });
        return a
    };
    b.clone = function (a) {
        return b.isArray(a) ? a.slice() : b.extend({}, a)
    };
    b.tap = function (a, b) {
        b(a);
        return a
    };
    b.isEqual = function (a, c) {
        if (a === c)return!0;
        var d = typeof a;
        if (d !=
            typeof c)return!1;
        if (a == c)return!0;
        if (!a && c || a && !c)return!1;
        if (a._chain)a = a._wrapped;
        if (c._chain)c = c._wrapped;
        if (a.isEqual)return a.isEqual(c);
        if (b.isDate(a) && b.isDate(c))return a.getTime() === c.getTime();
        if (b.isNaN(a) && b.isNaN(c))return!1;
        if (b.isRegExp(a) && b.isRegExp(c))return a.source === c.source && a.global === c.global && a.ignoreCase === c.ignoreCase && a.multiline === c.multiline;
        if (d !== "object")return!1;
        if (a.length && a.length !== c.length)return!1;
        d = b.keys(a);
        var e = b.keys(c);
        if (d.length != e.length)return!1;
        for (var f in a)if (!(f in c) || !b.isEqual(a[f], c[f]))return!1;
        return!0
    };
    b.isEmpty = function (a) {
        if (b.isArray(a) || b.isString(a))return a.length === 0;
        for (var c in a)if (l.call(a, c))return!1;
        return!0
    };
    b.isElement = function (a) {
        return!!(a && a.nodeType == 1)
    };
    b.isArray = n || function (a) {
        return E.call(a) === "[object Array]"
    };
    b.isArguments = function (a) {
        return!(!a || !l.call(a, "callee"))
    };
    b.isFunction = function (a) {
        return!(!a || !a.constructor || !a.call || !a.apply)
    };
    b.isString = function (a) {
        return!!(a === "" || a && a.charCodeAt && a.substr)
    };
    b.isNumber = function (a) {
        return!!(a === 0 || a && a.toExponential && a.toFixed)
    };
    b.isNaN = function (a) {
        return a !== a
    };
    b.isBoolean = function (a) {
        return a === !0 || a === !1
    };
    b.isDate = function (a) {
        return!(!a || !a.getTimezoneOffset || !a.setUTCFullYear)
    };
    b.isRegExp = function (a) {
        return!(!a || !a.test || !a.exec || !(a.ignoreCase || a.ignoreCase === !1))
    };
    b.isNull = function (a) {
        return a === null
    };
    b.isUndefined = function (a) {
        return a === void 0
    };
    b.noConflict = function () {
        p._ = C;
        return this
    };
    b.identity = function (a) {
        return a
    };
    b.times = function (a, b, d) {
        for (var e =
            0; e < a; e++)b.call(d, e)
    };
    b.mixin = function (a) {
        h(b.functions(a), function (c) {
            H(c, b[c] = a[c])
        })
    };
    var I = 0;
    b.uniqueId = function (a) {
        var b = I++;
        return a ? a + b : b
    };
    b.templateSettings = {evaluate:/<%([\s\S]+?)%>/g, interpolate:/<%=([\s\S]+?)%>/g};
    b.template = function (a, c) {
        var d = b.templateSettings;
        d = "var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('" + a.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(d.interpolate,function (a, b) {
            return"'," + b.replace(/\\'/g, "'") + ",'"
        }).replace(d.evaluate ||
            null,function (a, b) {
            return"');" + b.replace(/\\'/g, "'").replace(/[\r\n\t]/g, " ") + "__p.push('"
        }).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');";
        d = new Function("obj", d);
        return c ? d(c) : d
    };
    var j = function (a) {
        this._wrapped = a
    };
    b.prototype = j.prototype;
    var r = function (a, c) {
        return c ? b(a).chain() : a
    }, H = function (a, c) {
        j.prototype[a] = function () {
            var a = f.call(arguments);
            D.call(a, this._wrapped);
            return r(c.apply(b, a), this._chain)
        }
    };
    b.mixin(b);
    h(["pop", "push", "reverse", "shift", "sort",
        "splice", "unshift"], function (a) {
        var b = i[a];
        j.prototype[a] = function () {
            b.apply(this._wrapped, arguments);
            return r(this._wrapped, this._chain)
        }
    });
    h(["concat", "join", "slice"], function (a) {
        var b = i[a];
        j.prototype[a] = function () {
            return r(b.apply(this._wrapped, arguments), this._chain)
        }
    });
    j.prototype.chain = function () {
        this._chain = !0;
        return this
    };
    j.prototype.value = function () {
        return this._wrapped
    }
})();
$(function () {
    if ($('#country_based').is(':checked')) {
        show_country();
    } else {
        show_state();
    }
    $('#country_based').click(function () {
        show_country();
    });
    $('#state_based').click(function () {
        show_state();
    });
})

var show_country = function () {
    $('#state_members :input').each(function () {
        $(this).prop("disabled", true);
    })
    $('#state_members').hide();
    $('#zone_members :input').each(function () {
        $(this).prop("disabled", true);
    })
    $('#zone_members').hide();
    $('#country_members :input').each(function () {
        $(this).prop("disabled", false);
    })
    $('#country_members').show();
};

var show_state = function () {
    $('#country_members :input').each(function () {
        $(this).prop("disabled", true);
    })
    $('#country_members').hide();
    $('#zone_members :input').each(function () {
        $(this).prop("disabled", true);
    })
    $('#zone_members').hide();
    $('#state_members :input').each(function () {
        $(this).prop("disabled", false);
    })
    $('#state_members').show();
};


function ajax_root_prefix() {
    return $('body').data('ajax-root-path');
}
;
/**
 * jQuery.ScrollTo - Easy element scrolling using jQuery.
 * Copyright (c) 2007-2009 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
 * Dual licensed under MIT and GPL.
 * Date: 5/25/2009
 * @author Ariel Flesler
 * @version 1.4.2
 *
 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
 */

;
(function (d) {
    var k = d.scrollTo = function (a, i, e) {
        d(window).scrollTo(a, i, e)
    };
    k.defaults = {axis:'xy', duration:parseFloat(d.fn.jquery) >= 1.3 ? 0 : 1};
    k.window = function (a) {
        return d(window)._scrollable()
    };
    d.fn._scrollable = function () {
        return this.map(function () {
            var a = this, i = !a.nodeName || d.inArray(a.nodeName.toLowerCase(), ['iframe', '#document', 'html', 'body']) != -1;
            if (!i)return a;
            var e = (a.contentWindow || a).document || a.ownerDocument || a;
            return d.browser.safari || e.compatMode == 'BackCompat' ? e.body : e.documentElement
        })
    };
    d.fn.scrollTo = function (n, j, b) {
        if (typeof j == 'object') {
            b = j;
            j = 0
        }
        if (typeof b == 'function')b = {onAfter:b};
        if (n == 'max')n = 9e9;
        b = d.extend({}, k.defaults, b);
        j = j || b.speed || b.duration;
        b.queue = b.queue && b.axis.length > 1;
        if (b.queue)j /= 2;
        b.offset = p(b.offset);
        b.over = p(b.over);
        return this._scrollable().each(function () {
            var q = this, r = d(q), f = n, s, g = {}, u = r.is('html,body');
            switch (typeof f) {
                case'number':
                case'string':
                    if (/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(f)) {
                        f = p(f);
                        break
                    }
                    f = d(f, this);
                case'object':
                    if (f.is || f.style)s = (f = d(f)).offset()
            }
            d.each(b.axis.split(''), function (a, i) {
                var e = i == 'x' ? 'Left' : 'Top', h = e.toLowerCase(), c = 'scroll' + e, l = q[c], m = k.max(q, i);
                if (s) {
                    g[c] = s[h] + (u ? 0 : l - r.offset()[h]);
                    if (b.margin) {
                        g[c] -= parseInt(f.css('margin' + e)) || 0;
                        g[c] -= parseInt(f.css('border' + e + 'Width')) || 0
                    }
                    g[c] += b.offset[h] || 0;
                    if (b.over[h])g[c] += f[i == 'x' ? 'width' : 'height']() * b.over[h]
                } else {
                    var o = f[h];
                    g[c] = o.slice && o.slice(-1) == '%' ? parseFloat(o) / 100 * m : o
                }
                if (/^\d+$/.test(g[c]))g[c] = g[c] <= 0 ? 0 : Math.min(g[c], m);
                if (!a && b.queue) {
                    if (l != g[c])t(b.onAfterFirst);
                    delete g[c]
                }
            });
            t(b.onAfter);
            function t(a) {
                r.animate(g, j, b.easing, a && function () {
                    a.call(this, n, b)
                })
            }
        }).end()
    };
    k.max = function (a, i) {
        var e = i == 'x' ? 'Width' : 'Height', h = 'scroll' + e;
        if (!d(a).is('html,body'))return a[h] - d(a)[e.toLowerCase()]();
        var c = 'client' + e, l = a.ownerDocument.documentElement, m = a.ownerDocument.body;
        return Math.max(l[h], m[h]) - Math.min(l[c], m[c])
    };
    function p(a) {
        return typeof a == 'object' ? a : {top:a, left:a}
    }
})(jQuery);
// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//


;
/*
 * DC Vertical Mega Menu - jQuery vertical mega menu
 * Copyright (c) 2011 Design Chemical
 *
 * Dual licensed under the MIT and GPL licenses:
 * 	http://www.opensource.org/licenses/mit-license.php
 * 	http://www.gnu.org/licenses/gpl.html
 *
 */

(function ($) {

    //define the new for the plugin ans how to call it
    $.fn.dcVerticalMegaMenu = function (options) {
        //set default options
        var defaults = {
            classParent:'dc-mega',
            arrow:true,
            classArrow:'dc-mega-icon',
            classContainer:'sub-container',
            classSubMenu:'sub',
            classMega:'mega',
            classSubParent:'mega-hdr',
            classSubLink:'mega-hdr',
            classRow:'row',
            rowItems:3,
            speed:'fast',
            effect:'show',
            direction:'right'
        };

        //call in the default otions
        var options = $.extend(defaults, options);
        var $dcVerticalMegaMenuObj = this;

        //act upon the element that is passed into the design
        return $dcVerticalMegaMenuObj.each(function (options) {

            $mega = $(this);
            if (defaults.direction == 'left') {
                $mega.addClass('left');
            } else {
                $mega.addClass('right');
            }
            // Get Menu Width
            var megaWidth = $mega.width();

            // Set up menu
            $('> li', $mega).each(function () {

                var $parent = $(this);
                var $megaSub = $('> ul', $parent);

                if ($megaSub.length > 0) {

                    $('> a', $parent).addClass(defaults.classParent).append('<span class="' + defaults.classArrow + '"></span>');
                    $megaSub.addClass(defaults.classSubMenu).wrap('<div class="' + defaults.classContainer + '" />');
                    var $container = $('.' + defaults.classContainer, $parent);

                    if ($('ul', $megaSub).length > 0) {

                        $parent.addClass(defaults.classParent + '-li');
                        $container.addClass(defaults.classMega);

                        // Set sub headers
                        $('> li', $megaSub).each(function () {
                            $(this).addClass('mega-unit');
                            if ($('> ul', this).length) {
                                $(this).addClass(defaults.classSubParent);
                                $('> a', this).addClass(defaults.classSubParent + '-a');
                            } else {
                                $(this).addClass(defaults.classSubLink);
                                $('> a', this).addClass(defaults.classSubLink + '-a');
                            }
                        });

                        // Create Rows
                        var hdrs = $('.mega-unit', $parent);
                        rowSize = parseInt(defaults.rowItems);
                        for (var i = 0; i < hdrs.length; i += rowSize) {
                            hdrs.slice(i, i + rowSize).wrapAll('<div class="' + defaults.classRow + '" />');
                        }

                        // Get mega dimensions
                        var itemWidth = $('.mega-unit', $megaSub).outerWidth(true);
                        var rowItems = $('.row:eq(0) .mega-unit', $megaSub).length;
                        var innerItemWidth = itemWidth * rowItems;
                        var totalItemWidth = innerItemWidth + containerPad;

                        // Set mega header height
                        $('.row', this).each(function () {
                            $('.mega-unit:last', this).addClass('last');
                            var maxValue = undefined;
                            $('.mega-unit > a', this).each(function () {
                                var val = parseInt($(this).height());
                                if (maxValue === undefined || maxValue < val) {
                                    maxValue = val;
                                }
                            });
                            $('.mega-unit > a', this).css('height', maxValue + 'px');
                            $(this).css('width', innerItemWidth + 'px');
                        });
                        var subWidth = $megaSub.outerWidth(true);
                        var totalWidth = $container.outerWidth(true);
                        var containerPad = totalWidth - subWidth;
                        // Calculate Row Height
                        $('.row', $megaSub).each(function () {
                            var rowHeight = $(this).height();
                            $(this).parent('.row').css('height', rowHeight + 'px');
                        });
                        $('.row:last', $megaSub).addClass('last');
                        $('.row:first', $megaSub).addClass('first');
                    } else {
                        $container.addClass('non-' + defaults.classMega);
                    }
                }

                var $container = $('.' + defaults.classContainer, $parent);
                var subWidth = $megaSub.outerWidth(true);
                // Get flyout height
                var subHeight = $container.height();
                var itemHeight = $parent.outerHeight(true);
                // Set position to top of parent
                $container.css({
                    height:subHeight + 'px',
                    marginTop:-itemHeight + 'px',
                    zIndex:'1000',
                    width:subWidth + 'px'
                }).hide();
            });

            // HoverIntent Configuration
            var config = {
                sensitivity:2, // number = sensitivity threshold (must be 1 or higher)
                interval:100, // number = milliseconds for onMouseOver polling interval
                over:megaOver, // function = onMouseOver callback (REQUIRED)
                timeout:0, // number = milliseconds delay before onMouseOut
                out:megaOut // function = onMouseOut callback (REQUIRED)
            };

            $('li', $dcVerticalMegaMenuObj).hoverIntent(config);

            function megaOver() {
                $(this).addClass('mega-hover');
                var $link = $('> a', this);
                var $subNav = $('.sub', this);
                var $container = $('.sub-container', this);
                var width = $container.width();
                var outerHeight = $container.outerHeight();
                var height = $container.height();
                var itemHeight = $(this).outerHeight(true);
                var offset = $link.offset();
                var scrollTop = $(window).scrollTop();
                var offset = offset.top - scrollTop
                var bodyHeight = $(window).height();
                var maxHeight = bodyHeight - offset;
                var xsHeight = maxHeight - outerHeight;

                if (xsHeight < 0) {
                    var containerMargin = xsHeight - itemHeight;
                    $container.css({marginTop:containerMargin + 'px'});
                }

                var containerPosition = {right:megaWidth};
                if (defaults.direction == 'right') {
                    containerPosition = {left:megaWidth};
                }

                if (defaults.effect == 'fade') {
                    $container.css(containerPosition).fadeIn(defaults.speed);
                }
                if (defaults.effect == 'show') {
                    $container.css(containerPosition).show();
                }
                if (defaults.effect == 'slide') {
                    $container.css({
                        width:0,
                        height:0,
                        opacity:0});

                    if (defaults.direction == 'right') {

                        $container.show().css({
                            left:megaWidth
                        });
                    } else {

                        $container.show().css({
                            right:megaWidth
                        });
                    }
                    $container.animate({
                        width:width,
                        height:height,
                        opacity:1
                    }, defaults.speed);
                }
            }

            function megaOut() {
                $(this).removeClass('mega-hover');
                var $container = $('.sub-container', this);
                $container.hide();
            }
        });
    };
})(jQuery);
/**
 * hoverIntent r5 // 2007.03.27 // jQuery 1.1.2+
 * <http://cherne.net/brian/resources/jquery.hoverIntent.html>
 *
 * @param  f  onMouseOver function || An object with configuration options
 * @param  g  onMouseOut function  || Nothing (use configuration options object)
 * @author    Brian Cherne <brian@cherne.net>
 */

(function ($) {
    $.fn.hoverIntent = function (f, g) {
        var cfg = {sensitivity:7, interval:100, timeout:0};
        cfg = $.extend(cfg, g ? {over:f, out:g} : f);
        var cX, cY, pX, pY;
        var track = function (ev) {
            cX = ev.pageX;
            cY = ev.pageY;
        };
        var compare = function (ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if ((Math.abs(pX - cX) + Math.abs(pY - cY)) < cfg.sensitivity) {
                $(ob).unbind("mousemove", track);
                ob.hoverIntent_s = 1;
                return cfg.over.apply(ob, [ev]);
            } else {
                pX = cX;
                pY = cY;
                ob.hoverIntent_t = setTimeout(function () {
                    compare(ev, ob);
                }, cfg.interval);
            }
        };
        var delay = function (ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            ob.hoverIntent_s = 0;
            return cfg.out.apply(ob, [ev]);
        };
        var handleHover = function (e) {
            var p = (e.type == "mouseover" ? e.fromElement : e.toElement) || e.relatedTarget;
            while (p && p != this) {
                try {
                    p = p.parentNode;
                } catch (e) {
                    p = this;
                }
            }
            if (p == this) {
                return false;
            }
            var ev = jQuery.extend({}, e);
            var ob = this;
            if (ob.hoverIntent_t) {
                ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            }
            if (e.type == "mouseover") {
                pX = ev.pageX;
                pY = ev.pageY;
                $(ob).bind("mousemove", track);
                if (ob.hoverIntent_s != 1) {
                    ob.hoverIntent_t = setTimeout(function () {
                        compare(ev, ob);
                    }, cfg.interval);
                }
            } else {
                $(ob).unbind("mousemove", track);
                if (ob.hoverIntent_s == 1) {
                    ob.hoverIntent_t = setTimeout(function () {
                        delay(ev, ob);
                    }, cfg.timeout);
                }
            }
        };
        return this.mouseover(handleHover).mouseout(handleHover);
    };
})(jQuery);

window.onerror = function (desc, page, line, chr) {
    /* alert('JavaScript error occurred! \n'
     +'\nError description: \t'+desc
     +'\nPage address:      \t'+page
     +'\nLine number:       \t'+line
     );*/
}

$(function () {
    $('a').focus(function () {
        this.blur();
    });
    SI.Files.stylizeAll();
    slider.init();

    $('input.text-default').each(function () {
        $(this).attr('default', $(this).val());
    }).focus(function () {
            if ($(this).val() == $(this).attr('default'))
                $(this).val('');
        }).blur(function () {
            if ($(this).val() == '')
                $(this).val($(this).attr('default'));
        });

    $('input.text,textarea.text').focus(function () {
        $(this).addClass('textfocus');
    }).blur(function () {
            $(this).removeClass('textfocus');
        });

    var popopenobj = 0, popopenaobj = null;
    $('a.popup').click(function () {
        var pid = $(this).attr('rel').split('|')[0], _os = parseInt($(this).attr('rel').split('|')[1]);
        var pobj = $('#' + pid);
        if (!pobj.length)
            return false;
        if (typeof popopenobj == 'object' && popopenobj.attr('id') != pid) {
            popopenobj.hide(50);
            $(popopenaobj).parent().removeClass(popopenobj.attr('id').split('-')[1] + '-open');
            popopenobj = null;
        }
        return false;
    });
    $('p.images img').click(function () {
        var newbg = $(this).attr('src').split('bg/bg')[1].split('-thumb')[0];
        $(document.body).css('backgroundImage', 'url(' + _siteRoot + 'images/bg/bg' + newbg + '.jpg)');

        $(this).parent().find('img').removeClass('on');
        $(this).addClass('on');
        return false;
    });
    $(window).load(function () {
        $.each(css_ims, function () {
            (new Image()).src = _siteRoot + 'css/images/' + this;
        });
        $.each(css_cims, function () {
            var css_im = this;
            $.each(['blue', 'purple', 'pink', 'red', 'grey', 'green', 'yellow', 'orange'], function () {
                (new Image()).src = _siteRoot + 'css/' + this + '/' + css_im;
            });
        });
    });
    $('div.sc-large div.img:has(div.tml)').each(function () {
        $('div.tml', this).hide();
        $(this).append('<a href="#" class="tml_open">&nbsp;</a>').find('a').css({
            left:parseInt($(this).offset().left) + 864, top:parseInt($(this).offset().top) + 1
        }).click(function () {
                $(this).siblings('div.tml').slideToggle();
                return false;
            }).focus(function () {
                this.blur();
            });
    });
});
var slider = {
    num:-1,
    cur:0,
    cr:[],
    al:null,
    at:10 * 1000,
    ar:true,
    init:function () {
        if (!slider.data || !slider.data.length)
            return false;

        var d = slider.data;
        slider.num = d.length;
        var pos = Math.floor(Math.random() * 1);//slider.num);
        for (var i = 0; i < slider.num; i++) {
            $('#' + d[i].id).css({left:((i - pos) * 1000)});
            $('#slide-nav').append('<a id="slide-link-' + i + '" href="#" onclick="slider.slide(' + i + ');return false;" onfocus="this.blur();">' + (i + 1) + '</a>');
        }

        $('img,div#slide-controls', $('div#slide-holder')).fadeIn();
        slider.text(d[pos]);
        slider.on(pos);
        slider.cur = pos;
        window.setTimeout('slider.auto();', slider.at);
    },
    auto:function () {
        if (!slider.ar)
            return false;

        var next = slider.cur + 1;
        if (next >= slider.num) next = 0;
        slider.slide(next);
    },
    slide:function (pos) {
        if (pos < 0 || pos >= slider.num || pos == slider.cur)
            return;

        window.clearTimeout(slider.al);
        slider.al = window.setTimeout('slider.auto();', slider.at);

        var d = slider.data;
        for (var i = 0; i < slider.num; i++)
            $('#' + d[i].id).stop().animate({left:((i - pos) * 1000)}, 1000, 'swing');

        slider.on(pos);
        slider.text(d[pos]);
        slider.cur = pos;
    },
    on:function (pos) {
        $('#slide-nav a').removeClass('on');
        $('#slide-nav a#slide-link-' + pos).addClass('on');
    },
    text:function (di) {
        slider.cr['a'] = di.client;
        slider.cr['b'] = di.desc;
        slider.ticker('#slide-client span', di.client, 0, 'a');
        slider.ticker('#slide-desc', di.desc, 0, 'b');
    },
    ticker:function (el, text, pos, unique) {
        if (slider.cr[unique] != text)
            return false;

        ctext = text.substring(0, pos) + (pos % 2 ? '-' : '_');
        $(el).html(ctext);

        if (pos == text.length)
            $(el).html(text);
        else
            window.setTimeout('slider.ticker("' + el + '","' + text + '",' + (pos + 1) + ',"' + unique + '");', 30);
    }
};
// STYLING FILE INPUTS 1.0 | Shaun Inman <http://www.shauninman.com/> | 2007-09-07
if (!window.SI) {
    var SI = {};
}
;
SI.Files = {
    htmlClass:'SI-FILES-STYLIZED',
    fileClass:'file',
    wrapClass:'cabinet',

    fini:false,
    able:false,
    init:function () {
        this.fini = true;
    },
    stylize:function (elem) {
        if (!this.fini) {
            this.init();
        }
        ;
        if (!this.able) {
            return;
        }
        ;

        elem.parentNode.file = elem;
        elem.parentNode.onmousemove = function (e) {
            if (typeof e == 'undefined') e = window.event;
            if (typeof e.pageY == 'undefined' && typeof e.clientX == 'number' && document.documentElement) {
                e.pageX = e.clientX + document.documentElement.scrollLeft;
                e.pageY = e.clientY + document.documentElement.scrollTop;
            }
            ;
            var ox = oy = 0;
            var elem = this;
            if (elem.offsetParent) {
                ox = elem.offsetLeft;
                oy = elem.offsetTop;
                while (elem = elem.offsetParent) {
                    ox += elem.offsetLeft;
                    oy += elem.offsetTop;
                }
                ;
            }
            ;
        };
    },
    stylizeAll:function () {
        if (!this.fini) {
            this.init();
        }
        ;
        if (!this.able) {
            return;
        }
        ;
    }
};
/**
 * jQuery Validation Plugin 1.8.1
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright (c) 2006 - 2011 Jörn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

(function (c) {
    c.extend(c.fn, {validate:function (a) {
        if (this.length) {
            var b = c.data(this[0], "validator");
            if (b)return b;
            b = new c.validator(a, this[0]);
            c.data(this[0], "validator", b);
            if (b.settings.onsubmit) {
                this.find("input, button").filter(".cancel").click(function () {
                    b.cancelSubmit = true
                });
                b.settings.submitHandler && this.find("input, button").filter(":submit").click(function () {
                    b.submitButton = this
                });
                this.submit(function (d) {
                    function e() {
                        if (b.settings.submitHandler) {
                            if (b.submitButton)var f = c("<input type='hidden'/>").attr("name",
                                b.submitButton.name).val(b.submitButton.value).appendTo(b.currentForm);
                            b.settings.submitHandler.call(b, b.currentForm);
                            b.submitButton && f.remove();
                            return false
                        }
                        return true
                    }

                    b.settings.debug && d.preventDefault();
                    if (b.cancelSubmit) {
                        b.cancelSubmit = false;
                        return e()
                    }
                    if (b.form()) {
                        if (b.pendingRequest) {
                            b.formSubmitted = true;
                            return false
                        }
                        return e()
                    } else {
                        b.focusInvalid();
                        return false
                    }
                })
            }
            return b
        } else a && a.debug && window.console && console.warn("nothing selected, can't validate, returning nothing")
    }, valid:function () {
        if (c(this[0]).is("form"))return this.validate().form();
        else {
            var a = true, b = c(this[0].form).validate();
            this.each(function () {
                a &= b.element(this)
            });
            return a
        }
    }, removeAttrs:function (a) {
        var b = {}, d = this;
        c.each(a.split(/\s/), function (e, f) {
            b[f] = d.attr(f);
            d.removeAttr(f)
        });
        return b
    }, rules:function (a, b) {
        var d = this[0];
        if (a) {
            var e = c.data(d.form, "validator").settings, f = e.rules, g = c.validator.staticRules(d);
            switch (a) {
                case "add":
                    c.extend(g, c.validator.normalizeRule(b));
                    f[d.name] = g;
                    if (b.messages)e.messages[d.name] = c.extend(e.messages[d.name], b.messages);
                    break;
                case "remove":
                    if (!b) {
                        delete f[d.name];
                        return g
                    }
                    var h = {};
                    c.each(b.split(/\s/), function (j, i) {
                        h[i] = g[i];
                        delete g[i]
                    });
                    return h
            }
        }
        d = c.validator.normalizeRules(c.extend({}, c.validator.metadataRules(d), c.validator.classRules(d), c.validator.attributeRules(d), c.validator.staticRules(d)), d);
        if (d.required) {
            e = d.required;
            delete d.required;
            d = c.extend({required:e}, d)
        }
        return d
    }});
    c.extend(c.expr[":"], {blank:function (a) {
        return!c.trim("" + a.value)
    }, filled:function (a) {
        return!!c.trim("" + a.value)
    }, unchecked:function (a) {
        return!a.checked
    }});
    c.validator = function (a, b) {
        this.settings = c.extend(true, {}, c.validator.defaults, a);
        this.currentForm = b;
        this.init()
    };
    c.validator.format = function (a, b) {
        if (arguments.length == 1)return function () {
            var d = c.makeArray(arguments);
            d.unshift(a);
            return c.validator.format.apply(this, d)
        };
        if (arguments.length > 2 && b.constructor != Array)b = c.makeArray(arguments).slice(1);
        if (b.constructor != Array)b = [b];
        c.each(b, function (d, e) {
            a = a.replace(RegExp("\\{" + d + "\\}", "g"), e)
        });
        return a
    };
    c.extend(c.validator, {defaults:{messages:{}, groups:{}, rules:{}, errorClass:"error",
        validClass:"valid", errorElement:"label", focusInvalid:true, errorContainer:c([]), errorLabelContainer:c([]), onsubmit:true, ignore:[], ignoreTitle:false, onfocusin:function (a) {
            this.lastActive = a;
            if (this.settings.focusCleanup && !this.blockFocusCleanup) {
                this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass);
                this.addWrapper(this.errorsFor(a)).hide()
            }
        }, onfocusout:function (a) {
            if (!this.checkable(a) && (a.name in this.submitted || !this.optional(a)))this.element(a)
        },
        onkeyup:function (a) {
            if (a.name in this.submitted || a == this.lastElement)this.element(a)
        }, onclick:function (a) {
            if (a.name in this.submitted)this.element(a); else a.parentNode.name in this.submitted && this.element(a.parentNode)
        }, highlight:function (a, b, d) {
            a.type === "radio" ? this.findByName(a.name).addClass(b).removeClass(d) : c(a).addClass(b).removeClass(d)
        }, unhighlight:function (a, b, d) {
            a.type === "radio" ? this.findByName(a.name).removeClass(b).addClass(d) : c(a).removeClass(b).addClass(d)
        }}, setDefaults:function (a) {
        c.extend(c.validator.defaults,
            a)
    }, messages:{required:"This field is required.", remote:"Please fix this field.", email:"Please enter a valid email address.", url:"Please enter a valid URL.", date:"Please enter a valid date.", dateISO:"Please enter a valid date (ISO).", number:"Please enter a valid number.", digits:"Please enter only digits.", creditcard:"Please enter a valid credit card number.", equalTo:"Please enter the same value again.", accept:"Please enter a value with a valid extension.", maxlength:c.validator.format("Please enter no more than {0} characters."),
        minlength:c.validator.format("Please enter at least {0} characters."), rangelength:c.validator.format("Please enter a value between {0} and {1} characters long."), range:c.validator.format("Please enter a value between {0} and {1}."), max:c.validator.format("Please enter a value less than or equal to {0}."), min:c.validator.format("Please enter a value greater than or equal to {0}.")}, autoCreateRanges:false, prototype:{init:function () {
        function a(e) {
            var f = c.data(this[0].form, "validator");
            e = "on" + e.type.replace(/^validate/,
                "");
            f.settings[e] && f.settings[e].call(f, this[0])
        }

        this.labelContainer = c(this.settings.errorLabelContainer);
        this.errorContext = this.labelContainer.length && this.labelContainer || c(this.currentForm);
        this.containers = c(this.settings.errorContainer).add(this.settings.errorLabelContainer);
        this.submitted = {};
        this.valueCache = {};
        this.pendingRequest = 0;
        this.pending = {};
        this.invalid = {};
        this.reset();
        var b = this.groups = {};
        c.each(this.settings.groups, function (e, f) {
            c.each(f.split(/\s/), function (g, h) {
                b[h] = e
            })
        });
        var d = this.settings.rules;
        c.each(d, function (e, f) {
            d[e] = c.validator.normalizeRule(f)
        });
        c(this.currentForm).validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", a).validateDelegate(":radio, :checkbox, select, option", "click", a);
        this.settings.invalidHandler && c(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler)
    }, form:function () {
        this.checkForm();
        c.extend(this.submitted, this.errorMap);
        this.invalid = c.extend({}, this.errorMap);
        this.valid() || c(this.currentForm).triggerHandler("invalid-form",
            [this]);
        this.showErrors();
        return this.valid()
    }, checkForm:function () {
        this.prepareForm();
        for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++)this.check(b[a]);
        return this.valid()
    }, element:function (a) {
        this.lastElement = a = this.clean(a);
        this.prepareElement(a);
        this.currentElements = c(a);
        var b = this.check(a);
        if (b)delete this.invalid[a.name]; else this.invalid[a.name] = true;
        if (!this.numberOfInvalids())this.toHide = this.toHide.add(this.containers);
        this.showErrors();
        return b
    }, showErrors:function (a) {
        if (a) {
            c.extend(this.errorMap,
                a);
            this.errorList = [];
            for (var b in a)this.errorList.push({message:a[b], element:this.findByName(b)[0]});
            this.successList = c.grep(this.successList, function (d) {
                return!(d.name in a)
            })
        }
        this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors()
    }, resetForm:function () {
        c.fn.resetForm && c(this.currentForm).resetForm();
        this.submitted = {};
        this.prepareForm();
        this.hideErrors();
        this.elements().removeClass(this.settings.errorClass)
    }, numberOfInvalids:function () {
        return this.objectLength(this.invalid)
    },
        objectLength:function (a) {
            var b = 0, d;
            for (d in a)b++;
            return b
        }, hideErrors:function () {
            this.addWrapper(this.toHide).hide()
        }, valid:function () {
            return this.size() == 0
        }, size:function () {
            return this.errorList.length
        }, focusInvalid:function () {
            if (this.settings.focusInvalid)try {
                c(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin")
            } catch (a) {
            }
        }, findLastActive:function () {
            var a = this.lastActive;
            return a && c.grep(this.errorList,function (b) {
                return b.element.name ==
                    a.name
            }).length == 1 && a
        }, elements:function () {
            var a = this, b = {};
            return c(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function () {
                !this.name && a.settings.debug && window.console && console.error("%o has no name assigned", this);
                if (this.name in b || !a.objectLength(c(this).rules()))return false;
                return b[this.name] = true
            })
        }, clean:function (a) {
            return c(a)[0]
        }, errors:function () {
            return c(this.settings.errorElement + "." + this.settings.errorClass,
                this.errorContext)
        }, reset:function () {
            this.successList = [];
            this.errorList = [];
            this.errorMap = {};
            this.toShow = c([]);
            this.toHide = c([]);
            this.currentElements = c([])
        }, prepareForm:function () {
            this.reset();
            this.toHide = this.errors().add(this.containers)
        }, prepareElement:function (a) {
            this.reset();
            this.toHide = this.errorsFor(a)
        }, check:function (a) {
            a = this.clean(a);
            if (this.checkable(a))a = this.findByName(a.name).not(this.settings.ignore)[0];
            var b = c(a).rules(), d = false, e;
            for (e in b) {
                var f = {method:e, parameters:b[e]};
                try {
                    var g =
                        c.validator.methods[e].call(this, a.value.replace(/\r/g, ""), a, f.parameters);
                    if (g == "dependency-mismatch")d = true; else {
                        d = false;
                        if (g == "pending") {
                            this.toHide = this.toHide.not(this.errorsFor(a));
                            return
                        }
                        if (!g) {
                            this.formatAndAdd(a, f);
                            return false
                        }
                    }
                } catch (h) {
                    this.settings.debug && window.console && console.log("exception occured when checking element " + a.id + ", check the '" + f.method + "' method", h);
                    throw h;
                }
            }
            if (!d) {
                this.objectLength(b) && this.successList.push(a);
                return true
            }
        }, customMetaMessage:function (a, b) {
            if (c.metadata) {
                var d =
                    this.settings.meta ? c(a).metadata()[this.settings.meta] : c(a).metadata();
                return d && d.messages && d.messages[b]
            }
        }, customMessage:function (a, b) {
            var d = this.settings.messages[a];
            return d && (d.constructor == String ? d : d[b])
        }, findDefined:function () {
            for (var a = 0; a < arguments.length; a++)if (arguments[a] !== undefined)return arguments[a]
        }, defaultMessage:function (a, b) {
            return this.findDefined(this.customMessage(a.name, b), this.customMetaMessage(a, b), !this.settings.ignoreTitle && a.title || undefined, c.validator.messages[b], "<strong>Warning: No message defined for " +
                a.name + "</strong>")
        }, formatAndAdd:function (a, b) {
            var d = this.defaultMessage(a, b.method), e = /\$?\{(\d+)\}/g;
            if (typeof d == "function")d = d.call(this, b.parameters, a); else if (e.test(d))d = jQuery.format(d.replace(e, "{$1}"), b.parameters);
            this.errorList.push({message:d, element:a});
            this.errorMap[a.name] = d;
            this.submitted[a.name] = d
        }, addWrapper:function (a) {
            if (this.settings.wrapper)a = a.add(a.parent(this.settings.wrapper));
            return a
        }, defaultShowErrors:function () {
            for (var a = 0; this.errorList[a]; a++) {
                var b = this.errorList[a];
                this.settings.highlight && this.settings.highlight.call(this, b.element, this.settings.errorClass, this.settings.validClass);
                this.showLabel(b.element, b.message)
            }
            if (this.errorList.length)this.toShow = this.toShow.add(this.containers);
            if (this.settings.success)for (a = 0; this.successList[a]; a++)this.showLabel(this.successList[a]);
            if (this.settings.unhighlight) {
                a = 0;
                for (b = this.validElements(); b[a]; a++)this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass)
            }
            this.toHide = this.toHide.not(this.toShow);
            this.hideErrors();
            this.addWrapper(this.toShow).show()
        }, validElements:function () {
            return this.currentElements.not(this.invalidElements())
        }, invalidElements:function () {
            return c(this.errorList).map(function () {
                return this.element
            })
        }, showLabel:function (a, b) {
            var d = this.errorsFor(a);
            if (d.length) {
                d.removeClass().addClass(this.settings.errorClass);
                d.attr("generated") && d.html(b)
            } else {
                d = c("<" + this.settings.errorElement + "/>").attr({"for":this.idOrName(a), generated:true}).addClass(this.settings.errorClass).html(b ||
                    "");
                if (this.settings.wrapper)d = d.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                this.labelContainer.append(d).length || (this.settings.errorPlacement ? this.settings.errorPlacement(d, c(a)) : d.insertAfter(a))
            }
            if (!b && this.settings.success) {
                d.text("");
                typeof this.settings.success == "string" ? d.addClass(this.settings.success) : this.settings.success(d)
            }
            this.toShow = this.toShow.add(d)
        }, errorsFor:function (a) {
            var b = this.idOrName(a);
            return this.errors().filter(function () {
                return c(this).attr("for") == b
            })
        },
        idOrName:function (a) {
            return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name)
        }, checkable:function (a) {
            return/radio|checkbox/i.test(a.type)
        }, findByName:function (a) {
            var b = this.currentForm;
            return c(document.getElementsByName(a)).map(function (d, e) {
                return e.form == b && e.name == a && e || null
            })
        }, getLength:function (a, b) {
            switch (b.nodeName.toLowerCase()) {
                case "select":
                    return c("option:selected", b).length;
                case "input":
                    if (this.checkable(b))return this.findByName(b.name).filter(":checked").length
            }
            return a.length
        },
        depend:function (a, b) {
            return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : true
        }, dependTypes:{"boolean":function (a) {
            return a
        }, string:function (a, b) {
            return!!c(a, b.form).length
        }, "function":function (a, b) {
            return a(b)
        }}, optional:function (a) {
            return!c.validator.methods.required.call(this, c.trim(a.value), a) && "dependency-mismatch"
        }, startRequest:function (a) {
            if (!this.pending[a.name]) {
                this.pendingRequest++;
                this.pending[a.name] = true
            }
        }, stopRequest:function (a, b) {
            this.pendingRequest--;
            if (this.pendingRequest <
                0)this.pendingRequest = 0;
            delete this.pending[a.name];
            if (b && this.pendingRequest == 0 && this.formSubmitted && this.form()) {
                c(this.currentForm).submit();
                this.formSubmitted = false
            } else if (!b && this.pendingRequest == 0 && this.formSubmitted) {
                c(this.currentForm).triggerHandler("invalid-form", [this]);
                this.formSubmitted = false
            }
        }, previousValue:function (a) {
            return c.data(a, "previousValue") || c.data(a, "previousValue", {old:null, valid:true, message:this.defaultMessage(a, "remote")})
        }}, classRuleSettings:{required:{required:true},
        email:{email:true}, url:{url:true}, date:{date:true}, dateISO:{dateISO:true}, dateDE:{dateDE:true}, number:{number:true}, numberDE:{numberDE:true}, digits:{digits:true}, creditcard:{creditcard:true}}, addClassRules:function (a, b) {
        a.constructor == String ? this.classRuleSettings[a] = b : c.extend(this.classRuleSettings, a)
    }, classRules:function (a) {
        var b = {};
        (a = c(a).attr("class")) && c.each(a.split(" "), function () {
            this in c.validator.classRuleSettings && c.extend(b, c.validator.classRuleSettings[this])
        });
        return b
    }, attributeRules:function (a) {
        var b =
        {};
        a = c(a);
        for (var d in c.validator.methods) {
            var e = a.attr(d);
            if (e)b[d] = e
        }
        b.maxlength && /-1|2147483647|524288/.test(b.maxlength) && delete b.maxlength;
        return b
    }, metadataRules:function (a) {
        if (!c.metadata)return{};
        var b = c.data(a.form, "validator").settings.meta;
        return b ? c(a).metadata()[b] : c(a).metadata()
    }, staticRules:function (a) {
        var b = {}, d = c.data(a.form, "validator");
        if (d.settings.rules)b = c.validator.normalizeRule(d.settings.rules[a.name]) || {};
        return b
    }, normalizeRules:function (a, b) {
        c.each(a, function (d, e) {
            if (e ===
                false)delete a[d]; else if (e.param || e.depends) {
                var f = true;
                switch (typeof e.depends) {
                    case "string":
                        f = !!c(e.depends, b.form).length;
                        break;
                    case "function":
                        f = e.depends.call(b, b)
                }
                if (f)a[d] = e.param !== undefined ? e.param : true; else delete a[d]
            }
        });
        c.each(a, function (d, e) {
            a[d] = c.isFunction(e) ? e(b) : e
        });
        c.each(["minlength", "maxlength", "min", "max"], function () {
            if (a[this])a[this] = Number(a[this])
        });
        c.each(["rangelength", "range"], function () {
            if (a[this])a[this] = [Number(a[this][0]), Number(a[this][1])]
        });
        if (c.validator.autoCreateRanges) {
            if (a.min &&
                a.max) {
                a.range = [a.min, a.max];
                delete a.min;
                delete a.max
            }
            if (a.minlength && a.maxlength) {
                a.rangelength = [a.minlength, a.maxlength];
                delete a.minlength;
                delete a.maxlength
            }
        }
        a.messages && delete a.messages;
        return a
    }, normalizeRule:function (a) {
        if (typeof a == "string") {
            var b = {};
            c.each(a.split(/\s/), function () {
                b[this] = true
            });
            a = b
        }
        return a
    }, addMethod:function (a, b, d) {
        c.validator.methods[a] = b;
        c.validator.messages[a] = d != undefined ? d : c.validator.messages[a];
        b.length < 3 && c.validator.addClassRules(a, c.validator.normalizeRule(a))
    },
        methods:{required:function (a, b, d) {
            if (!this.depend(d, b))return"dependency-mismatch";
            switch (b.nodeName.toLowerCase()) {
                case "select":
                    return(a = c(b).val()) && a.length > 0;
                case "input":
                    if (this.checkable(b))return this.getLength(a, b) > 0;
                default:
                    return c.trim(a).length > 0
            }
        }, remote:function (a, b, d) {
            if (this.optional(b))return"dependency-mismatch";
            var e = this.previousValue(b);
            this.settings.messages[b.name] || (this.settings.messages[b.name] = {});
            e.originalMessage = this.settings.messages[b.name].remote;
            this.settings.messages[b.name].remote =
                e.message;
            d = typeof d == "string" && {url:d} || d;
            if (this.pending[b.name])return"pending";
            if (e.old === a)return e.valid;
            e.old = a;
            var f = this;
            this.startRequest(b);
            var g = {};
            g[b.name] = a;
            c.ajax(c.extend(true, {url:d, mode:"abort", port:"validate" + b.name, dataType:"json", data:g, success:function (h) {
                f.settings.messages[b.name].remote = e.originalMessage;
                var j = h === true;
                if (j) {
                    var i = f.formSubmitted;
                    f.prepareElement(b);
                    f.formSubmitted = i;
                    f.successList.push(b);
                    f.showErrors()
                } else {
                    i = {};
                    h = h || f.defaultMessage(b, "remote");
                    i[b.name] =
                        e.message = c.isFunction(h) ? h(a) : h;
                    f.showErrors(i)
                }
                e.valid = j;
                f.stopRequest(b, j)
            }}, d));
            return"pending"
        }, minlength:function (a, b, d) {
            return this.optional(b) || this.getLength(c.trim(a), b) >= d
        }, maxlength:function (a, b, d) {
            return this.optional(b) || this.getLength(c.trim(a), b) <= d
        }, rangelength:function (a, b, d) {
            a = this.getLength(c.trim(a), b);
            return this.optional(b) || a >= d[0] && a <= d[1]
        }, min:function (a, b, d) {
            return this.optional(b) || a >= d
        }, max:function (a, b, d) {
            return this.optional(b) || a <= d
        }, range:function (a, b, d) {
            return this.optional(b) ||
                a >= d[0] && a <= d[1]
        }, email:function (a, b) {
            return this.optional(b) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(a)
        },
            url:function (a, b) {
                return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)
            },
            date:function (a, b) {
                return this.optional(b) || !/Invalid|NaN/.test(new Date(a))
            }, dateISO:function (a, b) {
                return this.optional(b) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(a)
            }, number:function (a, b) {
                return this.optional(b) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(a)
            }, digits:function (a, b) {
                return this.optional(b) || /^\d+$/.test(a)
            }, creditcard:function (a, b) {
                if (this.optional(b))return"dependency-mismatch";
                if (/[^0-9-]+/.test(a))return false;
                var d = 0, e = 0, f = false;
                a = a.replace(/\D/g, "");
                for (var g = a.length - 1; g >=
                    0; g--) {
                    e = a.charAt(g);
                    e = parseInt(e, 10);
                    if (f)if ((e *= 2) > 9)e -= 9;
                    d += e;
                    f = !f
                }
                return d % 10 == 0
            }, accept:function (a, b, d) {
                d = typeof d == "string" ? d.replace(/,/g, "|") : "png|jpe?g|gif";
                return this.optional(b) || a.match(RegExp(".(" + d + ")$", "i"))
            }, equalTo:function (a, b, d) {
                d = c(d).unbind(".validate-equalTo").bind("blur.validate-equalTo", function () {
                    c(b).valid()
                });
                return a == d.val()
            }}});
    c.format = c.validator.format
})(jQuery);
(function (c) {
    var a = {};
    if (c.ajaxPrefilter)c.ajaxPrefilter(function (d, e, f) {
        e = d.port;
        if (d.mode == "abort") {
            a[e] && a[e].abort();
            a[e] = f
        }
    }); else {
        var b = c.ajax;
        c.ajax = function (d) {
            var e = ("port"in d ? d : c.ajaxSettings).port;
            if (("mode"in d ? d : c.ajaxSettings).mode == "abort") {
                a[e] && a[e].abort();
                return a[e] = b.apply(this, arguments)
            }
            return b.apply(this, arguments)
        }
    }
})(jQuery);
(function (c) {
    !jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener && c.each({focus:"focusin", blur:"focusout"}, function (a, b) {
        function d(e) {
            e = c.event.fix(e);
            e.type = b;
            return c.event.handle.call(this, e)
        }

        c.event.special[b] = {setup:function () {
            this.addEventListener(a, d, true)
        }, teardown:function () {
            this.removeEventListener(a, d, true)
        }, handler:function (e) {
            arguments[0] = c.event.fix(e);
            arguments[0].type = b;
            return c.event.handle.apply(this, arguments)
        }}
    });
    c.extend(c.fn, {validateDelegate:function (a, b, d) {
        return this.bind(b, function (e) {
            var f = c(e.target);
            if (f.is(a))return d.apply(f, arguments)
        })
    }})
})(jQuery);
var FORMALIZE = function (a, b, c) {
    function d(a) {
        var b = c.createElement("b");
        return b.innerHTML = "<!--[if IE " + a + "]><br><![endif]-->", !!b.getElementsByTagName("br").length
    }

    var e = "placeholder"in c.createElement("input"), f = "autofocus"in c.createElement("input"), g = d(6), h = d(7);
    return{go:function () {
        var a, b = this.init;
        for (a in b)b.hasOwnProperty(a) && b[a]()
    }, init:{full_input_size:function () {
        h && a("textarea, input.input_full").length && a("textarea, input.input_full").wrap('<span class="input_full_wrap"></span>')
    }, ie6_skin_inputs:function () {
        if (g && a("input, select, textarea").length) {
            var b = /button|submit|reset/, c = /date|datetime|datetime-local|email|month|number|password|range|search|tel|text|time|url|week/;
            a("input").each(function () {
                var d = a(this);
                this.getAttribute("type").match(b) ? (d.addClass("ie6_button"), this.disabled && d.addClass("ie6_button_disabled")) : this.getAttribute("type").match(c) && (d.addClass("ie6_input"), this.disabled && d.addClass("ie6_input_disabled"))
            }), a("textarea, select").each(function () {
                this.disabled && a(this).addClass("ie6_input_disabled")
            })
        }
    }, autofocus:function () {
        f || !a(":input[autofocus]").length || a(":input[autofocus]:visible:first").focus()
    }, placeholder:function () {
        !e && !!a(":input[placeholder]").length && (FORMALIZE.misc.add_placeholder(), a(":input[placeholder]").each(function () {
            if (this.type !== "password") {
                var b = a(this), c = b.attr("placeholder");
                b.focus(function () {
                    b.val() === c && b.val("").removeClass("placeholder_text")
                }).blur(function () {
                    FORMALIZE.misc.add_placeholder()
                }), b.closest("form").submit(function () {
                    b.val() === c && b.val("").removeClass("placeholder_text")
                }).bind("reset", function () {
                    setTimeout(FORMALIZE.misc.add_placeholder, 50)
                })
            }
        }))
    }}, misc:{add_placeholder:function () {
        e || !a(":input[placeholder]").length || a(":input[placeholder]").each(function () {
            if (this.type !== "password") {
                var b = a(this), c = b.attr("placeholder");
                (!b.val() || b.val() === c) && b.val(c).addClass("placeholder_text")
            }
        })
    }}}
}(jQuery, this, this.document);
jQuery(document).ready(function () {
    FORMALIZE.go()
})
;
(function ($) {
    $(document).ready(function () {
        if ($('#checkout_form_address').is('*')) {

            $('#checkout_form_address').validate();

            var get_states = function (region) {
                country = $('p#' + region + 'country' + ' span#' + region + 'country :only-child').val();
                return state_mapper[country];
            }

            var update_state = function (region) {
                states = get_states(region);

                state_select = $('p#' + region + 'state select');
                state_input = $('p#' + region + 'state input');

                if (states) {
                    selected = state_select.val();
                    state_select.html('');
                    states_with_blank = [
                        ["", ""]
                    ].concat(states);
                    $.each(states_with_blank, function (pos, id_nm) {
                        var opt = $(document.createElement('option'))
                            .attr('value', id_nm[0])
                            .html(id_nm[1]);
                        if (selected == id_nm[0]) {
                            opt.prop("selected", true);
                        }
                        state_select.append(opt);
                    });
                    state_select.prop("disabled", false).show();
                    state_input.hide().prop("disabled", true);

                } else {
                    state_input.prop("disabled", false).show();
                    state_select.hide().prop("disabled", true);
                }

            };

            $('p#bcountry select').change(function () {
                update_state('b');
            });
            $('p#scountry select').change(function () {
                update_state('s');
            });
            update_state('b');
            update_state('s');

            $('input#order_use_billing').click(function () {
                if ($(this).is(':checked')) {
                    $('#shipping .inner').hide();
                    $('#shipping .inner input, #shipping .inner select').prop("disabled", true);
                } else {
                    $('#shipping .inner').show();
                    $('#shipping .inner input, #shipping .inner select').prop("disabled", false);
                    //only want to enable relevant field
                    if (get_states('s')) {
                        $('span#sstate input').hide().prop("disabled", true);
                    } else {
                        $('span#sstate select').hide().prop("disabled", true);
                    }

                }
            }).triggerHandler('click');
        }

        if ($('#checkout_form_payment').is('*')) {
            // Show fields for the selected payment method
            $("input[type='radio'][name='order[payments_attributes][][payment_method_id]']").click(function () {
                $('#payment-methods li').hide();
                if (this.checked) {
                    $('#payment_method_' + this.value).show();
                }
            }).triggerHandler('click');
        }
    });
})(jQuery);

function disableSaveOnClick() {
    $('form.edit_spree_order').submit(function () {
        $(this).find(':submit, :image').attr('disabled', true).removeClass('primary').addClass('disabled');
    });
}
;
var add_image_handlers = function () {
    $("#main-image").data('selectedThumb', $('#main-image img').attr('src'));
    $('ul.thumbnails li').eq(0).addClass('selected');

    $('ul.thumbnails').delegate('a', 'click', function (event) {
        $("#main-image").data('selectedThumb', $(event.currentTarget).attr('href'));
        $("#main-image").data('selectedThumbId', $(event.currentTarget).parent().attr('id'));
        $(this).mouseout(function () {
            $('ul.thumbnails li').removeClass('selected');
            $(event.currentTarget).parent('li').addClass('selected');
        });
        return false;
    });
    $('ul.thumbnails').delegate('li', 'mouseenter', function (event) {
        $('#main-image img').attr('src', $(event.currentTarget).find('a').attr('href'));
    });
    $('ul.thumbnails').delegate('li', 'mouseleave', function (event) {
        $('#main-image img').attr('src', $("#main-image").data('selectedThumb'));
    });
};

var show_variant_images = function (variant_id) {
    $('li.vtmb').hide();
    $('li.vtmb-' + variant_id).show();
    var currentThumb = $('#' + $("#main-image").data('selectedThumbId'));
    // if currently selected thumb does not belong to current variant, nor to common images,
    // hide it and select the first available thumb instead.
    if (!currentThumb.hasClass('vtmb-' + variant_id) && !currentThumb.hasClass('tmb-all')) {
        var thumb = $($('ul.thumbnails li:visible').eq(0));
        var newImg = thumb.find('a').attr('href');
        $('ul.thumbnails li').removeClass('selected');
        thumb.addClass('selected');
        $('#main-image img').attr('src', newImg);
        $("#main-image").data('selectedThumb', newImg);
        $("#main-image").data('selectedThumbId', thumb.attr('id'));
    }
}

$(document).ready(function () {
    add_image_handlers();
    if ($('#product-variants input[type=radio]').length > 0) {
        show_variant_images($('#product-variants input[type=radio]').eq(0).attr('value'));
    }

    $('#product-variants input[type=radio]').click(function (event) {
        show_variant_images(this.value);
    });
});

(function ($) {
    $(document).ready(function () {
        if ($('form#update-cart').is('*')) {
            $('form#update-cart a.delete').show().live('click', function (e) {
                $(this).parents('.line-item').first().find('input.line_item_quantity').val(0);
                $(this).parents('form').first().submit();
                e.preventDefault();
            });
        }
    });
})(jQuery);


(function ($) {
    $.formatCurrency = {};
    $.formatCurrency.regions = [];
    $.formatCurrency.regions[""] = {symbol:"$", positiveFormat:"%s%n", negativeFormat:"(%s%n)", decimalSymbol:".", digitGroupSymbol:",", groupDigits:true};
    $.fn.formatCurrency = function (destination, settings) {
        if (arguments.length == 1 && typeof destination !== "string") {
            settings = destination;
            destination = false
        }
        var defaults = {name:"formatCurrency", colorize:false, region:"", global:true, roundToDecimalPlace:2, eventOnDecimalsEntered:false};
        defaults = $.extend(defaults, $.formatCurrency.regions[""]);
        settings = $.extend(defaults, settings);
        if (settings.region.length > 0) {
            settings = $.extend(settings, getRegionOrCulture(settings.region))
        }
        settings.regex = generateRegex(settings);
        return this.each(function () {
            $this = $(this);
            var num = "0";
            num = $this[$this.is("input, select, textarea") ? "val" : "html"]();
            if (num.search("\\(") >= 0) {
                num = "-" + num
            }
            if (num === "" || (num === "-" && settings.roundToDecimalPlace === -1)) {
                return
            }
            if (isNaN(num)) {
                num = num.replace(settings.regex, "");
                if (num === "" || (num === "-" && settings.roundToDecimalPlace === -1)) {
                    return
                }
                if (settings.decimalSymbol != ".") {
                    num = num.replace(settings.decimalSymbol, ".")
                }
                if (isNaN(num)) {
                    num = "0"
                }
            }
            var numParts = String(num).split(".");
            var isPositive = (num == Math.abs(num));
            var hasDecimals = (numParts.length > 1);
            var decimals = (hasDecimals ? numParts[1].toString() : "0");
            var originalDecimals = decimals;
            num = Math.abs(numParts[0]);
            num = isNaN(num) ? 0 : num;
            if (settings.roundToDecimalPlace >= 0) {
                decimals = parseFloat("1." + decimals);
                decimals = decimals.toFixed(settings.roundToDecimalPlace);
                if (decimals.substring(0, 1) == "2") {
                    num = Number(num) + 1
                }
                decimals = decimals.substring(2)
            }
            num = String(num);
            if (settings.groupDigits) {
                for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3);
                     i++) {
                    num = num.substring(0, num.length - (4 * i + 3)) + settings.digitGroupSymbol + num.substring(num.length - (4 * i + 3))
                }
            }
            if ((hasDecimals && settings.roundToDecimalPlace == -1) || settings.roundToDecimalPlace > 0) {
                num += settings.decimalSymbol + decimals
            }
            var format = isPositive ? settings.positiveFormat : settings.negativeFormat;
            var money = format.replace(/%s/g, settings.symbol);
            money = money.replace(/%n/g, num);
            var $destination = $([]);
            if (!destination) {
                $destination = $this
            } else {
                $destination = $(destination)
            }
            $destination[$destination.is("input, select, textarea") ? "val" : "html"](money);
            if (hasDecimals && settings.eventOnDecimalsEntered && originalDecimals.length > settings.roundToDecimalPlace) {
                $destination.trigger("decimalsEntered", originalDecimals)
            }
            if (settings.colorize) {
                $destination.css("color", isPositive ? "black" : "red")
            }
        })
    };
    $.fn.toNumber = function (settings) {
        var defaults = $.extend({name:"toNumber", region:"", global:true}, $.formatCurrency.regions[""]);
        settings = jQuery.extend(defaults, settings);
        if (settings.region.length > 0) {
            settings = $.extend(settings, getRegionOrCulture(settings.region))
        }
        settings.regex = generateRegex(settings);
        return this.each(function () {
            var method = $(this).is("input, select, textarea") ? "val" : "html";
            $(this)[method]($(this)[method]().replace("(", "(-").replace(settings.regex, ""))
        })
    };
    $.fn.asNumber = function (settings) {
        var defaults = $.extend({name:"asNumber", region:"", parse:true, parseType:"Float", global:true}, $.formatCurrency.regions[""]);
        settings = jQuery.extend(defaults, settings);
        if (settings.region.length > 0) {
            settings = $.extend(settings, getRegionOrCulture(settings.region))
        }
        settings.regex = generateRegex(settings);
        settings.parseType = validateParseType(settings.parseType);
        var method = $(this).is("input, select, textarea") ? "val" : "html";
        var num = $(this)[method]();
        num = num ? num : "";
        num = num.replace("(", "(-");
        num = num.replace(settings.regex, "");
        if (!settings.parse) {
            return num
        }
        if (num.length == 0) {
            num = "0"
        }
        if (settings.decimalSymbol != ".") {
            num = num.replace(settings.decimalSymbol, ".")
        }
        return window["parse" + settings.parseType](num)
    };
    function getRegionOrCulture(region) {
        var regionInfo = $.formatCurrency.regions[region];
        if (regionInfo) {
            return regionInfo
        } else {
            if (/(\w+)-(\w+)/g.test(region)) {
                var culture = region.replace(/(\w+)-(\w+)/g, "$1");
                return $.formatCurrency.regions[culture]
            }
        }
        return null
    }

    function validateParseType(parseType) {
        switch (parseType.toLowerCase()) {
            case"int":
                return"Int";
            case"float":
                return"Float";
            default:
                throw"invalid parseType"
        }
    }

    function generateRegex(settings) {
        if (settings.symbol === "") {
            return new RegExp("[^\\d" + settings.decimalSymbol + "-]", "g")
        } else {
            var symbol = settings.symbol.replace("$", "\\$").replace(".", "\\.");
            return new RegExp(symbol + "|[^\\d" + settings.decimalSymbol + "-]", "g")
        }
    }
})(jQuery);
//  This file is part of the jQuery formatCurrency Plugin.
//
//    The jQuery formatCurrency Plugin is free software: you can redistribute it
//    and/or modify it under the terms of the GNU General Public License as published 
//    by the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    The jQuery formatCurrency Plugin is distributed in the hope that it will
//    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
//    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along with 
//    the jQuery formatCurrency Plugin.  If not, see <http://www.gnu.org/licenses/>.

(function ($) {

    $.formatCurrency.regions['af-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['am-ET'] = {
        symbol:'ETB',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-AE'] = {
        symbol:'د.إ.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-BH'] = {
        symbol:'د.ب.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-DZ'] = {
        symbol:'د.ج.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-EG'] = {
        symbol:'ج.م.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-IQ'] = {
        symbol:'د.ع.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-JO'] = {
        symbol:'د.ا.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-KW'] = {
        symbol:'د.ك.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-LB'] = {
        symbol:'ل.ل.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-LY'] = {
        symbol:'د.ل.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-MA'] = {
        symbol:'د.م.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-OM'] = {
        symbol:'ر.ع.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-QA'] = {
        symbol:'ر.ق.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-SA'] = {
        symbol:'ر.س.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-SY'] = {
        symbol:'ل.س.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-TN'] = {
        symbol:'د.ت.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ar-YE'] = {
        symbol:'ر.ي.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['arn-CL'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['as-IN'] = {
        symbol:'ট',
        positiveFormat:'%n%s',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['az-Cyrl-AZ'] = {
        symbol:'ман.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['az-Latn-AZ'] = {
        symbol:'man.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['ba-RU'] = {
        symbol:'һ.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['be-BY'] = {
        symbol:'р.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['bg-BG'] = {
        symbol:'лв',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['bn-BD'] = {
        symbol:'৳',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['bn-IN'] = {
        symbol:'টা',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['bo-CN'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['br-FR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['bs-Cyrl-BA'] = {
        symbol:'КМ',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['bs-Latn-BA'] = {
        symbol:'KM',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ca-ES'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['co-FR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['cs-CZ'] = {
        symbol:'Kč',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['cy-GB'] = {
        symbol:'£',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['da-DK'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['de-AT'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['de-CH'] = {
        symbol:'SFr.',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:'\'',
        groupDigits:true
    };

    $.formatCurrency.regions['de-DE'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['de-LI'] = {
        symbol:'CHF',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:'\'',
        groupDigits:true
    };

    $.formatCurrency.regions['de-LU'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['de'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['dsb-DE'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['dv-MV'] = {
        symbol:'ރ.',
        positiveFormat:'%n %s',
        negativeFormat:'%n %s-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['el-GR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['en-029'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-AU'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-BZ'] = {
        symbol:'BZ$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-CA'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-GB'] = {
        symbol:'£',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-IE'] = {
        symbol:'€',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-IN'] = {
        symbol:'Rs.',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-JM'] = {
        symbol:'J$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-MY'] = {
        symbol:'RM',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-NZ'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-PH'] = {
        symbol:'Php',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-SG'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-TT'] = {
        symbol:'TT$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['en-ZW'] = {
        symbol:'Z$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-AR'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-BO'] = {
        symbol:'$b',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-CL'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-CO'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-CR'] = {
        symbol:'₡',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-DO'] = {
        symbol:'RD$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-EC'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-ES'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-GT'] = {
        symbol:'Q',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-HN'] = {
        symbol:'L.',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-MX'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-NI'] = {
        symbol:'C$',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-PA'] = {
        symbol:'B/.',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-PE'] = {
        symbol:'S/.',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-PR'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-PY'] = {
        symbol:'Gs',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-SV'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-US'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['es-UY'] = {
        symbol:'$U',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es-VE'] = {
        symbol:'Bs',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['es'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['et-EE'] = {
        symbol:'kr',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:'.',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['eu-ES'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['fa-IR'] = {
        symbol:'ريال',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'/',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['fi-FI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fil-PH'] = {
        symbol:'PhP',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['fo-FO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-BE'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-CA'] = {
        symbol:'$',
        positiveFormat:'%n %s',
        negativeFormat:'(%n %s)',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-CH'] = {
        symbol:'SFr.',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:'\'',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-FR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-LU'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fr-MC'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fr'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['fy-NL'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ga-IE'] = {
        symbol:'€',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['gl-ES'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['gsw-FR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['gu-IN'] = {
        symbol:'રૂ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ha-Latn-NG'] = {
        symbol:'N',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['he-IL'] = {
        symbol:'₪',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['hi-IN'] = {
        symbol:'रु',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['hr-BA'] = {
        symbol:'KM',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['hr-HR'] = {
        symbol:'kn',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['hsb-DE'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['hu-HU'] = {
        symbol:'Ft',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['hy-AM'] = {
        symbol:'դր.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['id-ID'] = {
        symbol:'Rp',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ig-NG'] = {
        symbol:'N',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ii-CN'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['is-IS'] = {
        symbol:'kr.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['it-CH'] = {
        symbol:'SFr.',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:'\'',
        groupDigits:true
    };

    $.formatCurrency.regions['it-IT'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['it'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['iu-Cans-CA'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['iu-Latn-CA'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ja-JP'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ja'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ka-GE'] = {
        symbol:'Lari',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['kk-KZ'] = {
        symbol:'Т',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'-',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['kl-GL'] = {
        symbol:'kr.',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['km-KH'] = {
        symbol:'៛',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['kn-IN'] = {
        symbol:'ರೂ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ko-KR'] = {
        symbol:'₩',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['kok-IN'] = {
        symbol:'रु',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ky-KG'] = {
        symbol:'сом',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:'-',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['lb-LU'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['lo-LA'] = {
        symbol:'₭',
        positiveFormat:'%n%s',
        negativeFormat:'(%n%s)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['lt-LT'] = {
        symbol:'Lt',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['lv-LV'] = {
        symbol:'Ls',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['mi-NZ'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['mk-MK'] = {
        symbol:'ден.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ml-IN'] = {
        symbol:'ക',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['mn-MN'] = {
        symbol:'₮',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['mn-Mong-CN'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['moh-CA'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['mr-IN'] = {
        symbol:'रु',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ms-BN'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ms-MY'] = {
        symbol:'R',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['mt-MT'] = {
        symbol:'Lm',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['nb-NO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['ne-NP'] = {
        symbol:'रु',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['nl-BE'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['nl-NL'] = {
        symbol:'€',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['nn-NO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['nso-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['oc-FR'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['or-IN'] = {
        symbol:'ଟ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['pa-IN'] = {
        symbol:'ਰੁ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['pl-PL'] = {
        symbol:'zł',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['prs-AF'] = {
        symbol:'؋',
        positiveFormat:'%s%n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ps-AF'] = {
        symbol:'؋',
        positiveFormat:'%s%n',
        negativeFormat:'%s%n-',
        decimalSymbol:'٫',
        digitGroupSymbol:'٬',
        groupDigits:true
    };

    $.formatCurrency.regions['pt-BR'] = {
        symbol:'R$',
        positiveFormat:'%s %n',
        negativeFormat:'-%s %n',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['pt-PT'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['qut-GT'] = {
        symbol:'Q',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['quz-BO'] = {
        symbol:'$b',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['quz-EC'] = {
        symbol:'$',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['quz-PE'] = {
        symbol:'S/.',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['rm-CH'] = {
        symbol:'fr.',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:'\'',
        groupDigits:true
    };

    $.formatCurrency.regions['ro-RO'] = {
        symbol:'lei',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['ru'] = {
        symbol:' руб.',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['rw-RW'] = {
        symbol:'RWF',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sa-IN'] = {
        symbol:'रु',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['sah-RU'] = {
        symbol:'с.',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['se-FI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['se-NO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['se-SE'] = {
        symbol:'kr',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['si-LK'] = {
        symbol:'රු.',
        positiveFormat:'%s %n',
        negativeFormat:'(%s %n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['sk-SK'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sl-SI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sma-NO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sma-SE'] = {
        symbol:'kr',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['smj-NO'] = {
        symbol:'kr',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['smj-SE'] = {
        symbol:'kr',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['smn-FI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sms-FI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sq-AL'] = {
        symbol:'Lek',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sr-Cyrl-BA'] = {
        symbol:'КМ',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sr-Cyrl-CS'] = {
        symbol:'Дин.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sr-Latn-BA'] = {
        symbol:'KM',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sr-Latn-CS'] = {
        symbol:'Din.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sv-FI'] = {
        symbol:'€',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['sv-SE'] = {
        symbol:'kr',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['sw-KE'] = {
        symbol:'S',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['syr-SY'] = {
        symbol:'ل.س.‏',
        positiveFormat:'%s %n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ta-IN'] = {
        symbol:'ரூ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['te-IN'] = {
        symbol:'రూ',
        positiveFormat:'%s %n',
        negativeFormat:'%s -%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['tg-Cyrl-TJ'] = {
        symbol:'т.р.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:';',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['th-TH'] = {
        symbol:'฿',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['tk-TM'] = {
        symbol:'m.',
        positiveFormat:'%n%s',
        negativeFormat:'-%n%s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['tn-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['tr-TR'] = {
        symbol:'TL',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['tt-RU'] = {
        symbol:'р.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['tzm-Latn-DZ'] = {
        symbol:'DZD',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['ug-CN'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['uk-UA'] = {
        symbol:'грн.',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['ur-PK'] = {
        symbol:'Rs',
        positiveFormat:'%s%n',
        negativeFormat:'%s%n-',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['uz-Cyrl-UZ'] = {
        symbol:'сўм',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['uz-Latn-UZ'] = {
        symbol:'su\'m',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['vi-VN'] = {
        symbol:'₫',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:'.',
        groupDigits:true
    };

    $.formatCurrency.regions['wo-SN'] = {
        symbol:'XOF',
        positiveFormat:'%n %s',
        negativeFormat:'-%n %s',
        decimalSymbol:',',
        digitGroupSymbol:' ',
        groupDigits:true
    };

    $.formatCurrency.regions['xh-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['yo-NG'] = {
        symbol:'N',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh-CN'] = {
        symbol:'￥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh-HK'] = {
        symbol:'HK$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh-MO'] = {
        symbol:'MOP',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh-SG'] = {
        symbol:'$',
        positiveFormat:'%s%n',
        negativeFormat:'(%s%n)',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh-TW'] = {
        symbol:'NT$',
        positiveFormat:'%s%n',
        negativeFormat:'-%s%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zh'] = {
        symbol:'¥',
        positiveFormat:'%s%n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

    $.formatCurrency.regions['zu-ZA'] = {
        symbol:'R',
        positiveFormat:'%s %n',
        negativeFormat:'%s-%n',
        decimalSymbol:'.',
        digitGroupSymbol:',',
        groupDigits:true
    };

})(jQuery);


$(function () {
    // set up the 'reset' functionality on file uploads
    $("#cart-form form input[type=file]").each(function () {
        // make a clone of the original in case the user wants to undo an upload
        var orig = $(this);
        var clone = $(orig).clone();
        attachFileInputSwap(orig, clone);
    });
    // image customizations need multipart
    $("#cart-form form").attr("enctype", "multipart/form-data");
    $("#cart-form form").validate();
});
// 'replacement' is always a pure, empty file input
function attachFileInputSwap(current, replacement) {
    $(current).siblings("a").click(function (event) {
        event.preventDefault();
        $(current).replaceWith(replacement);
        // need to reattach
        var clone = $(replacement).clone();
        attachFileInputSwap(replacement, clone);
    });
}
;
// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//


;
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//


;
